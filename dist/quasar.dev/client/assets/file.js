import{_ as u,a as h}from"./index.js";import{c as s}from"./_examples_frameless-electron-window.js";import{D as f,a as c}from"./DocPage.js";import{D as l}from"./DocExample.js";import{D as g}from"./DocApi.js";import{p as m,b,d as v,w as d,h as e,i as t,e as o,f as n}from"./vendor.js";import"./DocCode.js";import"./CopyButton.js";import"./DocCodepen.js";import"./utils.js";import"./DocCardTitle.js";const k=e("p",null,"QFile is a component which handles the user interaction for picking file(s).",-1),y={class:"doc-note doc-note--tip"},_=e("p",{class:"doc-note__title"},"TIP",-1),w=e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("For your QFile you can use only one of the main designs ("),e("code",{class:"doc-token"},"filled"),t(", "),e("code",{class:"doc-token"},"outlined"),t(", "),e("code",{class:"doc-token"},"standout"),t(", "),e("code",{class:"doc-token"},"borderless"),t("). You cannot use multiple as they are self-exclusive.")])],-1),C=e("p",null,[t("As a helper, you can use "),e("code",{class:"doc-token"},"clearable"),t(" prop so user can reset model to "),e("code",{class:"doc-token"},"null"),t(" through an appended icon. The second QFile in the example below is the equivalent of using "),e("code",{class:"doc-token"},"clearable"),t(".")],-1),D=e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("Under the hood, QFile uses a native input. Due to browser security policy, it is not allowed to programmatically fill such an input with a value. As a result, even if you set v-model from the beginning to a value, the component will show those file(s) but the input tag itself won’t be filled in with that value. A user interaction (click/tap/"),e("kbd",null,"ENTER"),t(" key/"),e("kbd",null,"SPACE"),t(" key) is absolutely required in order for the native input to contain them. It’s best to always have the initial value of model set to "),e("code",{class:"doc-token"},"null"),t(" or "),e("code",{class:"doc-token"},"undefined/void 0"),t(".")])],-1),F=e("p",null,[t("By default, QFile replaces the model each time the user selects any files through the popup. However, when you are accepting multiple files ("),e("code",{class:"doc-token"},"multiple"),t(" prop) you can change this behavior and append the new selection to the model rather than replacing its old value.")],-1),x=e("p",null,"Below you can pick files multiple times and QFile will keep on appending them to the model:",-1),A=e("p",null,"The example below highlights how you can customize the display of each file and even incorporate a possible upload progress indicator:",-1),N=e("p",null,"You can even combine the restrictions above.",-1),Q={class:"doc-note doc-note--tip"},B=e("p",{class:"doc-note__title"},"TIP",-1),I=e("code",{class:"doc-token"},"accept",-1),$=e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("Recommended format for the "),e("code",{class:"doc-token"},"accept"),t(" property is "),e("code",{class:"doc-token"},"<mediatype>/<extension>"),t(". Examples: “image/png”, “image/png”. QFile uses an "),e("code",{class:"doc-token"},'<input type="file">'),t(" under the hood and it relies entirely on the host browser to trigger the file picker. If the "),e("code",{class:"doc-token"},"accept"),t(" property (that gets applied to the input) is not correct, no file picker will appear on screen or it will appear but it will accept all file types.")])],-1),R=e("p",null,"You can also apply custom filters (which are executed after user picks files):",-1),T=e("p",null,[t("When dealing with a native form which has an "),e("code",{class:"doc-token"},"action"),t(" and a "),e("code",{class:"doc-token"},"method"),t(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),e("code",{class:"doc-token"},"name"),t(" property on QFile, otherwise formData will not contain it (if it should):")],-1),U={__name:"file",setup(P){m("_q_ex",{name:"QFile",list:h(()=>import("./e.QFile.js"),[])});const r=[{name:"Uploader",category:"Vue Components",path:"/vue-components/uploader"},{name:"Input Textfield",category:"Form Components",path:"/vue-components/input"}],p=[{id:"qfile-api",title:"2. QFile API",deep:!0},{id:"design",title:"3. Design"},{id:"decorators",title:"3.1. Decorators",sub:!0},{id:"coloring",title:"3.2. Coloring",sub:!0},{id:"clearable",title:"3.3. Clearable",sub:!0},{id:"disable-and-readonly",title:"3.4. Disable and readonly",sub:!0},{id:"usage",title:"4. Usage"},{id:"basic",title:"4.1. Basic",sub:!0},{id:"appending-files",title:"4.2. Appending files",sub:!0},{id:"counters",title:"4.3. Counters",sub:!0},{id:"using-chips",title:"4.4. Using chips",sub:!0},{id:"using-file-slot",title:"4.5. Using file slot",sub:!0},{id:"restricting-files",title:"4.6. Restricting files",sub:!0},{id:"native-form-submit",title:"4.7. Native form submit",sub:!0}];return(E,i)=>(b(),v(f,{title:"File Picker",desc:"The QFile Vue component is used as a file picker.",heading:"","edit-link":"vue-components/file",toc:p,related:r},{default:d(()=>[k,e("div",y,[_,e("p",null,[t("If you also want a component to handle the upload for you, please consider using "),o(c,{to:"/vue-components/uploader"},{default:d(()=>[t("QUploader")]),_:1}),t(" instead.")])]),o(g,{file:"QFile"}),e("h2",{id:"design",class:"doc-heading doc-h2",onClick:i[0]||(i[0]=a=>n(s)("design"))},"Design"),w,o(l,{title:"Design Overview",file:"DesignOverview"}),e("h3",{id:"decorators",class:"doc-heading doc-h3",onClick:i[1]||(i[1]=a=>n(s)("decorators"))},"Decorators"),o(l,{title:"Decorators",file:"Decorators"}),e("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:i[2]||(i[2]=a=>n(s)("coloring"))},"Coloring"),o(l,{title:"Coloring",file:"Coloring"}),e("h3",{id:"clearable",class:"doc-heading doc-h3",onClick:i[3]||(i[3]=a=>n(s)("clearable"))},"Clearable"),C,o(l,{title:"Clearable",file:"Clearable"}),e("h3",{id:"disable-and-readonly",class:"doc-heading doc-h3",onClick:i[4]||(i[4]=a=>n(s)("disable-and-readonly"))},"Disable and readonly"),o(l,{title:"Disable and readonly",file:"DisableReadonly"}),e("h2",{id:"usage",class:"doc-heading doc-h2",onClick:i[5]||(i[5]=a=>n(s)("usage"))},"Usage"),D,e("h3",{id:"basic",class:"doc-heading doc-h3",onClick:i[6]||(i[6]=a=>n(s)("basic"))},"Basic"),o(l,{title:"Single file",file:"BasicSingle"}),o(l,{title:"Multiple files",file:"BasicMultiple"}),e("h3",{id:"appending-files",class:"doc-heading doc-h3",onClick:i[7]||(i[7]=a=>n(s)("appending-files"))},"Appending files"),F,x,o(l,{title:"Appending files",file:"AppendingFiles"}),e("h3",{id:"counters",class:"doc-heading doc-h3",onClick:i[8]||(i[8]=a=>n(s)("counters"))},"Counters"),o(l,{title:"Basic counter",file:"CounterBasic"}),o(l,{title:"Counter label",file:"CounterLabel"}),e("h3",{id:"using-chips",class:"doc-heading doc-h3",onClick:i[9]||(i[9]=a=>n(s)("using-chips"))},"Using chips"),o(l,{title:"With chips",file:"WithChips"}),e("h3",{id:"using-file-slot",class:"doc-heading doc-h3",onClick:i[10]||(i[10]=a=>n(s)("using-file-slot"))},"Using file slot"),A,o(l,{title:"With progress indicator",file:"WithProgress"}),e("h3",{id:"restricting-files",class:"doc-heading doc-h3",onClick:i[11]||(i[11]=a=>n(s)("restricting-files"))},"Restricting files"),o(l,{title:"Basic restrictions",file:"RestrictionBasic"}),N,e("div",Q,[B,e("p",null,[t("In the example above, we’re using "),I,t(" property. Its value must be a comma separated list of unique file type specifiers. Maps to ‘accept’ attribute of native input type=file element. "),o(c,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers"},{default:d(()=>[t("More info")]),_:1}),t(".")])]),$,R,o(l,{title:"Filter",file:"RestrictionFilter"}),e("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:i[12]||(i[12]=a=>n(s)("native-form-submit"))},"Native form submit"),T,o(l,{title:"Native form",file:"NativeForm"})]),_:1}))}},j=u(U,[["__file","file.md"]]);export{j as default};
