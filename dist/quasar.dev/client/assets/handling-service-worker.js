import{c as p}from"./_examples_frameless-electron-window.js";import{D as k,a as c}from"./DocPage.js";import{D as r}from"./DocPrerender.js";import{C as i}from"./CopyButton.js";import{_ as d}from"./index.js";import{b as h,d as f,w as o,h as n,f as e,i as t,e as s}from"./vendor.js";const g=n("p",null,[t("Here you’ll learn how to interact with the Service Worker from within your website/app space. Remember, "),n("strong",null,"service workers MUST be served over HTTPS"),t(".")],-1),m=n("p",null,[t("It’s important to note that the Service Worker (which gets automatically generated by Workbox – or you’ve configured Quasar CLI to use your custom one) runs in a separate thread. You can however interact with it from app-space from within "),n("code",{class:"doc-token"},"/src-pwa/register-service-worker.js"),t(" file.")],-1),v=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),t(),n("span",{class:"token punctuation"},"{"),t(" register "),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"from"),t(),n("span",{class:"token string"},"'register-service-worker'"),t(`

`),n("span",{class:"token function"},"register"),n("span",{class:"token punctuation"},"("),t("process"),n("span",{class:"token punctuation"},"."),t("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"SERVICE_WORKER_FILE"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token function"},"ready"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker is active.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"registered"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker has been registered.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"cached"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Content has been cached for offline use.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updatefound"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is downloading.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updated"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is available; please refresh.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"offline"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'No internet connection found. App is running in offline mode.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"error"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"error"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Error during service worker registration:'"),n("span",{class:"token punctuation"},","),t(" error"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])],-1),w=n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("This file is automatically bundled into your website/app by Quasar CLI because it is considered as part of app-space "),n("code",{class:"doc-token"},"/src"),t(". What this means is that you can use ES6, import other files etc.")])],-1),y=n("p",null,[t("You may notice in some dev environments, that Workbox will not load your service workers during "),n("code",{class:"doc-token"},"quasar dev"),t(" if you are not using HTTPS to serve - even on localhost. You may see that there are two scripts that can’t load. The Chrome browser console is relatively tight-lipped about this, but Firefox tells you what is going on. The three options you have are:")],-1),_=n("li",null,[t("set quasar.config file > devServer > "),n("code",{class:"doc-token"},"https: true")],-1),b=n("li",null,"setup a loopback from localhost to 127.0.0.1 (but this is not without security implications)",-1),S=n("p",null,[t("Here is a tunnelmole example (install it first with "),n("code",{class:"doc-token"},"yarn global add tunnelmole"),t(" or "),n("code",{class:"doc-token"},"npm i -g tunnelmole"),t("):")],-1),C=n("pre",{class:"doc-code"},[n("code",null,[t("$ tmole "),n("span",{class:"token number"},"80"),t(`
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80

`),n("span",{class:"token comment"},"# ...and use the HTTPS url shown in the output")])],-1),T=n("code",{class:"doc-token"},"devServer > https: true",-1),x=n("code",{class:"doc-token"},"quasar.config file > devServer > https",-1),I=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"devServer"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token literal-property property"},"https"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token comment"},"// Use ABSOLUTE paths or path.join(__dirname, 'root/relative/path')"),t(`
    `),n("span",{class:"token comment"},"// https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener"),t(`
    `),n("span",{class:"token literal-property property"},"key"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.key"'),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"pfx"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.pfx"'),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"cert"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.crt"'),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"ca"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/ca.pem"'),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"passphrase"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'vite-dev-server'"),t(),n("span",{class:"token comment"},"// do you need it?"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])],-1),W=n("p",null,[t("It’s important that you do not allow browsers to cache the Service Worker file (by default: "),n("code",{class:"doc-token"},"sw.js"),t("). Because otherwise updates to this file or to your app might slip through the cracks for browsers that load the service-worker from cache.")],-1),H=n("p",null,[t("This is why you must always make sure to add "),n("code",{class:"doc-token"},'"Cache-Control": "no-cache"'),t(" to the headers of "),n("code",{class:"doc-token"},"sw.js"),t(" file via your hosting service.")],-1),L=n("p",null,[t("As an example how this is done for Google Firebase, you would add the following to the "),n("code",{class:"doc-token"},"firebase.json"),t(" configuration:")],-1),j=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token property"},'"hosting"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),t(`
      `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),n("span",{class:"token string"},'"/sw.js"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"no-cache"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),t(`
    `),n("span",{class:"token punctuation"},"]"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])],-1),q={__name:"handling-service-worker",setup(P){const u=[{id:"interacting-with-service-worker",title:"2. Interacting with Service Worker"},{id:"ssl-certificate",title:"3. SSL certificate"},{id:"important-hosting-configuration",title:"4. Important Hosting Configuration"}];return(E,a)=>(h(),f(k,{title:"Handling Service Worker",desc:"(@quasar/app-vite) How to configure the service worker in a Quasar Progressive Web App.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/developing-pwa/handling-service-worker",toc:u},{default:o(()=>[g,m,n("h2",{id:"interacting-with-service-worker",class:"doc-heading doc-h2",onClick:a[0]||(a[0]=l=>e(p)("interacting-with-service-worker"))},"Interacting with Service Worker"),n("p",null,[t("Notice the "),s(c,{to:"https://github.com/yyx990803/register-service-worker"},{default:o(()=>[t("register-service-worker")]),_:1}),t(" npm package, which comes out of the box along with Quasar CLI (so don’t install it yourself).")]),s(e(r),{title:"/src-pwa/register-service-worker.js"},{default:o(()=>[v,s(i)]),_:1}),w,n("h2",{id:"ssl-certificate",class:"doc-heading doc-h2",onClick:a[1]||(a[1]=l=>e(p)("ssl-certificate"))},"SSL certificate"),y,n("ul",null,[_,b,n("li",null,[t("serve your localhost over "),s(c,{to:"https://github.com/robbie-cahill/tunnelmole-client"},{default:o(()=>[t("tunnelmole")]),_:1}),t(", "),s(c,{to:"https://localhost.run/"},{default:o(()=>[t("localhost.run")]),_:1}),t(" or "),s(c,{to:"https://ngrok.com/"},{default:o(()=>[t("ngrok")]),_:1}),t(" and use the https address provided by them.")])]),S,s(e(r),null,{default:o(()=>[C,s(i,{lang:"bash"})]),_:1}),n("p",null,[t("When you set "),T,t(" in your quasar.config file, Quasar will instruct Vite to auto-generate a SSL certificate for you. However, if you want to create one yourself for your localhost, then check out this blog post by "),s(c,{to:"https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/"},{default:o(()=>[t("Filippo")]),_:1}),t(". Then your "),x,t(" should look like this:")]),s(e(r),{title:"/quasar.config file"},{default:o(()=>[I,s(i)]),_:1}),n("p",null,[t("More info on Vite and HTTPS "),s(c,{to:"https://vitejs.dev/config/#server-https"},{default:o(()=>[t("here")]),_:1}),t(".")]),n("h2",{id:"important-hosting-configuration",class:"doc-heading doc-h2",onClick:a[2]||(a[2]=l=>e(p)("important-hosting-configuration"))},"Important Hosting Configuration"),W,H,L,s(e(r),null,{default:o(()=>[j,s(i)]),_:1})]),_:1}))}},F=d(q,[["__file","handling-service-worker.md"]]);export{F as default};
