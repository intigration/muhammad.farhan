import{_ as g,a as h}from"./index.js";import{c as s}from"./_examples_frameless-electron-window.js";import{D as p,a as r}from"./DocPage.js";import{D as a}from"./DocExample.js";import{D as m}from"./DocApi.js";import{p as f,b as k,d as v,w as d,h as e,i as t,e as i,f as n}from"./vendor.js";import"./DocCode.js";import"./CopyButton.js";import"./DocCodepen.js";import"./utils.js";import"./DocCardTitle.js";const b=e("p",null,"The QToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.",-1),w={class:"doc-note doc-note--tip"},y=e("p",{class:"doc-note__title"},"TIP",-1),C=e("p",null,[t("Use the "),e("code",{class:"doc-token"},"color"),t(" prop to control the toggle’s color.")],-1),_=e("p",null,[t("Instead of the default "),e("code",{class:"doc-token"},"true"),t(" / "),e("code",{class:"doc-token"},"false"),t(" values, you can use custom ones.")],-1),T=e("p",null,[t("In the example below, as soon as you click on the first QToggle it starts toggling between true/false. The second QToggle, on the other hand toggles between the three states (indeterminate/true/false) with help from "),e("code",{class:"doc-token"},"toggle-indeterminate"),t(". You can optionally set the property "),e("code",{class:"doc-token"},"indeterminate-value"),t(", otherwise the indeterminate value will be considered "),e("code",{class:"doc-token"},"null"),t(".")],-1),Q=e("p",null,[t("By default, QToggle follows this chain when toggling: indeterminate -> checked -> unchecked. However, you can change this behavior through the "),e("code",{class:"doc-token"},"toggle-order"),t(" prop. This property determines the order of the states and can be "),e("code",{class:"doc-token"},"tf"),t(" (default) or "),e("code",{class:"doc-token"},"ft"),t(" ("),e("code",{class:"doc-token"},"t"),t(" stands for state of true/checked while "),e("code",{class:"doc-token"},"f"),t(" for state of false/unchecked).")],-1),I=e("p",null,"Toggling order is:",-1),D=e("ul",null,[e("li",null,[t("if "),e("code",{class:"doc-token"},"toggle-indeterminate"),t(" is true, then: indet -> first state -> second state -> indet (and repeat)")]),e("li",null,"otherwise (no toggle-indeterminate): indet -> first state -> second state -> first state -> second state -> …")],-1),$=e("p",null,[t("If you have a number of toggles for a selection, use can use an Array as the model for all of them and specify "),e("code",{class:"doc-token"},"val"),t(" prop on each toggle. If the toggle is ticked, its "),e("code",{class:"doc-token"},"val"),t(" will be inserted into the array and vice versa.")],-1),x=e("p",null,[t("Apart from the standard sizes below, you can define your own through the "),e("code",{class:"doc-token"},"size"),t(" property (last one is a custom size).")],-1),W={class:"doc-note doc-note--tip"},z=e("p",{class:"doc-note__title"},"TIP",-1),A=e("p",null,[t("When dealing with a native form which has an "),e("code",{class:"doc-token"},"action"),t(" and a "),e("code",{class:"doc-token"},"method"),t(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),e("code",{class:"doc-token"},"name"),t(" property on QToggle, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")],-1),O={__name:"toggle",setup(B){f("_q_ex",{name:"QToggle",list:h(()=>import("./e.QToggle.js"),[])});const c=[{name:"Checkbox",category:"Form Components",path:"/vue-components/checkbox"},{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],u=[{id:"qtoggle-api",title:"2. QToggle API",deep:!0},{id:"usage",title:"3. Usage"},{id:"basic",title:"3.1. Basic",sub:!0},{id:"with-labels",title:"3.2. With labels",sub:!0},{id:"keeping-color",title:"3.3. Keeping color",sub:!0},{id:"with-icons",title:"3.4. With icons",sub:!0},{id:"custom-model-values",title:"3.5. Custom model values",sub:!0},{id:"indeterminate-state",title:"3.6. Indeterminate state",sub:!0},{id:"toggle-order",title:"3.7. Toggle order",sub:!0},{id:"array-model",title:"3.8. Array model",sub:!0},{id:"dark-design",title:"3.9. Dark design",sub:!0},{id:"disable",title:"3.10. Disable",sub:!0},{id:"sizes",title:"3.11. Sizes",sub:!0},{id:"with-qoptiongroup",title:"3.12. With QOptionGroup",sub:!0},{id:"with-qitem",title:"3.13. With QItem",sub:!0},{id:"native-form-submit",title:"3.14. Native form submit",sub:!0}];return(q,o)=>(k(),v(p,{title:"Toggle",desc:"The QToggle component is a basic element for user input. You can use it for turning settings, features or true/false inputs on and off.",heading:"","edit-link":"vue-components/toggle",toc:u,related:c},{default:d(()=>[b,e("div",w,[y,e("p",null,[t("Please also refer to the "),i(r,{to:"/vue-components/option-group"},{default:d(()=>[t("QOptionGroup")]),_:1}),t(" on other possibilities for creating groups of Checkboxes.")])]),i(m,{file:"QToggle"}),e("h2",{id:"usage",class:"doc-heading doc-h2",onClick:o[0]||(o[0]=l=>n(s)("usage"))},"Usage"),e("h3",{id:"basic",class:"doc-heading doc-h3",onClick:o[1]||(o[1]=l=>n(s)("basic"))},"Basic"),C,i(a,{title:"Basic",file:"Standard"}),e("h3",{id:"with-labels",class:"doc-heading doc-h3",onClick:o[2]||(o[2]=l=>n(s)("with-labels"))},"With labels"),i(a,{title:"With labels",file:"Labels"}),e("h3",{id:"keeping-color",class:"doc-heading doc-h3",onClick:o[3]||(o[3]=l=>n(s)("keeping-color"))},"Keeping color"),i(a,{title:"Keep color",file:"KeepColor"}),e("h3",{id:"with-icons",class:"doc-heading doc-h3",onClick:o[4]||(o[4]=l=>n(s)("with-icons"))},"With icons"),i(a,{title:"Icons",file:"Icons"}),e("h3",{id:"custom-model-values",class:"doc-heading doc-h3",onClick:o[5]||(o[5]=l=>n(s)("custom-model-values"))},"Custom model values"),_,i(a,{title:"Custom model values",file:"CustomValues"}),e("h3",{id:"indeterminate-state",class:"doc-heading doc-h3",onClick:o[6]||(o[6]=l=>n(s)("indeterminate-state"))},"Indeterminate state"),T,i(a,{title:"Indeterminate state",file:"IndeterminateState"}),e("h3",{id:"toggle-order",class:"doc-heading doc-h3",onClick:o[7]||(o[7]=l=>n(s)("toggle-order"))},"Toggle order"),Q,I,D,i(a,{title:"Toggle order",file:"ToggleOrder"}),e("h3",{id:"array-model",class:"doc-heading doc-h3",onClick:o[8]||(o[8]=l=>n(s)("array-model"))},"Array model"),$,i(a,{title:"Array model",file:"ArrayValue"}),e("h3",{id:"dark-design",class:"doc-heading doc-h3",onClick:o[9]||(o[9]=l=>n(s)("dark-design"))},"Dark design"),i(a,{title:"Force dark mode",file:"DarkBackground"}),e("h3",{id:"disable",class:"doc-heading doc-h3",onClick:o[10]||(o[10]=l=>n(s)("disable"))},"Disable"),i(a,{title:"Disabled state",file:"Disabled"}),e("h3",{id:"sizes",class:"doc-heading doc-h3",onClick:o[11]||(o[11]=l=>n(s)("sizes"))},"Sizes"),x,i(a,{title:"Standard sizes",file:"StandardSizes"}),e("h3",{id:"with-qoptiongroup",class:"doc-heading doc-h3",onClick:o[12]||(o[12]=l=>n(s)("with-qoptiongroup"))},"With QOptionGroup"),e("div",W,[z,e("p",null,[t("You can also use "),i(r,{to:"/vue-components/option-group"},{default:d(()=>[t("QOptionGroup")]),_:1}),t(", which simplifies the usage when you have groups of toggles, like in example below.")])]),i(a,{title:"Usage with QOptionGroup",file:"OptionGroup"}),e("h3",{id:"with-qitem",class:"doc-heading doc-h3",onClick:o[13]||(o[13]=l=>n(s)("with-qitem"))},"With QItem"),i(a,{title:"With QItem",file:"List"}),e("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:o[14]||(o[14]=l=>n(s)("native-form-submit"))},"Native form submit"),A,i(a,{title:"Native form",file:"NativeForm"})]),_:1}))}},H=g(O,[["__file","toggle.md"]]);export{H as default};
