import{b as h,d as g,w as l,h as o,i as t,e as n,f as s,l as f}from"./vendor.js";import{c}from"./_examples_frameless-electron-window.js";import{D as k,a as r}from"./DocPage.js";import{D as i}from"./DocPrerender.js";import{C as d}from"./CopyButton.js";import{_ as b}from"./index.js";const m=o("p",null,"Quasar provides a set of useful functions to manipulate colors easily in most use cases, without the high additional cost of integrating dedicated libraries.",-1),A={class:"doc-note doc-note--tip"},_=o("p",{class:"doc-note__title"},"TIP",-1),C=o("p",null,"These functions take a color as string or Object and convert it to another format.",-1),v=o("thead",null,[o("tr",null,[o("th",{class:"text-left"},"Function"),o("th",{class:"text-left"},"Source format"),o("th",{class:"text-left"},"Destination format"),o("th",{class:"text-left"},"Description")])],-1),w=o("tbody",null,[o("tr",null,[o("td",null,[o("code",{class:"doc-token"},"rgbToHex")]),o("td",null,"Object"),o("td",null,"String"),o("td",null,[t("Converts a RGB/A color Object ("),o("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),t(") to its HEX/A representation as a String ("),o("code",{class:"doc-token"},"#RRGGBB<AA>"),t("). If Alpha channel is present in the original object it will be present also in the output.")])]),o("tr",null,[o("td",null,[o("code",{class:"doc-token"},"rgbToHsv")]),o("td",null,"Object"),o("td",null,"Object"),o("td",null,[t("Converts a RGB/A color Object ("),o("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),t(") to its HSV/A representation as an Object ("),o("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),t("). If Alpha channel is present in the original object it will be present also in the output.")])]),o("tr",null,[o("td",null,[o("code",{class:"doc-token"},"hexToRgb")]),o("td",null,"String"),o("td",null,"Object"),o("td",null,[t("Converts a HEX/A color String ("),o("code",{class:"doc-token"},"#RRGGBB<AA>"),t(") to its RGB/A representation as an Object ("),o("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),t(") . If Alpha channel is present in the original object it will be present also in the output.")])]),o("tr",null,[o("td",null,[o("code",{class:"doc-token"},"textToRgb")]),o("td",null,"String"),o("td",null,"Object"),o("td",null,[t("Converts a HEX/A color String ("),o("code",{class:"doc-token"},"#RRGGBB<AA>"),t(") or a RGB/A color String("),o("code",{class:"doc-token"},"rgb(R, G, B<, A>)"),t(") to its RGB/A representation as an Object ("),o("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),t("). If Alpha channel is present in the original object it will be present also in the output.")])]),o("tr",null,[o("td",null,[o("code",{class:"doc-token"},"hsvToRgb")]),o("td",null,"String"),o("td",null,"Object"),o("td",null,[t("Converts a HSV/A color Object ("),o("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),t(") to its RGB/A representation as an Object ("),o("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),t("). If Alpha channel is present in the original object it will be present also in the output.")])])],-1),R=o("p",null,"These functions perform changes on the color or extract specific information.",-1),y=o("p",null,[t("Lighten the "),o("code",{class:"doc-token"},"color"),t(" (if "),o("code",{class:"doc-token"},"percent"),t(" is positive) or darken it (if "),o("code",{class:"doc-token"},"percent"),t(" is negative).")],-1),S=o("p",null,[t("Accepts a HEX/A String or a RGB/A String as "),o("code",{class:"doc-token"},"color"),t(" and a "),o("code",{class:"doc-token"},"percent"),t(" (0 to 100 or -100 to 0) of lighten/darken to be applied to the "),o("code",{class:"doc-token"},"color"),t(". Returns a HEX String representation of the calculated "),o("code",{class:"doc-token"},"color"),t(".")],-1),j=o("code",{class:"doc-token"},"color",-1),B=o("p",null,[t("Accepts a HEX/A String, a RGB/A String or a RGB/A Object as "),o("code",{class:"doc-token"},"color"),t(". Returns a value between 0 and 1.")],-1),G=o("code",{class:"doc-token"},"color",-1),x=o("p",null,[t("Accepts a HEX/A String, a RGB/A String or a RGB/A Object as "),o("code",{class:"doc-token"},"color"),t(". Returns a value between 0 and 255. A value of < 128 would be considered a dark color.")],-1),H=o("p",null,[t("Accepts a HEX/A String or a RGB/A Object as "),o("code",{class:"doc-token"},"fgColor"),t(" / "),o("code",{class:"doc-token"},"bgColor"),t(". If the alpha channel of the "),o("code",{class:"doc-token"},"fgColor"),t(" is completely opaque, then the result will be the "),o("code",{class:"doc-token"},"fgColor"),t(". If the alpha channel of the "),o("code",{class:"doc-token"},"bgColor"),t(" is completely opaque, then the resulting blended color will also be opaque. Returns the same type as input for fgColor.")],-1),O=o("p",null,"Increments or decrements the alpha of a string color.",-1),T=o("p",null,[t("Accepts a HEX/A String as "),o("code",{class:"doc-token"},"color"),t(" and a number between -1 and 1 (including edges) as "),o("code",{class:"doc-token"},"offset"),t(". Use a negative value to decrement and a positive number to increment (ex: "),o("code",{class:"doc-token"},"changeAlpha('#ff0000', -0.1)"),t(" to decrement alpha by 10%). Returns HEX/A String.")],-1),P=o("p",null,"You can query any brand color, palette color or custom color in JS context to get its hex string value. Note that the method below is not cheap to run, so use it with care:",-1),E=o("pre",{class:"doc-code"},[o("code",null,[o("span",{class:"token keyword"},"import"),t(),o("span",{class:"token punctuation"},"{"),t(" colors "),o("span",{class:"token punctuation"},"}"),t(),o("span",{class:"token keyword"},"from"),t(),o("span",{class:"token string"},"'quasar'"),t(`

`),o("span",{class:"token keyword"},"const"),t(),o("span",{class:"token punctuation"},"{"),t(" getPaletteColor "),o("span",{class:"token punctuation"},"}"),t(),o("span",{class:"token operator"},"="),t(` colors

console`),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token function"},"getPaletteColor"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'primary'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),t(),o("span",{class:"token comment"},"// '#1976d2'"),t(`
console`),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token function"},"getPaletteColor"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'red-2'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),t(),o("span",{class:"token comment"},"// '#ffcdd2'")])],-1),I=o("pre",{class:"doc-code"},[o("code",null,[t("console"),o("span",{class:"token punctuation"},"."),o("span",{class:"token function"},"log"),o("span",{class:"token punctuation"},"("),o("span",{class:"token function"},"getPaletteColor"),o("span",{class:"token punctuation"},"("),o("span",{class:"token string"},"'my-color'"),o("span",{class:"token punctuation"},")"),o("span",{class:"token punctuation"},")"),t(),o("span",{class:"token comment"},"// '#...'")])],-1),X={__name:"color-utils",setup(D){const u=[{name:"Color Palette",category:"Style & Identity",path:"/style/color-palette"}],p=[{id:"color-conversion",title:"2. Color Conversion"},{id:"color-processing",title:"3. Color Processing"},{id:"lighten-color-percent-",title:"3.1. lighten (color, percent)",sub:!0},{id:"luminosity-color-",title:"3.2. luminosity (color)",sub:!0},{id:"brightness-color-",title:"3.3. brightness (color)",sub:!0},{id:"blend-fgcolor-bgcolor-",title:"3.4. blend (fgColor, bgColor)",sub:!0},{id:"changealpha-color-offset-",title:"3.5. changeAlpha (color, offset)",sub:!0},{id:"helper-getpalettecolor",title:"4. Helper - getPaletteColor"}];return($,e)=>(h(),g(k,{title:"Color Utils",desc:"A set of Quasar methods for changing app brand colors and manipulating color strings.",heading:"","edit-link":"quasar-utils/color-utils",toc:p,related:u},{default:l(()=>[m,o("div",A,[_,o("p",null,[t("For usage with the UMD build see "),n(r,{to:"/start/umd#quasar-global-object"},{default:l(()=>[t("here")]),_:1}),t(".")])]),o("h2",{id:"color-conversion",class:"doc-heading doc-h2",onClick:e[0]||(e[0]=a=>s(c)("color-conversion"))},"Color Conversion"),C,n(f,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:l(()=>[v,w]),_:1}),o("h2",{id:"color-processing",class:"doc-heading doc-h2",onClick:e[1]||(e[1]=a=>s(c)("color-processing"))},"Color Processing"),R,o("h3",{id:"lighten-color-percent-",class:"doc-heading doc-h3",onClick:e[2]||(e[2]=a=>s(c)("lighten-color-percent-"))},"lighten (color, percent)"),y,S,o("h3",{id:"luminosity-color-",class:"doc-heading doc-h3",onClick:e[3]||(e[3]=a=>s(c)("luminosity-color-"))},"luminosity (color)"),o("p",null,[t("Calculates the "),n(r,{to:"http://www.w3.org/TR/WCAG20/#relativeluminancedef"},{default:l(()=>[t("relative luminance")]),_:1}),t(" of the "),j,t(".")]),B,o("h3",{id:"brightness-color-",class:"doc-heading doc-h3",onClick:e[4]||(e[4]=a=>s(c)("brightness-color-"))},"brightness (color)"),o("p",null,[t("Calculates the "),n(r,{to:"https://www.w3.org/TR/AERT/#color-contrast"},{default:l(()=>[t("color contrast")]),_:1}),t(" of the "),G,t(".")]),x,o("h3",{id:"blend-fgcolor-bgcolor-",class:"doc-heading doc-h3",onClick:e[5]||(e[5]=a=>s(c)("blend-fgcolor-bgcolor-"))},"blend (fgColor, bgColor)"),o("p",null,[t("Calculates the "),n(r,{to:"https://www.w3.org/TR/compositing-1/#simplealphacompositing"},{default:l(()=>[t("blend")]),_:1}),t(" of two colors.")]),H,o("h3",{id:"changealpha-color-offset-",class:"doc-heading doc-h3",onClick:e[6]||(e[6]=a=>s(c)("changealpha-color-offset-"))},"changeAlpha (color, offset)"),O,T,o("h2",{id:"helper-getpalettecolor",class:"doc-heading doc-h2",onClick:e[7]||(e[7]=a=>s(c)("helper-getpalettecolor"))},"Helper - getPaletteColor"),P,n(s(i),null,{default:l(()=>[E,n(d)]),_:1}),o("p",null,[t("Assuming you’ve created "),n(r,{to:"/style/color-palette#adding-your-own-colors"},{default:l(()=>[t("a custom color")]),_:1}),t(" and named it “my-color”, then you can extract its value in JS:")]),n(s(i),null,{default:l(()=>[I,n(d)]),_:1})]),_:1}))}},J=b(X,[["__file","color-utils.md"]]);export{J as default};
