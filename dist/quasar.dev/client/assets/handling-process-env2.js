import{b as k,d as m,w as a,h as n,f as o,e as t,l as f,i as s,k as u}from"./vendor.js";import{c as p}from"./_examples_frameless-electron-window.js";import{D as h,a as r}from"./DocPage.js";import{D as l}from"./DocPrerender.js";import{C as c}from"./CopyButton.js";import{_ as v}from"./index.js";const g=n("p",null,[s("Accessing "),n("code",{class:"doc-token"},"process.env"),s(" can help you in many ways:")],-1),_=n("ul",null,[n("li",null,"differentiating runtime procedure depending on Quasar Mode (SPA/PWA/Cordova/Electron)"),n("li",null,"differentiating runtime procedure depending if running a dev or production build"),n("li",null,"adding flags to it based on terminal environment variables at build time")],-1),b=n("thead",null,[n("tr",null,[n("th",{class:"text-left"},[n("code",{class:"doc-token"},"process∙env∙<name>")]),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Meaning")])],-1),y=n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEV")]),n("td",null,"Boolean"),n("td",null,"Code runs in development mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"PROD")]),n("td",null,"Boolean"),n("td",null,"Code runs in production mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEBUGGING")]),n("td",null,"Boolean"),n("td",null,[s("Code runs in development mode or "),n("code",{class:"doc-token"},"--debug"),s(" flag was set for production mode")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"CLIENT")]),n("td",null,"Boolean"),n("td",null,"Code runs on client (not on server)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"SERVER")]),n("td",null,"Boolean"),n("td",null,"Code runs on server (not on client)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"MODE")]),n("td",null,"String"),n("td",null,[s("Quasar CLI mode ("),n("code",{class:"doc-token"},"spa"),s(", "),n("code",{class:"doc-token"},"pwa"),s(", …)")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"NODE_ENV")]),n("td",null,"String"),n("td",null,[s("Has two possible values: "),n("code",{class:"doc-token"},"production"),s(" or "),n("code",{class:"doc-token"},"development")])])],-1),w=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"I'm on a development build"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"// process∙env∙MODE is the <mode> in"),s(`
`),n("span",{class:"token comment"},'// "quasar dev/build -m <mode>"'),s(`
`),n("span",{class:"token comment"},"// (defaults to 'spa' if -m parameter is not specified)"),s(`

`),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" BrowserWindow "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@electron/remote'"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token keyword"},"const"),s(" win "),n("span",{class:"token operator"},"="),s(" BrowserWindow"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getFocusedWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

  `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("win"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isMaximized"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unmaximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"maximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),I=n("p",null,[s("When compiling your website/app, "),n("code",{class:"doc-token"},"if ()"),s(" branches depending on process.env are evaluated and if the expression is "),n("code",{class:"doc-token"},"false"),s(" then they get stripped out of the file. Example:")],-1),q=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"else"),s(),n("span",{class:"token punctuation"},"{"),s(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},'// running with "quasar dev" will result in:'),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token comment"},'// while running with "quasar build" will result in:'),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")")])],-1),x=n("p",null,[s("Notice above that the "),n("code",{class:"doc-token"},"if"),s("s are evaluated and also completely stripped out at compile-time, resulting in a smaller bundle.")],-1),C=n("p",null,"You can combine what you learned in the section above with dynamic imports:",-1),O=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),s(),n("span",{class:"token operator"},"==="),s(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'my-fancy-npm-package'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token keyword"},"package")]),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},'// notice "default" below, which is the prop with which'),s(`
    `),n("span",{class:"token comment"},"// you can access what your npm imported package exports"),s(`
    `),n("span",{class:"token keyword"},"package"),n("span",{class:"token punctuation"},"."),s("default"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),P=n("p",null,[s("You can add your own definitions to "),n("code",{class:"doc-token"},"process.env"),s(" through the "),n("code",{class:"doc-token"},"/quasar.config"),s(" file.")],-1),E=n("p",null,[s("But first, there’s two concepts that need to be understood here. The env variables from the terminal that are available in the "),n("code",{class:"doc-token"},"/quasar.config"),s(" file itself and the environment variables that you pass to your UI code.")],-1),M=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Accessing terminal variables"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},")"),s(`

module`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// ..."),s(`

    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// passing down to UI code from the quasar.config file"),s(`
      `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),s(" ctx"),n("span",{class:"token punctuation"},"."),s(`dev
          `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'https://dev.api.com'"),s(`
          `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'https://prod.api.com'"),s(`
      `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),A=n("p",null,[s("Then in your website/app you can access "),n("code",{class:"doc-token"},"process∙env∙API"),s(" and it’s gonna point to one of those two links above, based on dev or production build type.")],-1),B=n("p",null,[s("You can even go one step further. Supply it with values taken from the "),n("code",{class:"doc-token"},"quasar dev/build"),s(" env variables:")],-1),D=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"# we set an env variable in terminal"),s(`
$ `),n("span",{class:"token assign-left variable"},"MY_API"),n("span",{class:"token operator"},"="),s("api.com quasar build")])],-1),$=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// then we pick it up in the /quasar.config file"),s(`
`),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),s(" ctx"),n("span",{class:"token punctuation"},"."),s(`dev
      `),n("span",{class:"token operator"},"?"),s(),n("span",{class:"token string"},"'https://dev.'"),s(),n("span",{class:"token operator"},"+"),s(" process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),s(`
      `),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'https://prod.'"),s(),n("span",{class:"token operator"},"+"),s(" process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),T=n("code",{class:"doc-token"},".env",-1),N=n("code",{class:"doc-token"},".env",-1),F=n("pre",{class:"doc-code"},[n("code",null,[s("$ "),n("span",{class:"token function"},"yarn"),s(),n("span",{class:"token function"},"add"),s(),n("span",{class:"token parameter variable"},"--dev"),s(" dotenv")])],-1),Y=n("pre",{class:"doc-code"},[n("code",null,[s("$ "),n("span",{class:"token function"},"npm"),s(),n("span",{class:"token function"},"install"),s(" --save-dev dotenv")])],-1),L=n("pre",{class:"doc-code"},[n("code",null,[s("$ "),n("span",{class:"token function"},"pnpm"),s(),n("span",{class:"token function"},"add"),s(),n("span",{class:"token parameter variable"},"-D"),s(" dotenv")])],-1),S=n("pre",{class:"doc-code"},[n("code",null,[s("$ bun "),n("span",{class:"token function"},"add"),s(),n("span",{class:"token parameter variable"},"--dev"),s(" dotenv")])],-1),V=n("p",null,[s("Then, in your "),n("code",{class:"doc-token"},"/quasar.config"),s(" file:")],-1),Q=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`parsed
`),n("span",{class:"token punctuation"},"}")])],-1),R=n("code",{class:"doc-token"},".env",-1),U=n("p",null,[s("Note that the approach above will pass only what’s defined in the "),n("code",{class:"doc-token"},".env"),s(" file and nothing else. So, the ones defined in the terminal("),n("em",null,[s("e.g. "),n("code",{class:"doc-token"},"MY_API=api.com quasar build")]),s(") will not be passed nor used to override the "),n("code",{class:"doc-token"},".env"),s(" file.")],-1),W=n("p",null,[s("If you want to be able to override what’s inside "),n("code",{class:"doc-token"},".env"),s(" or want to make the "),n("code",{class:"doc-token"},".env"),s(" file completely optional, you have to follow another approach. If you are using CI/CD, Docker, etc. you probably don’t want to stay limited to the "),n("code",{class:"doc-token"},".env"),s(" file. Here is an example:")],-1),z=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// This will load from `.env` if it exists, but not override existing `process∙env∙*` values"),s(`
`),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`

`),n("span",{class:"token comment"},"// process.env now contains the terminal variables and the ones from the .env file"),s(`
`),n("span",{class:"token comment"},"// Precedence:"),s(`
`),n("span",{class:"token comment"},"//   1. Terminal variables (API_URL=https://api.com quasar build)"),s(`
`),n("span",{class:"token comment"},"//   2. `.env` file"),s(`
`),n("span",{class:"token comment"},"// If you want .env file to override the terminal variables,"),s(`
`),n("span",{class:"token comment"},"// use `require('dotenv').config({ override: true })` instead"),s(`

`),n("span",{class:"token keyword"},"return"),s(),n("span",{class:"token punctuation"},"{"),s(`
`),n("span",{class:"token comment"},"// ..."),s(`
  `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
      `),n("span",{class:"token comment"},"// You have to manually define all the variables you want to pass in"),s(`
      `),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token operator"},":"),s(" process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token punctuation"},","),s(`
      `),n("span",{class:"token comment"},"// ..."),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token comment"},"// ...")])],-1),H=n("p",null,[s("You might be getting "),n("code",{class:"doc-token"},"process is not defined"),s(" errors in the browser console if you are accessing the variables wrong or if you have a misconfiguration.")],-1),j=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),G=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token constant"},"FOO"),s(),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(" process"),n("span",{class:"token punctuation"},"."),s("env "),n("span",{class:"token comment"},"// ❌ It doesn't allow destructuring or similar"),s(`
process`),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),s("             "),n("span",{class:"token comment"},"// ✅ It can only replace direct usage like this"),s(`

`),n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"getEnv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"return"),s(" process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"["),s("name"),n("span",{class:"token punctuation"},"]"),s(),n("span",{class:"token comment"},"// ❌ It can't analyze dynamic usage"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},")"),s("     "),n("span",{class:"token comment"},"// ❌"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌"),s(`
`),n("span",{class:"token comment"},"// If you want to see a list of available env variables,"),s(`
`),n("span",{class:"token comment"},"// you can log the object you are passing to `build > env` inside the `/quasar.config` file"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ✅"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),s("foo"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌ Case sensitive"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"F0O"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌ Typo in the variable name (middle o is 0(zero))")])],-1),J=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])],-1),K=n("pre",{class:"doc-code"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ✅"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌ It's not defined in `build > env`")])],-1),X=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token comment"},"/* ... */"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),s(`parsed
`),n("span",{class:"token punctuation"},"}")])],-1),Z=n("p",null,[s("If the "),n("code",{class:"doc-token"},".env"),s(" doesn’t exist or there is a typo in the file name:")],-1),nn=n("pre",{class:"doc-code"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌ The .env file is not loaded, this will fail")])],-1),sn=n("p",null,[s("If the "),n("code",{class:"doc-token"},".env"),s(" file exists with the correct name, and has the following content:")],-1),tn=n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token assign-left variable"},"FOO"),n("span",{class:"token operator"},"="),s("hello")])],-1),on=n("pre",{class:"doc-code"},[n("code",null,[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ✅ It's loaded correctly from the `.env` file"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("process"),n("span",{class:"token punctuation"},"."),s("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// ❌ It's not defined in the `.env` file")])],-1),an={__name:"handling-process-env",setup(en){const d=[{id:"values-supplied-by-quasar-cli",title:"2. Values supplied by Quasar CLI"},{id:"example",title:"3. Example"},{id:"stripping-out-code",title:"4. Stripping out code"},{id:"import-based-on-process-env",title:"5. Import based on process.env"},{id:"adding-to-process-env",title:"6. Adding to process.env"},{id:"troubleshooting",title:"7. Troubleshooting"},{id:"wrong-usage",title:"7.1. Wrong usage",sub:!0},{id:"misconfiguration",title:"7.2. Misconfiguration",sub:!0}];return(cn,e)=>(k(),m(h,{title:"Handling process.env",desc:"(@quasar/app-webpack) How to differentiate the runtime procedure based on process.env in a Quasar app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/handling-process-env",toc:d},{default:a(()=>[g,_,n("h2",{id:"values-supplied-by-quasar-cli",class:"doc-heading doc-h2",onClick:e[0]||(e[0]=i=>o(p)("values-supplied-by-quasar-cli"))},"Values supplied by Quasar CLI"),t(f,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:a(()=>[b,y]),_:1}),n("h2",{id:"example",class:"doc-heading doc-h2",onClick:e[1]||(e[1]=i=>o(p)("example"))},"Example"),t(o(l),null,{default:a(()=>[w,t(c)]),_:1}),n("h2",{id:"stripping-out-code",class:"doc-heading doc-h2",onClick:e[2]||(e[2]=i=>o(p)("stripping-out-code"))},"Stripping out code"),I,t(o(l),null,{default:a(()=>[q,t(c)]),_:1}),x,n("h2",{id:"import-based-on-process-env",class:"doc-heading doc-h2",onClick:e[3]||(e[3]=i=>o(p)("import-based-on-process-env"))},"Import based on process.env"),C,t(o(l),null,{default:a(()=>[O,t(c)]),_:1}),n("h2",{id:"adding-to-process-env",class:"doc-heading doc-h2",onClick:e[4]||(e[4]=i=>o(p)("adding-to-process-env"))},"Adding to process.env"),P,E,t(o(l),{title:"/quasar.config file"},{default:a(()=>[M,t(c)]),_:1}),A,B,t(o(l),null,{default:a(()=>[D,t(c,{lang:"bash"})]),_:1}),t(o(l),null,{default:a(()=>[$,t(c)]),_:1}),n("h4",{id:"using-dotenv",class:"doc-heading doc-h4",onClick:e[5]||(e[5]=i=>o(p)("using-dotenv"))},"Using dotenv"),n("p",null,[s("Should you wish to use "),T,s(" file(s), you can use the "),t(r,{to:"https://www.npmjs.com/package/dotenv"},{default:a(()=>[s("dotenv")]),_:1}),s(" package. The following is an example that passes env variables from the "),N,s(" file to your UI code:")]),t(o(l),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:a(()=>[t(u,{class:"q-pa-none",name:"Yarn"},{default:a(()=>[F,t(c,{lang:"bash"})]),_:1}),t(u,{class:"q-pa-none",name:"NPM"},{default:a(()=>[Y,t(c,{lang:"bash"})]),_:1}),t(u,{class:"q-pa-none",name:"PNPM"},{default:a(()=>[L,t(c,{lang:"bash"})]),_:1}),t(u,{class:"q-pa-none",name:"Bun"},{default:a(()=>[S,t(c,{lang:"bash"})]),_:1})]),_:1}),V,t(o(l),null,{default:a(()=>[Q,t(c)]),_:1}),n("p",null,[s("Be sure to read the "),t(r,{to:"https://www.npmjs.com/package/dotenv"},{default:a(()=>[s("dotenv documentation")]),_:1}),s(" and create the necessary "),R,s(" file(s) in the root of your Quasar CLI project.")]),U,W,t(o(l),{title:"/quasar.config file"},{default:a(()=>[z,t(c)]),_:1}),n("h2",{id:"troubleshooting",class:"doc-heading doc-h2",onClick:e[6]||(e[6]=i=>o(p)("troubleshooting"))},"Troubleshooting"),H,n("h3",{id:"wrong-usage",class:"doc-heading doc-h3",onClick:e[7]||(e[7]=i=>o(p)("wrong-usage"))},"Wrong usage"),t(o(l),{title:"/quasar.config file > build"},{default:a(()=>[j,t(c)]),_:1}),t(o(l),null,{default:a(()=>[G,t(c)]),_:1}),n("h3",{id:"misconfiguration",class:"doc-heading doc-h3",onClick:e[8]||(e[8]=i=>o(p)("misconfiguration"))},"Misconfiguration"),n("h4",{id:"manual-definition",class:"doc-heading doc-h4",onClick:e[9]||(e[9]=i=>o(p)("manual-definition"))},"Manual definition"),t(o(l),{title:"/quasar.config file"},{default:a(()=>[J,t(c)]),_:1}),t(o(l),null,{default:a(()=>[K,t(c)]),_:1}),n("h4",{id:"dotenv",class:"doc-heading doc-h4",onClick:e[10]||(e[10]=i=>o(p)("dotenv"))},"dotenv"),t(o(l),{title:"/quasar.config file"},{default:a(()=>[X,t(c)]),_:1}),Z,t(o(l),null,{default:a(()=>[nn,t(c)]),_:1}),sn,t(o(l),null,{default:a(()=>[tn,t(c,{lang:"bash"})]),_:1}),t(o(l),null,{default:a(()=>[on,t(c)]),_:1})]),_:1}))}},mn=v(an,[["__file","handling-process-env.md"]]);export{mn as default};
