import{_ as p,a as u}from"./index.js";import{c as s}from"./_examples_frameless-electron-window.js";import{D as h,a as f}from"./DocPage.js";import{D as l}from"./DocExample.js";import{D as m}from"./DocApi.js";import{p as g,b as _,d as v,w as i,e as o,h as e,f as a,i as t}from"./vendor.js";import"./DocCode.js";import"./CopyButton.js";import"./DocCodepen.js";import"./utils.js";import"./DocCardTitle.js";const I=e("p",null,"The QInfiniteScroll component allows you to load new content as the user scrolls the page.",-1),S=e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("Infinite Scroll loads items in advance when less than "),e("code",{class:"doc-token"},"offset"),t(" (default = 500) pixels is left to be seen. If the content you fetch has height less than the scroll target container’s height on screen then Infinite Scroll will continue loading more content. So make sure you load enough content.")])],-1),y=e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("In your "),e("code",{class:"doc-token"},"@load"),t(" function, don’t forget to call the passed in "),e("code",{class:"doc-token"},"done()"),t(" function when you have finished loading more data.")])],-1),w=e("p",null,"Scroll to the bottom to see QInfiniteScroll in action.",-1),k={class:"doc-note doc-note--tip"},b=e("p",{class:"doc-note__title"},"Scrolling container",-1),V=e("ul",null,[e("li",null,"Works best when placed as direct child of the Vue component rendering your Page"),e("li",null,[t("If you change the parent of this component, don’t forget to call "),e("code",{class:"doc-token"},"updateScrollTarget()"),t(" on the QInfiniteScroll Vue reference.")]),e("li",null,[t("If you need to specify the scroll target inner element (because the auto detected one is not the desired one) pass a CSS selector (as string) or the DOM element in the "),e("code",{class:"doc-token"},"scroll-target"),t(" prop")])],-1),C=e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("If you pass a custom scroll target container with "),e("code",{class:"doc-token"},"scroll-target"),t(" prop you must make sure that the element exists and that it can be overflowed (it must have a maximum height and an overflow that allows scrolling).")]),e("p",null,"If the scroll target container cannot be overflowed you’ll get a forever loading situation.")],-1),x={__name:"infinite-scroll",setup(T){g("_q_ex",{name:"QInfiniteScroll",list:u(()=>import("./e.QInfiniteScroll.js"),[])});const c=[{name:"Spinners",category:"Vue Components",path:"/vue-components/spinners"},{name:"Pull to refresh",category:"Vue Components",path:"/vue-components/pull-to-refresh"},{name:"Intersection",category:"Vue Components",path:"/vue-components/intersection"},{name:"Virtual Scroll",category:"Vue Components",path:"/vue-components/virtual-scroll"}],r=[{id:"qinfinitescroll-api",title:"2. QInfiniteScroll API",deep:!0},{id:"usage",title:"3. Usage"},{id:"tips",title:"3.1. Tips",sub:!0}];return(D,n)=>(_(),v(h,{title:"Infinite Scroll",desc:"The QInfiniteScroll Vue component allows you to load new content as the user scrolls the page.",heading:"","edit-link":"vue-components/infinite-scroll",toc:r,related:c},{default:i(()=>[I,o(m,{file:"QInfiniteScroll"}),e("h2",{id:"usage",class:"doc-heading doc-h2",onClick:n[0]||(n[0]=d=>a(s)("usage"))},"Usage"),S,y,w,o(l,{title:"Basic",file:"Basic",scrollable:""}),o(l,{title:"Custom Scroll Target Container",file:"Container"}),o(l,{title:"Reverse (Messenger style)",file:"Reverse",scrollable:""}),e("h3",{id:"tips",class:"doc-heading doc-h3",onClick:n[1]||(n[1]=d=>a(s)("tips"))},"Tips"),e("div",k,[b,e("p",null,[t("Please read "),o(f,{to:"/vue-components/scroll-observer#determining-scrolling-container"},{default:i(()=>[t("here")]),_:1}),t(" about how Quasar determines the container to attach scrolling events to.")])]),V,C,o(l,{title:"Usage in QMenu",file:"Menu"})]),_:1}))}},O=p(x,[["__file","infinite-scroll.md"]]);export{O as default};
