import{c as o}from"./_examples_frameless-electron-window.js";import{D as c}from"./DocPage.js";import{D as d}from"./DocPrerender.js";import{C as u}from"./CopyButton.js";import{_ as h}from"./index.js";import{b as p,d as m,w as s,h as e,f as n,e as i,i as t}from"./vendor.js";const k=e("p",null,"Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes.",-1),y=e("p",null,"Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive.",-1),g=e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. "),e("strong",null,"In production mode, this assertion is disabled for maximum performance.")])],-1),v=e("p",null,"One thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template:",-1),w=e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("table")]),e("span",{class:"token punctuation"},">")]),t(`
  `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("tr")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("td")]),e("span",{class:"token punctuation"},">")]),t("hi"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("td")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("tr")]),e("span",{class:"token punctuation"},">")]),t(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("table")]),e("span",{class:"token punctuation"},">")])])],-1),f=e("p",null,[t("The browser will automatically inject "),e("code",{class:"doc-token"},"<tbody>"),t(" inside "),e("code",{class:"doc-token"},"<table>"),t(", however, the virtual DOM generated by Vue does not contain "),e("code",{class:"doc-token"},"<tbody>"),t(", so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates.")],-1),b=e("p",null,"If you do receive hydration errors (as seen in console: “Vuejs Error - The client-side rendered virtual DOM tree is not matching server-rendered content”), you can try following these steps:",-1),_=e("ol",null,[e("li",null,"Show DevTools in Chrome (F12)"),e("li",null,"Load the page that causes “the client-side rendered virtual DOM tree…” warning."),e("li",null,"Scroll to the warning in DevTools console."),e("li",null,"Click at the source location hyperlink of the warning in vue.runtime.esm.js."),e("li",null,"Set a breakpoint there (left-clicking at line number in the source code browser)."),e("li",null,[t("Make the same warning appear again. Usually by reloading the page. If there are many warnings, you can check the message by moving a mouse over "),e("code",{class:"doc-token"},"msg"),t(" variable.")]),e("li",null,[t("When you have found your message and stopped on a breakpoint, look at the "),e("em",null,"call stack"),t(". Click one frame down to call to “patch” to open its source. Hover mouse over hydrate function call 4 lines above the execution line in patch. Hyperlink to the source of hydrate would open.")]),e("li",null,[t("In the hydrate function, move about 15 lines from the start and set a breakpoint where false is returned after "),e("code",{class:"doc-token"},"assertNodeMatch"),t(" returned "),e("code",{class:"doc-token"},"false"),t(". Set the breakpoint there and remove all other breakpoints.")]),e("li",null,[t("Make the same warning happen again. Now, when breakpoint is hit, execution should stop in the hydrate function. Switch to DevTools console and evaluate "),e("code",{class:"doc-token"},"elm"),t(" and then "),e("code",{class:"doc-token"},"vnode"),t(". Here "),e("code",{class:"doc-token"},"elm"),t(" seems to be a "),e("em",null,"server-rendered DOM element"),t(" while "),e("code",{class:"doc-token"},"vnode"),t(" is a "),e("em",null,"virtual DOM node"),t(". "),e("code",{class:"doc-token"},"Elm"),t(" is printed as HTML so you can figure out where the error happened.")])],-1),D={__name:"client-side-hydration",setup(H){const r=[{id:"hydration-caveats",title:"2. Hydration Caveats"},{id:"handling-hydration-errors",title:"3. Handling Hydration Errors"}];return(M,a)=>(p(),m(c,{title:"Client Side Hydration",desc:"(@quasar/app-vite) What hydration is and its caveats in a Quasar server-side rendered app.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/developing-ssr/client-side-hydration",toc:r},{default:s(()=>[k,y,g,e("h2",{id:"hydration-caveats",class:"doc-heading doc-h2",onClick:a[0]||(a[0]=l=>n(o)("hydration-caveats"))},"Hydration Caveats"),v,i(n(d),null,{default:s(()=>[w,i(u)]),_:1}),f,e("h2",{id:"handling-hydration-errors",class:"doc-heading doc-h2",onClick:a[1]||(a[1]=l=>n(o)("handling-hydration-errors"))},"Handling Hydration Errors"),b,_]),_:1}))}},V=h(D,[["__file","client-side-hydration.md"]]);export{V as default};
