import{_ as u,a as r}from"./index.js";import{c as s}from"./_examples_frameless-electron-window.js";import{D as h,a as m}from"./DocPage.js";import{D as a}from"./DocExample.js";import{D as f}from"./DocApi.js";import{D as g}from"./DocPrerender.js";import{C as b}from"./CopyButton.js";import{p as v,b as _,d as k,w as d,h as t,i as e,e as n,f as i}from"./vendor.js";import"./DocCode.js";import"./DocCodepen.js";import"./utils.js";import"./DocCardTitle.js";const w=t("p",null,"The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield.",-1),Q=t("strong",null,"it can be used anywhere",-1),T=t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,"If used on a QTable, QPopupEdit won’t work with cell scoped slots.")],-1),y=t("p",null,[e("Click on the cells to see the popup editor. The column “Name” demonstrates the "),t("code",{class:"doc-token"},"title"),e(" prop. The column “Calories” displays a numeric value usage. The column “Fat” also demonstrates the "),t("code",{class:"doc-token"},"disable"),e(" prop. If you look at the source code, you’ll see the cell for “fat” is using QPopupEdit, yet when clicking on the cell, the popup doesn’t show.")],-1),P=t("p",null,[e("You can also add two buttons with the "),t("code",{class:"doc-token"},"buttons"),e(" prop, “Cancel” and “Set” (the default labels). These buttons help to control the user’s input. Along with the "),t("code",{class:"doc-token"},"buttons"),e(" prop, you also have the "),t("code",{class:"doc-token"},"persistent"),e(" prop, which denies the user from closing the popup with the escape key or clicking/ tapping outside of the popup. Lastly, you can control the labels of the two buttons with the "),t("code",{class:"doc-token"},"label-set"),e(" and "),t("code",{class:"doc-token"},"label-cancel"),e(" props, as seen in the “Protein” column. Notice “Save” is replacing “Set” and “Close” is replacing “Cancel”.")],-1),C=t("blockquote",{class:"doc-note"},[t("p",null,[e("The "),t("code",{class:"doc-token"},"persistent"),e(" prop is demonstrated in the “carbs” column.")])],-1),E=t("p",null,"The default slot’s parameters are:",-1),x=t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token punctuation"},"{"),e(" initialValue"),t("span",{class:"token punctuation"},","),e(" value"),t("span",{class:"token punctuation"},","),e(" validate"),t("span",{class:"token punctuation"},","),e(" set"),t("span",{class:"token punctuation"},","),e(" cancel"),t("span",{class:"token punctuation"},","),e(" updatePosition "),t("span",{class:"token punctuation"},"}")])],-1),I=t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[e("Do not destructure the slot’s parameters as it will generate linting errors when using the "),t("code",{class:"doc-token"},"value"),e(" prop directly with "),t("code",{class:"doc-token"},"v-model"),e(".")])],-1),D=t("p",null,"Since QPopupEdit wraps QInput, you can basically use any type of QInput. For instance, you can also use a text area as shown below in the “Comments” column.",-1),V=t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[e("When using a multi-line control (textarea, QEditor) for input, you’ll need to also use "),t("code",{class:"doc-token"},"@keyup.enter.stop"),e(" on the component in order to stop the enter key from closing the popup. You’ll also need to add buttons for controlling the popup too.")])],-1),W=t("p",null,[e("QPopupEdit also allows for simple validation of the input. To use it, you give it a callback function in the form of an arrow function and it should return a Boolean. "),t("code",{class:"doc-token"},"(value) => Boolean"),e(". This is "),t("strong",null,"demonstrated in the “Calories” column"),e(" below.")],-1),N=t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"Tip 1"),t("p",null,[e("Notice we are using the "),t("code",{class:"doc-token"},"hide"),e(" event to also revalidate the input. If we don’t, QInput’s error prop will ‘hang’ in an invalid state.")])],-1),q=t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"Tip 2"),t("p",null,"With this example, we are using QInput’s external error handling. We could also use QInput’s validation prop and emit the value to QPopupEdit’s validation prop. The same concept can be implemented, when using Vuelidate too. In other words, the value given to QPopupEdit’s validate function can come from anywhere.")],-1),S={__name:"popup-edit",setup(B){v("_q_ex",{name:"QPopupEdit",list:r(()=>import("./e.QPopupEdit.js"),[])});const p=[{name:"Input Textfield",category:"Form Components",path:"/vue-components/input"},{name:"Menu",category:"Vue Components",path:"/vue-components/menu"}],c=[{id:"qpopupedit-api",title:"2. QPopupEdit API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standalone",title:"3.1. Standalone",sub:!0},{id:"with-qtable",title:"3.2. With QTable",sub:!0},{id:"customizing",title:"3.3. Customizing",sub:!0},{id:"persistent-and-with-buttons",title:"3.4. Persistent and with buttons",sub:!0},{id:"the-default-slot",title:"3.5. The default slot",sub:!0},{id:"textarea-qeditor",title:"3.6. Textarea / QEditor",sub:!0},{id:"validation",title:"3.7. Validation",sub:!0}];return($,o)=>(_(),k(h,{title:"Popup Edit",desc:"The QPopupEdit Vue component can be used to edit a value 'in place', like for example on a cell in QTable.",heading:"","edit-link":"vue-components/popup-edit",toc:c,related:p},{default:d(()=>[w,t("p",null,[e("This component injects a "),n(m,{to:"/vue-components/menu"},{default:d(()=>[e("QMenu")]),_:1}),e(" into its parent DOM element and enables the behavior described above, so "),Q,e(", not only in QTable.")]),n(f,{file:"QPopupEdit"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:o[0]||(o[0]=l=>i(s)("usage"))},"Usage"),T,t("h3",{id:"standalone",class:"doc-heading doc-h3",onClick:o[1]||(o[1]=l=>i(s)("standalone"))},"Standalone"),n(a,{title:"Click on text",file:"Standalone"}),t("h3",{id:"with-qtable",class:"doc-heading doc-h3",onClick:o[2]||(o[2]=l=>i(s)("with-qtable"))},"With QTable"),y,n(a,{title:"Edit first columns",file:"WithTable"}),t("h3",{id:"customizing",class:"doc-heading doc-h3",onClick:o[3]||(o[3]=l=>i(s)("customizing"))},"Customizing"),n(a,{title:"Customizing QPopupEdit",file:"Customizing"}),t("h3",{id:"persistent-and-with-buttons",class:"doc-heading doc-h3",onClick:o[4]||(o[4]=l=>i(s)("persistent-and-with-buttons"))},"Persistent and with buttons"),P,C,n(a,{title:"Persistent edit, and with buttons",file:"WithButtons"}),t("h3",{id:"the-default-slot",class:"doc-heading doc-h3",onClick:o[5]||(o[5]=l=>i(s)("the-default-slot"))},"The default slot"),E,n(i(g),null,{default:d(()=>[x,n(b)]),_:1}),I,n(a,{title:"Default slot parameters",file:"DefaultSlotParameters"}),t("h3",{id:"textarea-qeditor",class:"doc-heading doc-h3",onClick:o[6]||(o[6]=l=>i(s)("textarea-qeditor"))},"Textarea / QEditor"),D,V,n(a,{title:"QInput textarea",file:"TextArea"}),n(a,{title:"QEditor",file:"PopupWithEditor"}),t("h3",{id:"validation",class:"doc-heading doc-h3",onClick:o[7]||(o[7]=l=>i(s)("validation"))},"Validation"),W,N,q,n(a,{title:"Edit with validation",file:"WithValidation"})]),_:1}))}},J=u(S,[["__file","popup-edit.md"]]);export{J as default};
