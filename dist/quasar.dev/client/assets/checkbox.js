import{_ as u,a as m}from"./index.js";import{p,b as g,d as b,w as a,h as e,i as o,e as i,f as s,j as f}from"./vendor.js";import{c as n}from"./_examples_frameless-electron-window.js";import{D as k,a as r}from"./DocPage.js";import{D as d}from"./DocExample.js";import{D as v}from"./DocApi.js";import"./DocCode.js";import"./CopyButton.js";import"./DocCodepen.js";import"./utils.js";import"./DocCardTitle.js";const w=e("p",null,"The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.",-1),C={class:"doc-note doc-note--tip"},x=e("p",{class:"doc-note__title"},"TIP",-1),y=e("p",null,[o("In the second row in the example below, the property "),e("code",{class:"doc-token"},"keep-color"),o(" is being used to retain the passed in color when the checkbox is not in a toggled state.")],-1),_=e("p",null,[o("Apart from the standard sizes below, you can define your own through the "),e("code",{class:"doc-token"},"size"),o(" property (last one is a custom size).")],-1),Q=e("p",null,[o("In the example below, as soon as you click on the first checkbox it starts toggling between true/false. The second checkbox, on the other hand toggles between the three states (indeterminate/true/false) with help from "),e("code",{class:"doc-token"},"toggle-indeterminate"),o(". You can optionally set the property "),e("code",{class:"doc-token"},"indeterminate-value"),o(", otherwise the indeterminate value will be considered "),e("code",{class:"doc-token"},"null"),o(".")],-1),D=e("p",null,[o("By default, QCheckbox follows this chain when toggling: indeterminate -> checked -> unchecked. However, you can change this behavior through the "),e("code",{class:"doc-token"},"toggle-order"),o(" prop. This property determines the order of the states and can be "),e("code",{class:"doc-token"},"tf"),o(" (default) or "),e("code",{class:"doc-token"},"ft"),o(" ("),e("code",{class:"doc-token"},"t"),o(" stands for state of true/checked while "),e("code",{class:"doc-token"},"f"),o(" for state of false/unchecked).")],-1),I=e("p",null,"Toggling order is:",-1),T=e("ul",null,[e("li",null,[o("if "),e("code",{class:"doc-token"},"toggle-indeterminate"),o(" is true, then: indet -> first state -> second state -> indet (and repeat)")]),e("li",null,"otherwise (no toggle-indeterminate): indet -> first state -> second state -> first state -> second state -> â€¦")],-1),$={class:"doc-note doc-note--tip"},O=e("p",{class:"doc-note__title"},"TIP",-1),S=e("p",null,[o("In the example below, we are rendering a "),e("code",{class:"doc-token"},"<label>"),o(" tag (notice "),e("code",{class:"doc-token"},'tag="label"'),o(") so the QCheckbox will respond to clicks on QItems to change toggle state.")],-1),z=e("p",null,[o("When dealing with a native form which has an "),e("code",{class:"doc-token"},"action"),o(" and a "),e("code",{class:"doc-token"},"method"),o(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),e("code",{class:"doc-token"},"name"),o(" property on QCheckbox, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")],-1),A={__name:"checkbox",setup(W){p("_q_ex",{name:"QCheckbox",list:m(()=>import("./e.QCheckbox.js"),[])});const c=[{name:"Toggle",category:"Form Components",path:"/vue-components/toggle"},{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],h=[{id:"qcheckbox-api",title:"2. QCheckbox API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standard",title:"3.1. Standard",sub:!0},{id:"with-custom-icons",title:"3.2. With custom icons",sub:!0},{id:"label",title:"3.3. Label",sub:!0},{id:"coloring",title:"3.4. Coloring",sub:!0},{id:"dense",title:"3.5. Dense",sub:!0},{id:"force-dark-mode",title:"3.6. Force dark mode",sub:!0},{id:"sizes",title:"3.7. Sizes",sub:!0},{id:"indeterminate-state",title:"3.8. Indeterminate state",sub:!0},{id:"toggle-order",title:"3.9. Toggle order",sub:!0},{id:"array-model",title:"3.10. Array model",sub:!0},{id:"custom-model-values",title:"3.11. Custom model values",sub:!0},{id:"with-qoptiongroup",title:"3.12. With QOptionGroup",sub:!0},{id:"with-qitem",title:"3.13. With QItem",sub:!0},{id:"disable",title:"3.14. Disable",sub:!0},{id:"native-form-submit",title:"3.15. Native form submit",sub:!0}];return(q,t)=>(g(),b(k,{title:"Checkbox",desc:"The QCheckbox Vue component is a checkbox with features like coloring, ripple and indeterminate state.",heading:"","edit-link":"vue-components/checkbox",toc:h,related:c},{default:a(()=>[w,e("div",C,[x,e("p",null,[o("Please also refer to the "),i(r,{to:"/vue-components/option-group"},{default:a(()=>[o("QOptionGroup")]),_:1}),o(" on other possibilities for creating groups of Checkboxes.")])]),i(v,{file:"QCheckbox"}),e("h2",{id:"usage",class:"doc-heading doc-h2",onClick:t[0]||(t[0]=l=>s(n)("usage"))},"Usage"),e("h3",{id:"standard",class:"doc-heading doc-h3",onClick:t[1]||(t[1]=l=>s(n)("standard"))},"Standard"),i(d,{title:"Standard",file:"Standard"}),e("h3",{id:"with-custom-icons",class:"doc-heading doc-h3",onClick:t[2]||(t[2]=l=>s(n)("with-custom-icons"))},[o("With custom icons "),i(f,{label:"v2.5+"})]),i(d,{title:"With icons",file:"WithIcons"}),e("h3",{id:"label",class:"doc-heading doc-h3",onClick:t[3]||(t[3]=l=>s(n)("label"))},"Label"),i(d,{title:"Label",file:"Label"}),e("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:t[4]||(t[4]=l=>s(n)("coloring"))},"Coloring"),y,i(d,{title:"Coloring",file:"Coloring"}),e("h3",{id:"dense",class:"doc-heading doc-h3",onClick:t[5]||(t[5]=l=>s(n)("dense"))},"Dense"),i(d,{title:"Dense",file:"Dense"}),e("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:t[6]||(t[6]=l=>s(n)("force-dark-mode"))},"Force dark mode"),i(d,{title:"Force dark mode",file:"OnDarkBackground"}),e("h3",{id:"sizes",class:"doc-heading doc-h3",onClick:t[7]||(t[7]=l=>s(n)("sizes"))},"Sizes"),_,i(d,{title:"Standard sizes",file:"StandardSizes"}),e("h3",{id:"indeterminate-state",class:"doc-heading doc-h3",onClick:t[8]||(t[8]=l=>s(n)("indeterminate-state"))},"Indeterminate state"),Q,i(d,{title:"Indeterminate state",file:"IndeterminateState"}),e("h3",{id:"toggle-order",class:"doc-heading doc-h3",onClick:t[9]||(t[9]=l=>s(n)("toggle-order"))},"Toggle order"),D,I,T,i(d,{title:"Toggle order",file:"ToggleOrder"}),e("h3",{id:"array-model",class:"doc-heading doc-h3",onClick:t[10]||(t[10]=l=>s(n)("array-model"))},"Array model"),i(d,{title:"Array as model",file:"ArrayAsModel"}),e("h3",{id:"custom-model-values",class:"doc-heading doc-h3",onClick:t[11]||(t[11]=l=>s(n)("custom-model-values"))},"Custom model values"),i(d,{title:"Custom model values",file:"CustomModel"}),e("h3",{id:"with-qoptiongroup",class:"doc-heading doc-h3",onClick:t[12]||(t[12]=l=>s(n)("with-qoptiongroup"))},"With QOptionGroup"),e("div",$,[O,e("p",null,[o("You can also use "),i(r,{to:"/vue-components/option-group"},{default:a(()=>[o("QOptionGroup")]),_:1}),o(", which simplifies the usage when you have groups of checkboxes, like in example below.")])]),i(d,{title:"Usage with QOptionGroup",file:"OptionGroup"}),e("h3",{id:"with-qitem",class:"doc-heading doc-h3",onClick:t[13]||(t[13]=l=>s(n)("with-qitem"))},"With QItem"),S,i(d,{title:"With QItem",file:"InaList"}),e("h3",{id:"disable",class:"doc-heading doc-h3",onClick:t[14]||(t[14]=l=>s(n)("disable"))},"Disable"),i(d,{title:"Disable",file:"Disable"}),e("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:t[15]||(t[15]=l=>s(n)("native-form-submit"))},"Native form submit"),z,i(d,{title:"Native form",file:"NativeForm"})]),_:1}))}},H=u(A,[["__file","checkbox.md"]]);export{H as default};
