import{c as o}from"./_examples_frameless-electron-window.js";import{D as c,a as d}from"./DocPage.js";import{_ as r}from"./index.js";import{b as u,d as p,w as n,h as e,f as a,i as s,e as h}from"./vendor.js";const g=e("p",null,[s("You will notice in the project structure we have two directories for assets: "),e("code",{class:"doc-token"},"/public/"),s(" and "),e("code",{class:"doc-token"},"/src/assets/"),s(". What is the difference between them? Some are static assets while the others are processed and embedded by the build system.")],-1),m=e("p",null,"So let’s try to answer the question above. We’ll first talk about using regular assets then we’ll see what the difference is for static assets.",-1),f=e("p",null,[s("In "),e("code",{class:"doc-token"},"*.vue"),s(" components, all your templates and CSS are parsed by "),e("code",{class:"doc-token"},"vue-html-loader"),s(" and "),e("code",{class:"doc-token"},"css-loader"),s(" to look for asset URLs. For example, in "),e("code",{class:"doc-token"},'<img src="./logo.png">'),s(" and "),e("code",{class:"doc-token"},"background: url(./logo.png)"),s(", "),e("code",{class:"doc-token"},'"./logo.png"'),s(" is a relative asset path and will be resolved by Vite as a module dependency.")],-1),b=e("p",null,[s("Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Vite-processed assets inside "),e("code",{class:"doc-token"},"/src/assets"),s(", along side other source files. In fact, you don’t even have to put them all in "),e("code",{class:"doc-token"},"/src/assets"),s(": you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.")],-1),v=e("p",null,[s("Relative URLs, e.g. "),e("code",{class:"doc-token"},"./assets/logo.png"),s(" will be interpreted as a module dependency. They will be replaced with an auto-generated URL based on your Vite output configuration.")],-1),k=e("p",null,[s("URLs prefixed with "),e("code",{class:"doc-token"},"~"),s(" are treated as a module request, similar to "),e("code",{class:"doc-token"},"import 'some-module/image.png'"),s(". You need to use this prefix if you want to leverage Vite’s module resolving configurations. Quasar provides the "),e("code",{class:"doc-token"},"assets"),s(" alias out of the box, so it is recommended that you use it like this: "),e("code",{class:"doc-token"},'<img src="~assets/logo.png">'),s(". Notice "),e("code",{class:"doc-token"},"~"),s(" in front of ‘assets’.")],-1),y=e("p",null,[s("Root-relative URLs (e.g. "),e("code",{class:"doc-token"},"/logo.png"),s(" – where ‘/’ is your publicPath) or "),e("code",{class:"doc-token"},"logo.png"),s(" are not processed at all. This should be placed in "),e("code",{class:"doc-token"},"public/"),s(". These won’t be processed at all. The content of the public folder is simply copied over to the distributable folder as-is.")],-1),w=e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"Assets vs Statics"),e("p",null,"Files in the “assets” folder are only included in your build if they have a literal reference in one of your Vue files. Every file and folder from the “public” folder are copied into your production build as-is, no matter what.")],-1),_=e("div",{class:"doc-note doc-note--danger"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[s("When not building a SPA/PWA/SSR, then "),e("code",{class:"doc-token"},"/public/icons/*"),s(" and "),e("code",{class:"doc-token"},"/public/favicon.ico"),s(" will NOT be embedded into your app because they would not serve any purpose. For example, Electron or Cordova apps do not require those files.")])],-1),R={__name:"handling-assets",setup(x){const l=[{id:"regular-assets-src-assets",title:"2. Regular assets - /src/assets"},{id:"asset-resolving-rules",title:"2.1. Asset Resolving Rules",sub:!0},{id:"static-assets-public",title:"3. Static Assets - /public"},{id:"more-info-with-vite",title:"4. More info with Vite"}];return(V,t)=>(u(),p(c,{title:"App Handling Assets",desc:"(@quasar/app-vite) How to use regular app assets and static assets in a Quasar app.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/handling-assets",toc:l},{default:n(()=>[g,m,e("h2",{id:"regular-assets-src-assets",class:"doc-heading doc-h2",onClick:t[0]||(t[0]=i=>a(o)("regular-assets-src-assets"))},"Regular assets - /src/assets"),f,b,e("h3",{id:"asset-resolving-rules",class:"doc-heading doc-h3",onClick:t[1]||(t[1]=i=>a(o)("asset-resolving-rules"))},"Asset Resolving Rules"),v,k,e("h2",{id:"static-assets-public",class:"doc-heading doc-h2",onClick:t[2]||(t[2]=i=>a(o)("static-assets-public"))},"Static Assets - /public"),y,w,_,e("h2",{id:"more-info-with-vite",class:"doc-heading doc-h2",onClick:t[3]||(t[3]=i=>a(o)("more-info-with-vite"))},"More info with Vite"),e("p",null,[s("Please read Vite’s guide "),h(d,{to:"https://vitejs.dev/guide/assets.html"},{default:n(()=>[s("here")]),_:1}),s(".")])]),_:1}))}},N=r(R,[["__file","handling-assets.md"]]);export{N as default};
