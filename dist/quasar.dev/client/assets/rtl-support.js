import{b as g,d as h,w as a,h as s,f as e,e as t,k as r,i as n}from"./vendor.js";import{c as p}from"./_examples_frameless-electron-window.js";import{D as m,a as i}from"./DocPage.js";import{D as c}from"./DocPrerender.js";import{C as l}from"./CopyButton.js";import{_ as f}from"./index.js";const _=s("p",null,"RTL is referring to “right to left” UI for languages that need it.",-1),y=s("ul",null,[s("li",null,[n("Edit "),s("code",{class:"doc-token"},"/postcss.config.cjs"),n(" file and uncomment the "),s("code",{class:"doc-token"},"require('postcss-rtlcss')"),n(" line.")]),s("li",null,[n("Yarn/npm install the "),s("code",{class:"doc-token"},"postcss-rtlcss"),n(" package.")]),s("li",null,"If you are already running “quasar dev” command, restart it.")],-1),b=s("pre",{class:"doc-code"},[s("code",null,`module.exports = {
  plugins: [
    // https://github.com/postcss/autoprefixer
    require('autoprefixer')(...)

    // https://github.com/elchininet/postcss-rtlcss
    // If you want to support RTL css, then
    // 1. yarn/npm install postcss-rtlcss
    // 2. optionally set quasar.config file > framework > lang to an RTL language
    // 3. uncomment the following line:
    // require('postcss-rtlcss')
  ]
}`)],-1),w=s("p",null,[n("To enable it, you need to edit the "),s("code",{class:"doc-token"},"/quasar.config"),n(" file:")],-1),L=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token literal-property property"},"build"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token literal-property property"},"rtl"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token boolean"},"true"),n(`
`),s("span",{class:"token punctuation"},"}")])],-1),T=s("p",null,[n("You first need to install "),s("code",{class:"doc-token"},"postcss-rtlcss"),n(" package:")],-1),v=s("pre",{class:"doc-code"},[s("code",null,[n("$ "),s("span",{class:"token function"},"yarn"),n(),s("span",{class:"token function"},"add"),n(),s("span",{class:"token parameter variable"},"--dev"),n(" postcss-rtlcss")])],-1),R=s("pre",{class:"doc-code"},[s("code",null,[n("$ "),s("span",{class:"token function"},"npm"),n(),s("span",{class:"token function"},"install"),n(" --save-dev postcss-rtlcss")])],-1),S=s("pre",{class:"doc-code"},[s("code",null,[n("$ "),s("span",{class:"token function"},"pnpm"),n(),s("span",{class:"token function"},"add"),n(),s("span",{class:"token parameter variable"},"-D"),n(" postcss-rtlcss")])],-1),q=s("pre",{class:"doc-code"},[s("code",null,[n("$ bun "),s("span",{class:"token function"},"add"),n(),s("span",{class:"token parameter variable"},"--dev"),n(" postcss-rtlcss")])],-1),C=s("p",null,[n("Then create "),s("code",{class:"doc-token"},"/postcss.config.cjs"),n(" file if you don’t have it already, and add this to it:")],-1),Q=s("pre",{class:"doc-code"},[s("code",null,[n("module"),s("span",{class:"token punctuation"},"."),n("exports "),s("span",{class:"token operator"},"="),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token literal-property property"},"plugins"),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"["),n(`
    `),s("span",{class:"token function"},"require"),s("span",{class:"token punctuation"},"("),s("span",{class:"token string"},"'postcss-rtlcss'"),s("span",{class:"token punctuation"},")"),s("span",{class:"token punctuation"},"("),s("span",{class:"token punctuation"},"{"),n(),s("span",{class:"token comment"},"/* opts */"),n(),s("span",{class:"token punctuation"},"}"),s("span",{class:"token punctuation"},")"),n(),s("span",{class:"token comment"},'// <<<< in "plugins"'),n(`
  `),s("span",{class:"token punctuation"},"]"),n(`
`),s("span",{class:"token punctuation"},"}")])],-1),x=s("p",null,"To enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example:",-1),I=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("html")]),s("span",{class:"token punctuation"},">")]),n(`
  `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("head")]),s("span",{class:"token punctuation"},">")]),n(`
    ...
    `),s("span",{class:"token comment"},'<!-- Replace "2.0.0" (below) with your Quasar version. -->'),n(`
    `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("link")]),n(),s("span",{class:"token attr-name"},"href"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("https://cdn.jsdelivr.net/npm/quasar@2/dist/quasar.rtl.prod.css"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"rel"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("stylesheet"),s("span",{class:"token punctuation"},'"')]),n(),s("span",{class:"token attr-name"},"type"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("text/css"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),n(`
  `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("head")]),s("span",{class:"token punctuation"},">")]),n(`

  `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("body")]),s("span",{class:"token punctuation"},">")]),n(`
    ...

    `),s("span",{class:"token comment"},`<!--
      We also need an RTL Quasar language pack; let's take Hebrew as an example;
      include this after Quasar JS tag;
      Replace "2.0.0" (below) with your Quasar version.
    -->`),n(`
    `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),n(),s("span",{class:"token attr-name"},"src"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("https://cdn.jsdelivr.net/npm/quasar@2/dist/lang/he.umd.prod.js"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"}),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")]),n(`
    `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("script")]),s("span",{class:"token punctuation"},">")]),s("span",{class:"token script"},[s("span",{class:"token language-javascript"},[n(`
      Quasar`),s("span",{class:"token punctuation"},"."),n("lang"),s("span",{class:"token punctuation"},"."),s("span",{class:"token function"},"set"),s("span",{class:"token punctuation"},"("),n("Quasar"),s("span",{class:"token punctuation"},"."),n("lang"),s("span",{class:"token punctuation"},"."),n("he"),s("span",{class:"token punctuation"},")"),n(`
    `)])]),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("script")]),s("span",{class:"token punctuation"},">")]),n(`
  `),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("body")]),s("span",{class:"token punctuation"},">")]),n(`
`),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("html")]),s("span",{class:"token punctuation"},">")])])],-1),P=s("code",{class:"doc-token"},'<html dir="rtl">',-1),M=s("div",{class:"doc-note doc-note--warning"},[s("p",{class:"doc-note__title"},"CAVEAT"),s("p",null,"Quasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically.")],-1),D=s("strong",null,"When Quasar is set to use an RTL language",-1),V=s("strong",null,"RTL support is enabled",-1),$=s("p",null,"Let’s discuss about each of these requirements:",-1),U=s("em",null,"Quasar needs to be set to use an RTL language",-1),Y=s("li",null,[s("p",null,[s("em",null,"RTL support needs to be enabled"),n(". Please double-check the “Enabling RTL support” section above. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules.")])],-1),j=s("li",null,[s("p",null,[n("Optional: "),s("em",null,"Treat devland source CSS as RTL"),n(". By default, Quasar assumes that all styles are written in LTR direction and generates corresponding RTL styles for them. Should you wish to write your own css directly in RTL then you need to:")]),s("ul",null,[s("li",null,[n("(Quasar CLI with Webpack) set quasar.config file > “build” > rtl > “source” to "),s("code",{class:"doc-token"},"rtl")]),s("li",null,[n("(Quasar CLI with Vite / Quasar Vite plugin / Vue CLI plugin) set "),s("code",{class:"doc-token"},"require('postcss-rtlcss')({ source: 'rtl' })"),n(" in /postcss.config.cjs")])])],-1),B={class:"doc-note doc-note--tip"},H=s("p",{class:"doc-note__title"},"TIP",-1),N=s("li",null,[s("p",null,"Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamically changed for you automatically.")],-1),E=s("code",{class:"doc-token"},"$q.lang.rtl",-1),O=s("p",null,"You need to be careful when writing your own CSS. Like mentioned above, if RTL support is enabled then RTL (LTR if postcss-rtl config has “source” set to “ltr”) rules will be automatically added based on your CSS code. So writing:",-1),W=s("pre",{class:"doc-code language-css"},[s("code",null,[s("span",{class:"token selector"},".my-class"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token property"},"margin-left"),s("span",{class:"token punctuation"},":"),n(" 10px"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token property"},"right"),s("span",{class:"token punctuation"},":"),n(" 5px"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}")])],-1),A=s("p",null,"…will add this rule for RTL:",-1),z=s("pre",{class:"doc-code language-css"},[s("code",null,[s("span",{class:"token selector"},"[dir=rtl] .my-class"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token property"},"margin-right"),s("span",{class:"token punctuation"},":"),n(" 10px"),s("span",{class:"token punctuation"},";"),n(`
  `),s("span",{class:"token property"},"left"),s("span",{class:"token punctuation"},":"),n(" 5px"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}")])],-1),F=s("p",null,"Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added.",-1),J=s("p",null,"If you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:",-1),G=s("pre",{class:"doc-code language-css"},[s("code",null,[s("span",{class:"token selector"},".my-class"),n(),s("span",{class:"token punctuation"},"{"),n(`
  `),s("span",{class:"token property"},"margin-left"),s("span",{class:"token punctuation"},":"),n(" 10px "),s("span",{class:"token comment"},"/* rtl:ignore */"),s("span",{class:"token punctuation"},";"),n(`
`),s("span",{class:"token punctuation"},"}")])],-1),K=s("p",null,"…or SCSS with indented form:",-1),X=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token selector"},".my-class"),n(`
`),s("span",{class:"token property-line"},[n("  "),s("span",{class:"token property"},"margin-left"),s("span",{class:"token punctuation"},":"),n(' 10px #{"'),s("span",{class:"token operator"},"/"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token property"},"rtl"),s("span",{class:"token punctuation"},":"),s("span",{class:"token property"},"ignore"),n(),s("span",{class:"token operator"},"*"),s("span",{class:"token operator"},"/"),n('"}')])])],-1),Z=s("p",null,"…or default SCSS:",-1),ss=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token selector"},".my-class {"),n(`
`),s("span",{class:"token property-line"},[n("  "),s("span",{class:"token property"},"margin-left"),s("span",{class:"token punctuation"},":"),n(' 10px #{"'),s("span",{class:"token operator"},"/"),s("span",{class:"token operator"},"*"),n(),s("span",{class:"token property"},"rtl"),s("span",{class:"token punctuation"},":"),s("span",{class:"token property"},"ignore"),n(),s("span",{class:"token operator"},"*"),s("span",{class:"token operator"},"/"),n('"};')]),n(`
`),s("span",{class:"token selector"},"}")])],-1),ns=s("p",null,[n("Now both RTL and non-RTL UI mode will have "),s("code",{class:"doc-token"},"margin-left"),n(" prop.")],-1),ts=s("p",null,[n("Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add "),s("code",{class:"doc-token"},'dir="ltr"'),n(" or "),s("code",{class:"doc-token"},'dir="rtl"'),n(" HTML attribute to the outermost DOM element / component template:")],-1),as=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("div")]),n(),s("span",{class:"token attr-name"},"dir"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("rtl"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),n(`
  `),s("span",{class:"token comment"},`<!--
    this DIV and all its content will use RTL mode
    regardless of Quasar language pack RTL settings
  -->`),n(`
`),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("div")]),s("span",{class:"token punctuation"},">")])])],-1),es=s("p",null,"Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:",-1),os=s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"<"),n("div")]),n(),s("span",{class:"token attr-name"},"dir"),s("span",{class:"token attr-value"},[s("span",{class:"token punctuation attr-equals"},"="),s("span",{class:"token punctuation"},'"'),n("ltr"),s("span",{class:"token punctuation"},'"')]),s("span",{class:"token punctuation"},">")]),n(`
  `),s("span",{class:"token comment"},`<!--
    this DIV and all its content will use non-RTL mode
    regardless of Quasar language pack RTL settings
  -->`),n(`
`),s("span",{class:"token tag"},[s("span",{class:"token tag"},[s("span",{class:"token punctuation"},"</"),n("div")]),s("span",{class:"token punctuation"},">")])])],-1),ls={__name:"rtl-support",setup(cs){const d=[{name:"Quasar Language Packs",category:"Options & Helpers",path:"/options/quasar-language-packs"},{name:"App Internationalization",category:"Options & Helpers",path:"/options/app-internationalization"}],k=[{id:"enabling-rtl-support",title:"2. Enabling RTL support"},{id:"quasar-cli-with-vite",title:"2.1. Quasar CLI with Vite",sub:!0},{id:"quasar-cli-with-webpack",title:"2.2. Quasar CLI with Webpack",sub:!0},{id:"quasar-vite-plugin-vue-cli-plugin",title:"2.3. Quasar Vite Plugin / Vue CLI Plugin",sub:!0},{id:"quasar-umd",title:"2.4. Quasar UMD",sub:!0},{id:"how-it-works",title:"3. How it works"},{id:"things-to-keep-in-mind",title:"4. Things to keep in mind"},{id:"marking-css-rules-as-exceptions",title:"4.1. Marking CSS rules as exceptions",sub:!0}];return(ps,o)=>(g(),h(m,{title:"RTL Support",desc:"Right to left support in a Quasar app.",heading:"","edit-link":"options/rtl-support",toc:k,related:d},{default:a(()=>[_,s("h2",{id:"enabling-rtl-support",class:"doc-heading doc-h2",onClick:o[0]||(o[0]=u=>e(p)("enabling-rtl-support"))},"Enabling RTL support"),s("h3",{id:"quasar-cli-with-vite",class:"doc-heading doc-h3",onClick:o[1]||(o[1]=u=>e(p)("quasar-cli-with-vite"))},"Quasar CLI with Vite"),y,t(e(c),null,{default:a(()=>[b,t(l)]),_:1}),s("h3",{id:"quasar-cli-with-webpack",class:"doc-heading doc-h3",onClick:o[2]||(o[2]=u=>e(p)("quasar-cli-with-webpack"))},"Quasar CLI with Webpack"),w,t(e(c),null,{default:a(()=>[L,t(l)]),_:1}),s("h3",{id:"quasar-vite-plugin-vue-cli-plugin",class:"doc-heading doc-h3",onClick:o[3]||(o[3]=u=>e(p)("quasar-vite-plugin-vue-cli-plugin"))},"Quasar Vite Plugin / Vue CLI Plugin"),T,t(e(c),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:a(()=>[t(r,{class:"q-pa-none",name:"Yarn"},{default:a(()=>[v,t(l,{lang:"bash"})]),_:1}),t(r,{class:"q-pa-none",name:"NPM"},{default:a(()=>[R,t(l,{lang:"bash"})]),_:1}),t(r,{class:"q-pa-none",name:"PNPM"},{default:a(()=>[S,t(l,{lang:"bash"})]),_:1}),t(r,{class:"q-pa-none",name:"Bun"},{default:a(()=>[q,t(l,{lang:"bash"})]),_:1})]),_:1}),C,t(e(c),null,{default:a(()=>[Q,t(l)]),_:1}),s("h3",{id:"quasar-umd",class:"doc-heading doc-h3",onClick:o[4]||(o[4]=u=>e(p)("quasar-umd"))},"Quasar UMD"),x,t(e(c),null,{default:a(()=>[I,t(l)]),_:1}),s("p",null,[n("Check what tags you need to include in your HTML files by using our "),t(i,{to:"/start/umd"},{default:a(()=>[n("UMD tag generator")]),_:1}),n(" and making sure that you tick the “RTL CSS support” checkbox. Also notice the "),P,n(" tag at the beginning of the generated html file – you’ll need that too.")]),M,s("h2",{id:"how-it-works",class:"doc-heading doc-h2",onClick:o[5]||(o[5]=u=>e(p)("how-it-works"))},"How it works"),s("p",null,[n("RTL is tightly coupled to "),t(i,{to:"/options/quasar-language-packs"},{default:a(()=>[n("Quasar Language Packs")]),_:1}),n(". "),D,n(" (language pack has “rtl” prop set to “true”) and "),V,n(" (check the “Enabling RTL support” section above), then the UI will dynamically transform Quasar & your website/app code for RTL.")]),$,s("ol",null,[s("li",null,[s("p",null,[U,n(". See "),t(i,{to:"/options/quasar-language-packs"},{default:a(()=>[n("Quasar Language Packs")]),_:1}),n(" on how you can set a language. You can set a language as default or dynamically set one.")])]),Y,j]),s("div",B,[H,s("p",null,[n("Full list of "),t(i,{to:"https://github.com/elchininet/postcss-rtlcss#options"},{default:a(()=>[n("postcss-rtlcss options")]),_:1}),n(".")])]),s("h2",{id:"things-to-keep-in-mind",class:"doc-heading doc-h2",onClick:o[6]||(o[6]=u=>e(p)("things-to-keep-in-mind"))},"Things to keep in mind"),s("ul",null,[N,s("li",null,[s("p",null,[n("You can dynamically detect if you are on RTL mode by taking a look at Boolean "),E,n(". More info on "),t(i,{to:"/options/the-q-object"},{default:a(()=>[n("The $q object")]),_:1}),n(".")])]),s("li",null,[O,t(e(c),null,{default:a(()=>[W,t(l)]),_:1}),A,t(e(c),null,{default:a(()=>[z,t(l)]),_:1}),F])]),s("h3",{id:"marking-css-rules-as-exceptions",class:"doc-heading doc-h3",onClick:o[7]||(o[7]=u=>e(p)("marking-css-rules-as-exceptions"))},"Marking CSS rules as exceptions"),J,t(e(c),null,{default:a(()=>[G,t(l)]),_:1}),K,t(e(c),null,{default:a(()=>[X,t(l)]),_:1}),Z,t(e(c),null,{default:a(()=>[ss,t(l)]),_:1}),ns,ts,t(e(c),null,{default:a(()=>[as,t(l)]),_:1}),es,t(e(c),null,{default:a(()=>[os,t(l)]),_:1})]),_:1}))}},hs=f(ls,[["__file","rtl-support.md"]]);export{hs as default};
