import{provide as T,mergeProps as Q,withCtx as h,createTextVNode as i,createVNode as t,unref as d,useSSRContext as D}from"vue";import{ssrRenderComponent as n}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D as O,a as u}from"./DocPage-DKr-0pQn.js";import{D as l}from"./DocExample-BcaABDtE.js";import{D as p}from"./DocApi-Df9ryd6x.js";import{_ as S}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"toggle",__ssrInlineRender:!0,setup(k){T("_q_ex",{name:"QToggle"});const m=[{name:"Checkbox",category:"Form Components",path:"/vue-components/checkbox"},{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],g=[{id:"qtoggle-api",title:"2. QToggle API",deep:!0},{id:"usage",title:"3. Usage"},{id:"basic",title:"3.1. Basic",sub:!0},{id:"with-labels",title:"3.2. With labels",sub:!0},{id:"keeping-color",title:"3.3. Keeping color",sub:!0},{id:"with-icons",title:"3.4. With icons",sub:!0},{id:"custom-model-values",title:"3.5. Custom model values",sub:!0},{id:"indeterminate-state",title:"3.6. Indeterminate state",sub:!0},{id:"toggle-order",title:"3.7. Toggle order",sub:!0},{id:"array-model",title:"3.8. Array model",sub:!0},{id:"dark-design",title:"3.9. Dark design",sub:!0},{id:"disable",title:"3.10. Disable",sub:!0},{id:"sizes",title:"3.11. Sizes",sub:!0},{id:"with-qoptiongroup",title:"3.12. With QOptionGroup",sub:!0},{id:"with-qitem",title:"3.13. With QItem",sub:!0},{id:"native-form-submit",title:"3.14. Native form submit",sub:!0}];return(W,b,w,$)=>{b(n(O,Q({title:"Toggle",desc:"The QToggle component is a basic element for user input. You can use it for turning settings, features or true/false inputs on and off.",heading:"","edit-link":"vue-components/toggle",toc:g,related:m},$),{default:h((x,o,a,e)=>{if(o)o(`<p${e}>The QToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Please also refer to the `),o(n(u,{to:"/vue-components/option-group"},{default:h((s,r,y,C)=>{if(r)r("QOptionGroup");else return[i("QOptionGroup")]}),_:1},a,e)),o(" on other possibilities for creating groups of Checkboxes.</p></div>"),o(n(p,{file:"QToggle"},null,a,e)),o(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="basic" class="doc-heading doc-h3"${e}>Basic</h3><p${e}>Use the <code class="doc-token"${e}>color</code> prop to control the toggle’s color.</p>`),o(n(l,{title:"Basic",file:"Standard"},null,a,e)),o(`<h3 id="with-labels" class="doc-heading doc-h3"${e}>With labels</h3>`),o(n(l,{title:"With labels",file:"Labels"},null,a,e)),o(`<h3 id="keeping-color" class="doc-heading doc-h3"${e}>Keeping color</h3>`),o(n(l,{title:"Keep color",file:"KeepColor"},null,a,e)),o(`<h3 id="with-icons" class="doc-heading doc-h3"${e}>With icons</h3>`),o(n(l,{title:"Icons",file:"Icons"},null,a,e)),o(`<h3 id="custom-model-values" class="doc-heading doc-h3"${e}>Custom model values</h3><p${e}>Instead of the default <code class="doc-token"${e}>true</code> / <code class="doc-token"${e}>false</code> values, you can use custom ones.</p>`),o(n(l,{title:"Custom model values",file:"CustomValues"},null,a,e)),o(`<h3 id="indeterminate-state" class="doc-heading doc-h3"${e}>Indeterminate state</h3><p${e}>In the example below, as soon as you click on the first QToggle it starts toggling between true/false. The second QToggle, on the other hand toggles between the three states (indeterminate/true/false) with help from <code class="doc-token"${e}>toggle-indeterminate</code>. You can optionally set the property <code class="doc-token"${e}>indeterminate-value</code>, otherwise the indeterminate value will be considered <code class="doc-token"${e}>null</code>.</p>`),o(n(l,{title:"Indeterminate state",file:"IndeterminateState"},null,a,e)),o(`<h3 id="toggle-order" class="doc-heading doc-h3"${e}>Toggle order</h3><p${e}>By default, QToggle follows this chain when toggling: indeterminate -&gt; checked -&gt; unchecked. However, you can change this behavior through the <code class="doc-token"${e}>toggle-order</code> prop. This property determines the order of the states and can be <code class="doc-token"${e}>tf</code> (default) or <code class="doc-token"${e}>ft</code> (<code class="doc-token"${e}>t</code> stands for state of true/checked while <code class="doc-token"${e}>f</code> for state of false/unchecked).</p><p${e}>Toggling order is:</p><ul${e}><li${e}>if <code class="doc-token"${e}>toggle-indeterminate</code> is true, then: indet -&gt; first state -&gt; second state -&gt; indet (and repeat)</li><li${e}>otherwise (no toggle-indeterminate): indet -&gt; first state -&gt; second state -&gt; first state -&gt; second state -&gt; …</li></ul>`),o(n(l,{title:"Toggle order",file:"ToggleOrder"},null,a,e)),o(`<h3 id="array-model" class="doc-heading doc-h3"${e}>Array model</h3><p${e}>If you have a number of toggles for a selection, use can use an Array as the model for all of them and specify <code class="doc-token"${e}>val</code> prop on each toggle. If the toggle is ticked, its <code class="doc-token"${e}>val</code> will be inserted into the array and vice versa.</p>`),o(n(l,{title:"Array model",file:"ArrayValue"},null,a,e)),o(`<h3 id="dark-design" class="doc-heading doc-h3"${e}>Dark design</h3>`),o(n(l,{title:"Force dark mode",file:"DarkBackground"},null,a,e)),o(`<h3 id="disable" class="doc-heading doc-h3"${e}>Disable</h3>`),o(n(l,{title:"Disabled state",file:"Disabled"},null,a,e)),o(`<h3 id="sizes" class="doc-heading doc-h3"${e}>Sizes</h3><p${e}>Apart from the standard sizes below, you can define your own through the <code class="doc-token"${e}>size</code> property (last one is a custom size).</p>`),o(n(l,{title:"Standard sizes",file:"StandardSizes"},null,a,e)),o(`<h3 id="with-qoptiongroup" class="doc-heading doc-h3"${e}>With QOptionGroup</h3><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can also use `),o(n(u,{to:"/vue-components/option-group"},{default:h((s,r,y,C)=>{if(r)r("QOptionGroup");else return[i("QOptionGroup")]}),_:1},a,e)),o(", which simplifies the usage when you have groups of toggles, like in example below.</p></div>"),o(n(l,{title:"Usage with QOptionGroup",file:"OptionGroup"},null,a,e)),o(`<h3 id="with-qitem" class="doc-heading doc-h3"${e}>With QItem</h3>`),o(n(l,{title:"With QItem",file:"List"},null,a,e)),o(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QToggle, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):</p>`),o(n(l,{title:"Native form",file:"NativeForm"},null,a,e));else return[t("p",null,"The QToggle component is another basic element for user input. You can use this for turning settings, features or true/false inputs on and off."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[i("Please also refer to the "),t(u,{to:"/vue-components/option-group"},{default:h(()=>[i("QOptionGroup")]),_:1}),i(" on other possibilities for creating groups of Checkboxes.")])]),t(p,{file:"QToggle"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:s=>d(c)("usage")},"Usage",8,["onClick"]),t("h3",{id:"basic",class:"doc-heading doc-h3",onClick:s=>d(c)("basic")},"Basic",8,["onClick"]),t("p",null,[i("Use the "),t("code",{class:"doc-token"},"color"),i(" prop to control the toggle’s color.")]),t(l,{title:"Basic",file:"Standard"}),t("h3",{id:"with-labels",class:"doc-heading doc-h3",onClick:s=>d(c)("with-labels")},"With labels",8,["onClick"]),t(l,{title:"With labels",file:"Labels"}),t("h3",{id:"keeping-color",class:"doc-heading doc-h3",onClick:s=>d(c)("keeping-color")},"Keeping color",8,["onClick"]),t(l,{title:"Keep color",file:"KeepColor"}),t("h3",{id:"with-icons",class:"doc-heading doc-h3",onClick:s=>d(c)("with-icons")},"With icons",8,["onClick"]),t(l,{title:"Icons",file:"Icons"}),t("h3",{id:"custom-model-values",class:"doc-heading doc-h3",onClick:s=>d(c)("custom-model-values")},"Custom model values",8,["onClick"]),t("p",null,[i("Instead of the default "),t("code",{class:"doc-token"},"true"),i(" / "),t("code",{class:"doc-token"},"false"),i(" values, you can use custom ones.")]),t(l,{title:"Custom model values",file:"CustomValues"}),t("h3",{id:"indeterminate-state",class:"doc-heading doc-h3",onClick:s=>d(c)("indeterminate-state")},"Indeterminate state",8,["onClick"]),t("p",null,[i("In the example below, as soon as you click on the first QToggle it starts toggling between true/false. The second QToggle, on the other hand toggles between the three states (indeterminate/true/false) with help from "),t("code",{class:"doc-token"},"toggle-indeterminate"),i(". You can optionally set the property "),t("code",{class:"doc-token"},"indeterminate-value"),i(", otherwise the indeterminate value will be considered "),t("code",{class:"doc-token"},"null"),i(".")]),t(l,{title:"Indeterminate state",file:"IndeterminateState"}),t("h3",{id:"toggle-order",class:"doc-heading doc-h3",onClick:s=>d(c)("toggle-order")},"Toggle order",8,["onClick"]),t("p",null,[i("By default, QToggle follows this chain when toggling: indeterminate -> checked -> unchecked. However, you can change this behavior through the "),t("code",{class:"doc-token"},"toggle-order"),i(" prop. This property determines the order of the states and can be "),t("code",{class:"doc-token"},"tf"),i(" (default) or "),t("code",{class:"doc-token"},"ft"),i(" ("),t("code",{class:"doc-token"},"t"),i(" stands for state of true/checked while "),t("code",{class:"doc-token"},"f"),i(" for state of false/unchecked).")]),t("p",null,"Toggling order is:"),t("ul",null,[t("li",null,[i("if "),t("code",{class:"doc-token"},"toggle-indeterminate"),i(" is true, then: indet -> first state -> second state -> indet (and repeat)")]),t("li",null,"otherwise (no toggle-indeterminate): indet -> first state -> second state -> first state -> second state -> …")]),t(l,{title:"Toggle order",file:"ToggleOrder"}),t("h3",{id:"array-model",class:"doc-heading doc-h3",onClick:s=>d(c)("array-model")},"Array model",8,["onClick"]),t("p",null,[i("If you have a number of toggles for a selection, use can use an Array as the model for all of them and specify "),t("code",{class:"doc-token"},"val"),i(" prop on each toggle. If the toggle is ticked, its "),t("code",{class:"doc-token"},"val"),i(" will be inserted into the array and vice versa.")]),t(l,{title:"Array model",file:"ArrayValue"}),t("h3",{id:"dark-design",class:"doc-heading doc-h3",onClick:s=>d(c)("dark-design")},"Dark design",8,["onClick"]),t(l,{title:"Force dark mode",file:"DarkBackground"}),t("h3",{id:"disable",class:"doc-heading doc-h3",onClick:s=>d(c)("disable")},"Disable",8,["onClick"]),t(l,{title:"Disabled state",file:"Disabled"}),t("h3",{id:"sizes",class:"doc-heading doc-h3",onClick:s=>d(c)("sizes")},"Sizes",8,["onClick"]),t("p",null,[i("Apart from the standard sizes below, you can define your own through the "),t("code",{class:"doc-token"},"size"),i(" property (last one is a custom size).")]),t(l,{title:"Standard sizes",file:"StandardSizes"}),t("h3",{id:"with-qoptiongroup",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qoptiongroup")},"With QOptionGroup",8,["onClick"]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[i("You can also use "),t(u,{to:"/vue-components/option-group"},{default:h(()=>[i("QOptionGroup")]),_:1}),i(", which simplifies the usage when you have groups of toggles, like in example below.")])]),t(l,{title:"Usage with QOptionGroup",file:"OptionGroup"}),t("h3",{id:"with-qitem",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qitem")},"With QItem",8,["onClick"]),t(l,{title:"With QItem",file:"List"}),t("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:s=>d(c)("native-form-submit")},"Native form submit",8,["onClick"]),t("p",null,[i("When dealing with a native form which has an "),t("code",{class:"doc-token"},"action"),i(" and a "),t("code",{class:"doc-token"},"method"),i(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),t("code",{class:"doc-token"},"name"),i(" property on QToggle, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")]),t(l,{title:"Native form",file:"NativeForm"})]}),_:1},w))}}},v=f.setup;f.setup=(k,m)=>{const g=D();return(g.modules||(g.modules=new Set)).add("src/pages/vue-components/toggle.md"),v?v(k,m):void 0};const Z=S(f,[["__file","toggle.md"]]);export{Z as default};
