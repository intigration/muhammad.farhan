import{mergeProps as P,useSSRContext as B,resolveComponent as V,withCtx as l,createTextVNode as s,toDisplayString as w,createVNode as n,openBlock as O,createBlock as j,Fragment as W,renderList as G,unref as k}from"vue";import{ssrRenderAttrs as A,ssrRenderList as D,ssrRenderClass as z,ssrInterpolate as S,ssrRenderComponent as c}from"vue/server-renderer";import{c as f}from"./page-utils-C-QWsEHe.js";import{D as K,a as g}from"./DocPage-DKr-0pQn.js";import{D as Q}from"./DocApi-Df9ryd6x.js";import{D as L}from"./DocInstallation-DgMazQjg.js";import{D as d}from"./DocPrerender-DPOnWPFO.js";import{C as i}from"./CopyButton-l3ndfN49.js";import{_ as E}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"./DocCardTitle-BSnqQsiz.js";import"./utils-DKnLoYai.js";import"./DocCode-BVg0tuSc.js";import"prismjs";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const T={setup(){return{brandColors:["primary","secondary","accent","dark","positive","negative","info","warning"]}}};function X(y,m,$,v,q,b,x,h){m(`<div${A(P({class:"q-gutter-sm"},v))} data-v-6200f579><!--[-->`),D(b.brandColors,C=>{m(`<div class="${z([`bg-${C}`,"brand-color text-center row inline flex-center text-white rounded-borders"])}" data-v-6200f579><div class="col" data-v-6200f579>${S(C)}</div></div>`)}),m("<!--]--></div>")}const F=T.setup;T.setup=(y,m)=>{const $=B();return($.modules||($.modules=new Set)).add("src/pages/style/color-palette/BrandColors.vue"),F?F(y,m):void 0};const R=E(T,[["ssrRender",X],["__scopeId","data-v-6200f579"],["__file","BrandColors.vue"]]),U={setup(){return{colors:["red","pink","purple","deep-purple","indigo","blue","light-blue","cyan","teal","green","light-green","lime","yellow","amber","orange","deep-orange","brown","grey","blue-grey"]}}};function Z(y,m,$,v,q,b,x,h){const C=V("q-card"),e=V("q-card-section");m(`<div${A(P({class:"q-gutter-md row items-start"},v))} data-v-12ad25c5><!--[-->`),D(b.colors,u=>{m(c(C,{flat:"",class:"color",key:u},{default:l((t,r,o,p)=>{if(r)r(c(e,{class:["flex flex-center text-white","bg-"+u]},{default:l((a,Y,I,_)=>{if(Y)Y(`${S(u)}`);else return[s(w(u),1)]}),_:2},o,p)),r("<!--[-->"),D(14,a=>{r(`<div class="${z([[`bg-${u}-${a}`,a>5&&a<11?"text-white":""],"detailed-color column flex-center"])}" data-v-12ad25c5${p}>${S(u)}-${S(a)}</div>`)}),r("<!--]-->");else return[n(e,{class:["flex flex-center text-white","bg-"+u]},{default:l(()=>[s(w(u),1)]),_:2},1032,["class"]),(O(),j(W,null,G(14,a=>n("div",{class:["detailed-color column flex-center",[`bg-${u}-${a}`,a>5&&a<11?"text-white":""]],key:a},w(u)+"-"+w(a),3)),64))]}),_:2},$))}),m("<!--]--></div>")}const M=U.setup;U.setup=(y,m)=>{const $=B();return($.modules||($.modules=new Set)).add("src/pages/style/color-palette/ColorList.vue"),M?M(y,m):void 0};const J=E(U,[["ssrRender",Z],["__scopeId","data-v-12ad25c5"],["__file","ColorList.vue"]]),N={__name:"color-palette",__ssrInlineRender:!0,setup(y){const m=[{name:"Color Utils",category:"Genis Utils",path:"/quasar-utils/color-utils"}],$=[{id:"brand-api",title:"2. Brand API",deep:!0},{id:"configuration",title:"3. Configuration",deep:!0},{id:"brand-colors",title:"4. Brand Colors"},{id:"color-list",title:"5. Color List"},{id:"using-as-css-classes",title:"6. Using as CSS Classes"},{id:"using-sass-scss-variables",title:"7. Using Sass/SCSS Variables"},{id:"adding-your-own-colors",title:"8. Adding Your Own Colors"},{id:"dynamic-change-of-brand-colors-dynamic-theme-colors-",title:"9. Dynamic Change of Brand Colors (Dynamic Theme Colors)"},{id:"how-it-works",title:"9.1. How it works",sub:!0},{id:"util-setcssvar",title:"9.2. Util: setCssVar",sub:!0},{id:"util-getcssvar",title:"9.3. Util: getCssVar",sub:!0},{id:"more-color-utils",title:"9.4. More color utils",sub:!0},{id:"setting-up-defaults",title:"10. Setting Up Defaults"}];return(v,q,b,x)=>{const h=V("q-markup-table");q(c(K,P({title:"Color Palette",desc:"How to use and customize the Quasar Color Palette.",heading:"","edit-link":"style/color-palette/color-palette",toc:$,related:m},x),{default:l((C,e,u,t)=>{if(e)e(`<p${t}>Quasar Framework offers a wide selection of colors out of the box. You can use them both as Sass/SCSS variables in your CSS code or directly as CSS classes in your HTML templates.</p>`),e(c(Q,{file:"Brand"},null,u,t)),e(c(L,{title:"Configuration",config:"brand"},null,u,t)),e(`<h2 id="brand-colors" class="doc-heading doc-h2"${t}>Brand Colors</h2><p${t}>Most of the colors that Quasar Components use are strongly linked with these eight colors that you can change. Choosing these colors is the first step one should take when differentiating the design of an App. You’ll notice immediately upon changing their default values that Quasar Components follow these colors as a guideline.</p>`),e(c(R,null,null,u,t)),e(`<div class="doc-note doc-note--tip"${t}><p class="doc-note__title"${t}>TIPS</p><p${t}>Also check `),e(c(g,{to:"/style/theme-builder"},{default:l((r,o,p,a)=>{if(o)o("Theme Builder");else return[s("Theme Builder")]}),_:1},u,t)),e(` for a tool on customizing the brand colors of your website/app.</p></div><h2 id="color-list" class="doc-heading doc-h2"${t}>Color List</h2><p${t}>Here’s the list of colors provided out of the box. Within your app’s <code class="doc-token"${t}>*.vue</code> files you can use them as CSS classes (in HTML templates) or as `),e(c(g,{to:"/style/sass-scss-variables"},{default:l((r,o,p,a)=>{if(o)o("Sass/SCSS variables");else return[s("Sass/SCSS variables")]}),_:1},u,t)),e(` in <code class="doc-token"${t}>&lt;style lang=&quot;...&quot;&gt;</code> tags.</p>`),e(c(J,null,null,u,t)),e(`<h2 id="using-as-css-classes" class="doc-heading doc-h2"${t}>Using as CSS Classes</h2><p${t}>Use <code class="doc-token"${t}>text-</code> or <code class="doc-token"${t}>bg-</code> prefixes as class names to change the color of text or the color of the background.</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token comment"${a}>&lt;!-- changing text color --&gt;</span>
<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>p</span> <span class="token attr-name"${a}>class</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>text-primary<span class="token punctuation"${a}>&quot;</span></span><span class="token punctuation"${a}>&gt;</span></span>....<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>p</span><span class="token punctuation"${a}>&gt;</span></span>

<span class="token comment"${a}>&lt;!-- changing background color --&gt;</span>
<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>p</span> <span class="token attr-name"${a}>class</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>bg-positive<span class="token punctuation"${a}>&quot;</span></span><span class="token punctuation"${a}>&gt;</span></span>...<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>p</span><span class="token punctuation"${a}>&gt;</span></span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"<!-- changing text color -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("text-primary"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("...."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- changing background color -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("bg-positive"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("..."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")])])]),n(i)]}),_:1},u,t)),e(`<h2 id="using-sass-scss-variables" class="doc-heading doc-h2"${t}>Using Sass/SCSS Variables</h2><p${t}>In your app’s <code class="doc-token"${t}>*.vue</code> files you can use the colors as <code class="doc-token"${t}>$primary</code>, <code class="doc-token"${t}>$red-1</code>, and so on.</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token comment"${a}>&lt;!-- Notice lang=&quot;sass&quot; --&gt;</span>
<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>style</span> <span class="token attr-name"${a}>lang</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>sass<span class="token punctuation"${a}>&quot;</span></span><span class="token punctuation"${a}>&gt;</span></span><span class="token style"${a}><span class="token language-css"${a}>
div
  <span class="token property"${a}>color</span><span class="token punctuation"${a}>:</span> $red-1
  <span class="token property"${a}>background-color</span><span class="token punctuation"${a}>:</span> $grey-5
</span></span><span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>style</span><span class="token punctuation"${a}>&gt;</span></span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},'<!-- Notice lang="sass" -->'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("sass"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
div
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(` $red-1
  `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(` $grey-5
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")])])]),n(i)]}),_:1},u,t)),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token comment"${a}>&lt;!-- Notice lang=&quot;scss&quot; --&gt;</span>
<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>style</span> <span class="token attr-name"${a}>lang</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>scss<span class="token punctuation"${a}>&quot;</span></span><span class="token punctuation"${a}>&gt;</span></span><span class="token style"${a}><span class="token language-css"${a}>
<span class="token selector"${a}>div</span> <span class="token punctuation"${a}>{</span>
  <span class="token property"${a}>color</span><span class="token punctuation"${a}>:</span> $red-1<span class="token punctuation"${a}>;</span>
  <span class="token property"${a}>background-color</span><span class="token punctuation"${a}>:</span> $grey-5<span class="token punctuation"${a}>;</span>
<span class="token punctuation"${a}>}</span>
</span></span><span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>style</span><span class="token punctuation"${a}>&gt;</span></span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},'<!-- Notice lang="scss" -->'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("scss"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
`),n("span",{class:"token selector"},"div"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(" $red-1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" $grey-5"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")])])]),n(i)]}),_:1},u,t)),e(`<h2 id="adding-your-own-colors" class="doc-heading doc-h2"${t}>Adding Your Own Colors</h2><p${t}>If you want to use your own colors for your components (let’s say we are adding a color named “brand”) all you need to do is add the following CSS into your app:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code language-css"${a}><code${a}><span class="token selector"${a}>.text-brand</span> <span class="token punctuation"${a}>{</span>
  <span class="token property"${a}>color</span><span class="token punctuation"${a}>:</span> #a2aa33 <span class="token important"${a}>!important</span><span class="token punctuation"${a}>;</span>
<span class="token punctuation"${a}>}</span>
<span class="token selector"${a}>.bg-brand</span> <span class="token punctuation"${a}>{</span>
  <span class="token property"${a}>background</span><span class="token punctuation"${a}>:</span> #a2aa33 <span class="token important"${a}>!important</span><span class="token punctuation"${a}>;</span>
<span class="token punctuation"${a}>}</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".text-brand"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(" #a2aa33 "),n("span",{class:"token important"},"!important"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".bg-brand"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"background"),n("span",{class:"token punctuation"},":"),s(" #a2aa33 "),n("span",{class:"token important"},"!important"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(i)]}),_:1},u,t)),e(`<p${t}>Now we can use this color for Quasar components:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>q-btn</span> <span class="token attr-name"${a}>color</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>brand<span class="token punctuation"${a}>&quot;</span></span> <span class="token attr-name"${a}>...</span> <span class="token punctuation"${a}>/&gt;</span></span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("q-btn")]),s(),n("span",{class:"token attr-name"},"color"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("brand"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"..."),s(),n("span",{class:"token punctuation"},"/>")])])]),n(i)]}),_:1},u,t)),e(`<p${t}>You can access a custom color value (hex string) in JS context with the `),e(c(g,{to:"/quasar-utils/color-utils#helper-getpalettecolor"},{default:l((r,o,p,a)=>{if(o)o("getPaletteColor");else return[s("getPaletteColor")]}),_:1},u,t)),e(` util.</p><h2 id="dynamic-change-of-brand-colors-dynamic-theme-colors-" class="doc-heading doc-h2"${t}>Dynamic Change of Brand Colors (Dynamic Theme Colors)</h2><h3 id="how-it-works" class="doc-heading doc-h3"${t}>How it works</h3><p${t}>You can dynamically customize the brand colors during run-time: <code class="doc-token"${t}>primary</code>, <code class="doc-token"${t}>secondary</code>, <code class="doc-token"${t}>accent</code>, <code class="doc-token"${t}>dark</code>, <code class="doc-token"${t}>positive</code>, <code class="doc-token"${t}>negative</code>, <code class="doc-token"${t}>info</code>, <code class="doc-token"${t}>warning</code>. That means you can have one build of your application with a default color theme but show it with a runtime selected one.</p><p${t}>The main color configuration is done using CSS custom properties, stored on the root element (<code class="doc-token"${t}>:root</code>). Each property has a name of <code class="doc-token"${t}>--q-\${name}</code> (example: <code class="doc-token"${t}>--q-primary</code>, <code class="doc-token"${t}>--q-secondary</code>) and should have a valid CSS color as value.</p><p${t}>The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements.</p><p${t}>The recommended workflow is to set your customized color properties on the <code class="doc-token"${t}>html</code> (<code class="doc-token"${t}>document.documentElement</code>) or <code class="doc-token"${t}>body</code> (<code class="doc-token"${t}>document.body</code>) elements. This will allow you to revert to the default color by just deleting your custom one.</p><p${t}>More info on CSS custom properties (variables) on `),e(c(g,{to:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"},{default:l((r,o,p,a)=>{if(o)o("MDN");else return[s("MDN")]}),_:1},u,t)),e(`.</p><h3 id="util-setcssvar" class="doc-heading doc-h3"${t}>Util: setCssVar</h3><p${t}>Quasar offers a helper function for setting Quasar CSS variables that can be used for the brand colors too: <code class="doc-token"${t}>setCssVar(colorName, colorValue[, element])</code></p>`),e(c(h,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:l((r,o,p,a)=>{if(o)o(`<thead${a}><tr${a}><th class="text-left"${a}>Parameter</th><th class="text-left"${a}>Type</th><th class="text-left"${a}>Required</th><th class="text-left"${a}>Description</th></tr></thead><tbody${a}><tr${a}><td${a}><code class="doc-token"${a}>colorName</code></td><td${a}>String</td><td${a}><em${a}>Yes</em></td><td${a}>One of <code class="doc-token"${a}>primary</code>, <code class="doc-token"${a}>secondary</code>, <code class="doc-token"${a}>accent</code>, <code class="doc-token"${a}>dark</code>, <code class="doc-token"${a}>positive</code>, <code class="doc-token"${a}>negative</code>, <code class="doc-token"${a}>info</code>, <code class="doc-token"${a}>warning</code></td></tr><tr${a}><td${a}><code class="doc-token"${a}>colorValue</code></td><td${a}>String</td><td${a}><em${a}>Yes</em></td><td${a}>Valid CSS color value</td></tr><tr${a}><td${a}><code class="doc-token"${a}>element</code></td><td${a}>Element</td><td${a}>-</td><td${a}>(Default: <code class="doc-token"${a}>document.body</code>) Element where the custom property will be set.</td></tr></tbody>`);else return[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},"Parameter"),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Required"),n("th",{class:"text-left"},"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorName")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,[s("One of "),n("code",{class:"doc-token"},"primary"),s(", "),n("code",{class:"doc-token"},"secondary"),s(", "),n("code",{class:"doc-token"},"accent"),s(", "),n("code",{class:"doc-token"},"dark"),s(", "),n("code",{class:"doc-token"},"positive"),s(", "),n("code",{class:"doc-token"},"negative"),s(", "),n("code",{class:"doc-token"},"info"),s(", "),n("code",{class:"doc-token"},"warning")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorValue")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,"Valid CSS color value")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"element")]),n("td",null,"Element"),n("td",null,"-"),n("td",null,[s("(Default: "),n("code",{class:"doc-token"},"document.body"),s(") Element where the custom property will be set.")])])])]}),_:1},u,t)),e(`<p${t}>Example of setting brand colors using the helper:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> setCssVar <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;light&#39;</span><span class="token punctuation"${a}>,</span> <span class="token string"${a}>&#39;#DDD&#39;</span><span class="token punctuation"${a}>)</span>
<span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>,</span> <span class="token string"${a}>&#39;#33F&#39;</span><span class="token punctuation"${a}>)</span>
<span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>,</span> <span class="token string"${a}>&#39;#F33&#39;</span><span class="token punctuation"${a}>,</span> document<span class="token punctuation"${a}>.</span><span class="token function"${a}>getElementById</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;rebranded-section-id&#39;</span><span class="token punctuation"${a}>)</span><span class="token punctuation"${a}>)</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'light'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#DDD'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#33F'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#F33'"),n("span",{class:"token punctuation"},","),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'rebranded-section-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]}),_:1},u,t)),e(`<p${t}>Example of setting brand colors using vanilla JavaScript:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token comment"${a}>// equivalent of setCssVar(&#39;primary&#39;) in raw JavaScript:</span>
document<span class="token punctuation"${a}>.</span>body<span class="token punctuation"${a}>.</span>style<span class="token punctuation"${a}>.</span><span class="token function"${a}>setProperty</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;--q-primary&#39;</span><span class="token punctuation"${a}>,</span> <span class="token string"${a}>&#39;#0273d4&#39;</span><span class="token punctuation"${a}>)</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// equivalent of setCssVar('primary') in raw JavaScript:"),s(`
document`),n("span",{class:"token punctuation"},"."),s("body"),n("span",{class:"token punctuation"},"."),s("style"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setProperty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'--q-primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#0273d4'"),n("span",{class:"token punctuation"},")")])]),n(i)]}),_:1},u,t)),e(`<h3 id="util-getcssvar" class="doc-heading doc-h3"${t}>Util: getCssVar</h3><p${t}>Quasar offers a helper function for getting the value of Quasar CSS variables that can be used for brand colors too: <code class="doc-token"${t}>getCssVar(colorName[, element])</code></p>`),e(c(h,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:l((r,o,p,a)=>{if(o)o(`<thead${a}><tr${a}><th class="text-left"${a}>Parameter</th><th class="text-left"${a}>Type</th><th class="text-left"${a}>Required</th><th class="text-left"${a}>Description</th></tr></thead><tbody${a}><tr${a}><td${a}><code class="doc-token"${a}>colorName</code></td><td${a}>String</td><td${a}><em${a}>Yes</em></td><td${a}>One of <code class="doc-token"${a}>primary</code>, <code class="doc-token"${a}>secondary</code>, <code class="doc-token"${a}>accent</code>, <code class="doc-token"${a}>dark</code>, <code class="doc-token"${a}>positive</code>, <code class="doc-token"${a}>negative</code>, <code class="doc-token"${a}>info</code>, <code class="doc-token"${a}>warning</code></td></tr><tr${a}><td${a}><code class="doc-token"${a}>element</code></td><td${a}>Element</td><td${a}>-</td><td${a}>(Default: <code class="doc-token"${a}>document.body</code>) Element where the custom property will be read.</td></tr></tbody>`);else return[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},"Parameter"),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Required"),n("th",{class:"text-left"},"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorName")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,[s("One of "),n("code",{class:"doc-token"},"primary"),s(", "),n("code",{class:"doc-token"},"secondary"),s(", "),n("code",{class:"doc-token"},"accent"),s(", "),n("code",{class:"doc-token"},"dark"),s(", "),n("code",{class:"doc-token"},"positive"),s(", "),n("code",{class:"doc-token"},"negative"),s(", "),n("code",{class:"doc-token"},"info"),s(", "),n("code",{class:"doc-token"},"warning")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"element")]),n("td",null,"Element"),n("td",null,"-"),n("td",null,[s("(Default: "),n("code",{class:"doc-token"},"document.body"),s(") Element where the custom property will be read.")])])])]}),_:1},u,t)),e(`<p${t}>Example of getting brand colors using the helper:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> getCssVar <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token function"${a}>getCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// &#39;#33F&#39;</span>
<span class="token function"${a}>getCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>,</span> document<span class="token punctuation"${a}>.</span><span class="token function"${a}>getElementById</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;rebranded-section-id&#39;</span><span class="token punctuation"${a}>)</span><span class="token punctuation"${a}>)</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" getCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token function"},"getCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// '#33F'"),s(`
`),n("span",{class:"token function"},"getCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'rebranded-section-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]}),_:1},u,t)),e(`<p${t}>What this helper does is wrap the raw JavaScript <code class="doc-token"${t}>getPropertyValue()</code> and it’s available for convenience. Here is an example of equivalent vanilla JavaScript:</p>`),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token comment"${a}>// equivalent of getCssVar(&#39;primary&#39;) in raw JavaScript:</span>
<span class="token function"${a}>getComputedStyle</span><span class="token punctuation"${a}>(</span>document<span class="token punctuation"${a}>.</span>documentElement<span class="token punctuation"${a}>)</span>
  <span class="token punctuation"${a}>.</span><span class="token function"${a}>getPropertyValue</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;--q-primary&#39;</span><span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// #0273d4</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// equivalent of getCssVar('primary') in raw JavaScript:"),s(`
`),n("span",{class:"token function"},"getComputedStyle"),n("span",{class:"token punctuation"},"("),s("document"),n("span",{class:"token punctuation"},"."),s("documentElement"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getPropertyValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'--q-primary'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// #0273d4")])]),n(i)]}),_:1},u,t)),e(`<h3 id="more-color-utils" class="doc-heading doc-h3"${t}>More color utils</h3><p${t}>Besides the utils above, we also have a dedicated section in docs for handling colors that you might be interested in: `),e(c(g,{to:"/quasar-utils/color-utils"},{default:l((r,o,p,a)=>{if(o)o("Color utils");else return[s("Color utils")]}),_:1},u,t)),e(".</p>"),e(c(k(d),null,{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> colors<span class="token punctuation"${a}>,</span> setCssVar <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> <span class="token punctuation"${a}>{</span> lighten <span class="token punctuation"${a}>}</span> <span class="token operator"${a}>=</span> colors

<span class="token keyword"${a}>const</span> newPrimaryColor <span class="token operator"${a}>=</span> <span class="token string"${a}>&#39;#933&#39;</span>
<span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>,</span> newPrimaryColor<span class="token punctuation"${a}>)</span>
<span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary-darkened&#39;</span><span class="token punctuation"${a}>,</span> <span class="token function"${a}>lighten</span><span class="token punctuation"${a}>(</span>newPrimaryColor<span class="token punctuation"${a}>,</span> <span class="token operator"${a}>-</span><span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span><span class="token punctuation"${a}>)</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" colors"),n("span",{class:"token punctuation"},","),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" lighten "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(` colors

`),n("span",{class:"token keyword"},"const"),s(" newPrimaryColor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'#933'"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(" newPrimaryColor"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary-darkened'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"lighten"),n("span",{class:"token punctuation"},"("),s("newPrimaryColor"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]}),_:1},u,t)),e(`<h2 id="setting-up-defaults" class="doc-heading doc-h2"${t}>Setting Up Defaults</h2><p${t}>You can set up some brand colors without tampering with the Sass/SCSS variables.</p><p${t}>See the `),e(c(g,{to:"/style/color-palette#configuration"},{default:l((r,o,p,a)=>{if(o)o("Configuration");else return[s("Configuration")]}),_:1},u,t)),e(` section above for setting it during initial configuration for Quasar CLI, Vite plugin/Vue CLI, and UMD projects.</p><p${t}>If you are using Quasar CLI, you can also use a `),e(c(g,{to:"/quasar-cli-vite/boot-files"},{default:l((r,o,p,a)=>{if(o)o("@quasar/app-vite Boot File");else return[s("@quasar/app-vite Boot File")]}),_:1},u,t)),e(" or a "),e(c(g,{to:"/quasar-cli-webpack/boot-files"},{default:l((r,o,p,a)=>{if(o)o("@quasar/app-webpack Boot File");else return[s("@quasar/app-webpack Boot File")]}),_:1},u,t)),e(". This is especially useful if you want to change the colors dynamically at initial load time, perhaps after fetching them from an API.</p>"),e(c(k(d),{title:"/src/boot/brand-colors.js - or any other name"},{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> setCssVar <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>
<span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> boot <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar/wrappers&#39;</span>

<span class="token keyword"${a}>export</span> <span class="token keyword"${a}>default</span> <span class="token function"${a}>boot</span><span class="token punctuation"${a}>(</span><span class="token punctuation"${a}>(</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token punctuation"${a}>{</span>
  <span class="token function"${a}>setCssVar</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;primary&#39;</span><span class="token punctuation"${a}>,</span> <span class="token string"${a}>&#39;#ff0000&#39;</span><span class="token punctuation"${a}>)</span>
<span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>)</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" boot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar/wrappers'"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"boot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#ff0000'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(i)]}),_:1},u,t)),e(`<p${t}>If using SSR mode, disable this boot file when running on server-side:</p>`),e(c(k(d),{title:"/quasar.config file"},{default:l((r,o,p,a)=>{if(o)o(`<pre class="doc-code"${a}><code${a}><span class="token literal-property property"${a}>boot</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>[</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>server</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>false</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>path</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;brand-colors&#39;</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span> <span class="token comment"${a}>// or the name you gave it</span>
  <span class="token comment"${a}>// ...</span>
<span class="token punctuation"${a}>]</span><span class="token punctuation"${a}>,</span></code></pre>`),o(c(i,null,null,p,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"boot"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
  `),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"server"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'brand-colors'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// or the name you gave it"),s(`
  `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},",")])]),n(i)]}),_:1},u,t));else return[n("p",null,"Quasar Framework offers a wide selection of colors out of the box. You can use them both as Sass/SCSS variables in your CSS code or directly as CSS classes in your HTML templates."),n(Q,{file:"Brand"}),n(L,{title:"Configuration",config:"brand"}),n("h2",{id:"brand-colors",class:"doc-heading doc-h2",onClick:r=>k(f)("brand-colors")},"Brand Colors",8,["onClick"]),n("p",null,"Most of the colors that Quasar Components use are strongly linked with these eight colors that you can change. Choosing these colors is the first step one should take when differentiating the design of an App. You’ll notice immediately upon changing their default values that Quasar Components follow these colors as a guideline."),n(R),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIPS"),n("p",null,[s("Also check "),n(g,{to:"/style/theme-builder"},{default:l(()=>[s("Theme Builder")]),_:1}),s(" for a tool on customizing the brand colors of your website/app.")])]),n("h2",{id:"color-list",class:"doc-heading doc-h2",onClick:r=>k(f)("color-list")},"Color List",8,["onClick"]),n("p",null,[s("Here’s the list of colors provided out of the box. Within your app’s "),n("code",{class:"doc-token"},"*.vue"),s(" files you can use them as CSS classes (in HTML templates) or as "),n(g,{to:"/style/sass-scss-variables"},{default:l(()=>[s("Sass/SCSS variables")]),_:1}),s(" in "),n("code",{class:"doc-token"},'<style lang="...">'),s(" tags.")]),n(J),n("h2",{id:"using-as-css-classes",class:"doc-heading doc-h2",onClick:r=>k(f)("using-as-css-classes")},"Using as CSS Classes",8,["onClick"]),n("p",null,[s("Use "),n("code",{class:"doc-token"},"text-"),s(" or "),n("code",{class:"doc-token"},"bg-"),s(" prefixes as class names to change the color of text or the color of the background.")]),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"<!-- changing text color -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("text-primary"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("...."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")]),s(`

`),n("span",{class:"token comment"},"<!-- changing background color -->"),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("p")]),s(),n("span",{class:"token attr-name"},"class"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("bg-positive"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),s("..."),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("p")]),n("span",{class:"token punctuation"},">")])])]),n(i)]),_:1}),n("h2",{id:"using-sass-scss-variables",class:"doc-heading doc-h2",onClick:r=>k(f)("using-sass-scss-variables")},"Using Sass/SCSS Variables",8,["onClick"]),n("p",null,[s("In your app’s "),n("code",{class:"doc-token"},"*.vue"),s(" files you can use the colors as "),n("code",{class:"doc-token"},"$primary"),s(", "),n("code",{class:"doc-token"},"$red-1"),s(", and so on.")]),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},'<!-- Notice lang="sass" -->'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("sass"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
div
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(` $red-1
  `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(` $grey-5
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")])])]),n(i)]),_:1}),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},'<!-- Notice lang="scss" -->'),s(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("style")]),s(),n("span",{class:"token attr-name"},"lang"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("scss"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token style"},[n("span",{class:"token language-css"},[s(`
`),n("span",{class:"token selector"},"div"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(" $red-1"),n("span",{class:"token punctuation"},";"),s(`
  `),n("span",{class:"token property"},"background-color"),n("span",{class:"token punctuation"},":"),s(" $grey-5"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),s("style")]),n("span",{class:"token punctuation"},">")])])]),n(i)]),_:1}),n("h2",{id:"adding-your-own-colors",class:"doc-heading doc-h2",onClick:r=>k(f)("adding-your-own-colors")},"Adding Your Own Colors",8,["onClick"]),n("p",null,"If you want to use your own colors for your components (let’s say we are adding a color named “brand”) all you need to do is add the following CSS into your app:"),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".text-brand"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"color"),n("span",{class:"token punctuation"},":"),s(" #a2aa33 "),n("span",{class:"token important"},"!important"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token selector"},".bg-brand"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token property"},"background"),n("span",{class:"token punctuation"},":"),s(" #a2aa33 "),n("span",{class:"token important"},"!important"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(i)]),_:1}),n("p",null,"Now we can use this color for Quasar components:"),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),s("q-btn")]),s(),n("span",{class:"token attr-name"},"color"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),s("brand"),n("span",{class:"token punctuation"},'"')]),s(),n("span",{class:"token attr-name"},"..."),s(),n("span",{class:"token punctuation"},"/>")])])]),n(i)]),_:1}),n("p",null,[s("You can access a custom color value (hex string) in JS context with the "),n(g,{to:"/quasar-utils/color-utils#helper-getpalettecolor"},{default:l(()=>[s("getPaletteColor")]),_:1}),s(" util.")]),n("h2",{id:"dynamic-change-of-brand-colors-dynamic-theme-colors-",class:"doc-heading doc-h2",onClick:r=>k(f)("dynamic-change-of-brand-colors-dynamic-theme-colors-")},"Dynamic Change of Brand Colors (Dynamic Theme Colors)",8,["onClick"]),n("h3",{id:"how-it-works",class:"doc-heading doc-h3",onClick:r=>k(f)("how-it-works")},"How it works",8,["onClick"]),n("p",null,[s("You can dynamically customize the brand colors during run-time: "),n("code",{class:"doc-token"},"primary"),s(", "),n("code",{class:"doc-token"},"secondary"),s(", "),n("code",{class:"doc-token"},"accent"),s(", "),n("code",{class:"doc-token"},"dark"),s(", "),n("code",{class:"doc-token"},"positive"),s(", "),n("code",{class:"doc-token"},"negative"),s(", "),n("code",{class:"doc-token"},"info"),s(", "),n("code",{class:"doc-token"},"warning"),s(". That means you can have one build of your application with a default color theme but show it with a runtime selected one.")]),n("p",null,[s("The main color configuration is done using CSS custom properties, stored on the root element ("),n("code",{class:"doc-token"},":root"),s("). Each property has a name of "),n("code",{class:"doc-token"},"--q-${name}"),s(" (example: "),n("code",{class:"doc-token"},"--q-primary"),s(", "),n("code",{class:"doc-token"},"--q-secondary"),s(") and should have a valid CSS color as value.")]),n("p",null,"The CSS Custom properties use the same inheritance rules as normal CSS, so you can only redefine your desired colors and the rest will be inherited from the parent elements."),n("p",null,[s("The recommended workflow is to set your customized color properties on the "),n("code",{class:"doc-token"},"html"),s(" ("),n("code",{class:"doc-token"},"document.documentElement"),s(") or "),n("code",{class:"doc-token"},"body"),s(" ("),n("code",{class:"doc-token"},"document.body"),s(") elements. This will allow you to revert to the default color by just deleting your custom one.")]),n("p",null,[s("More info on CSS custom properties (variables) on "),n(g,{to:"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_variables"},{default:l(()=>[s("MDN")]),_:1}),s(".")]),n("h3",{id:"util-setcssvar",class:"doc-heading doc-h3",onClick:r=>k(f)("util-setcssvar")},"Util: setCssVar",8,["onClick"]),n("p",null,[s("Quasar offers a helper function for setting Quasar CSS variables that can be used for the brand colors too: "),n("code",{class:"doc-token"},"setCssVar(colorName, colorValue[, element])")]),n(h,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:l(()=>[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},"Parameter"),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Required"),n("th",{class:"text-left"},"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorName")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,[s("One of "),n("code",{class:"doc-token"},"primary"),s(", "),n("code",{class:"doc-token"},"secondary"),s(", "),n("code",{class:"doc-token"},"accent"),s(", "),n("code",{class:"doc-token"},"dark"),s(", "),n("code",{class:"doc-token"},"positive"),s(", "),n("code",{class:"doc-token"},"negative"),s(", "),n("code",{class:"doc-token"},"info"),s(", "),n("code",{class:"doc-token"},"warning")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorValue")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,"Valid CSS color value")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"element")]),n("td",null,"Element"),n("td",null,"-"),n("td",null,[s("(Default: "),n("code",{class:"doc-token"},"document.body"),s(") Element where the custom property will be set.")])])])]),_:1}),n("p",null,"Example of setting brand colors using the helper:"),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'light'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#DDD'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#33F'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#F33'"),n("span",{class:"token punctuation"},","),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'rebranded-section-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]),_:1}),n("p",null,"Example of setting brand colors using vanilla JavaScript:"),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// equivalent of setCssVar('primary') in raw JavaScript:"),s(`
document`),n("span",{class:"token punctuation"},"."),s("body"),n("span",{class:"token punctuation"},"."),s("style"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"setProperty"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'--q-primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#0273d4'"),n("span",{class:"token punctuation"},")")])]),n(i)]),_:1}),n("h3",{id:"util-getcssvar",class:"doc-heading doc-h3",onClick:r=>k(f)("util-getcssvar")},"Util: getCssVar",8,["onClick"]),n("p",null,[s("Quasar offers a helper function for getting the value of Quasar CSS variables that can be used for brand colors too: "),n("code",{class:"doc-token"},"getCssVar(colorName[, element])")]),n(h,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:l(()=>[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},"Parameter"),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Required"),n("th",{class:"text-left"},"Description")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"colorName")]),n("td",null,"String"),n("td",null,[n("em",null,"Yes")]),n("td",null,[s("One of "),n("code",{class:"doc-token"},"primary"),s(", "),n("code",{class:"doc-token"},"secondary"),s(", "),n("code",{class:"doc-token"},"accent"),s(", "),n("code",{class:"doc-token"},"dark"),s(", "),n("code",{class:"doc-token"},"positive"),s(", "),n("code",{class:"doc-token"},"negative"),s(", "),n("code",{class:"doc-token"},"info"),s(", "),n("code",{class:"doc-token"},"warning")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"element")]),n("td",null,"Element"),n("td",null,"-"),n("td",null,[s("(Default: "),n("code",{class:"doc-token"},"document.body"),s(") Element where the custom property will be read.")])])])]),_:1}),n("p",null,"Example of getting brand colors using the helper:"),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" getCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token function"},"getCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// '#33F'"),s(`
`),n("span",{class:"token function"},"getCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(" document"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getElementById"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'rebranded-section-id'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]),_:1}),n("p",null,[s("What this helper does is wrap the raw JavaScript "),n("code",{class:"doc-token"},"getPropertyValue()"),s(" and it’s available for convenience. Here is an example of equivalent vanilla JavaScript:")]),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// equivalent of getCssVar('primary') in raw JavaScript:"),s(`
`),n("span",{class:"token function"},"getComputedStyle"),n("span",{class:"token punctuation"},"("),s("document"),n("span",{class:"token punctuation"},"."),s("documentElement"),n("span",{class:"token punctuation"},")"),s(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getPropertyValue"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'--q-primary'"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// #0273d4")])]),n(i)]),_:1}),n("h3",{id:"more-color-utils",class:"doc-heading doc-h3",onClick:r=>k(f)("more-color-utils")},"More color utils",8,["onClick"]),n("p",null,[s("Besides the utils above, we also have a dedicated section in docs for handling colors that you might be interested in: "),n(g,{to:"/quasar-utils/color-utils"},{default:l(()=>[s("Color utils")]),_:1}),s(".")]),n(k(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" colors"),n("span",{class:"token punctuation"},","),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token punctuation"},"{"),s(" lighten "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token operator"},"="),s(` colors

`),n("span",{class:"token keyword"},"const"),s(" newPrimaryColor "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},"'#933'"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(" newPrimaryColor"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary-darkened'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"lighten"),n("span",{class:"token punctuation"},"("),s("newPrimaryColor"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"-"),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")")])]),n(i)]),_:1}),n("h2",{id:"setting-up-defaults",class:"doc-heading doc-h2",onClick:r=>k(f)("setting-up-defaults")},"Setting Up Defaults",8,["onClick"]),n("p",null,"You can set up some brand colors without tampering with the Sass/SCSS variables."),n("p",null,[s("See the "),n(g,{to:"/style/color-palette#configuration"},{default:l(()=>[s("Configuration")]),_:1}),s(" section above for setting it during initial configuration for Quasar CLI, Vite plugin/Vue CLI, and UMD projects.")]),n("p",null,[s("If you are using Quasar CLI, you can also use a "),n(g,{to:"/quasar-cli-vite/boot-files"},{default:l(()=>[s("@quasar/app-vite Boot File")]),_:1}),s(" or a "),n(g,{to:"/quasar-cli-webpack/boot-files"},{default:l(()=>[s("@quasar/app-webpack Boot File")]),_:1}),s(". This is especially useful if you want to change the colors dynamically at initial load time, perhaps after fetching them from an API.")]),n(k(d),{title:"/src/boot/brand-colors.js - or any other name"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" setCssVar "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`
`),n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" boot "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar/wrappers'"),s(`

`),n("span",{class:"token keyword"},"export"),s(),n("span",{class:"token keyword"},"default"),s(),n("span",{class:"token function"},"boot"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token function"},"setCssVar"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'primary'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'#ff0000'"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(i)]),_:1}),n("p",null,"If using SSR mode, disable this boot file when running on server-side:"),n(k(d),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"boot"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
  `),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"server"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'brand-colors'"),s(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token comment"},"// or the name you gave it"),s(`
  `),n("span",{class:"token comment"},"// ..."),s(`
`),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},",")])]),n(i)]),_:1})]}),_:1},b))}}},H=N.setup;N.setup=(y,m)=>{const $=B();return($.modules||($.modules=new Set)).add("src/pages/style/color-palette/color-palette.md"),H?H(y,m):void 0};const Cn=E(N,[["__file","color-palette.md"]]);export{Cn as default};
