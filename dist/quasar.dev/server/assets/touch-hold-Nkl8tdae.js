import{provide as C,mergeProps as x,withCtx as d,unref as c,createVNode as t,createTextVNode as n,useSSRContext as q}from"vue";import{ssrRenderComponent as s}from"vue/server-renderer";import{c as m}from"./page-utils-C-QWsEHe.js";import{D}from"./DocPage-DKr-0pQn.js";import{D as u}from"./DocExample-BcaABDtE.js";import{D as w}from"./DocApi-Df9ryd6x.js";import{D as k}from"./DocPrerender-DPOnWPFO.js";import{C as p}from"./CopyButton-l3ndfN49.js";import{_ as P}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"touch-hold",__ssrInlineRender:!0,setup($){C("_q_ex",{name:"TouchHold"});const v=[{name:"Touch Swipe",category:"Vue Directives",path:"/vue-directives/touch-swipe"},{name:"Touch Repeat",category:"Vue Directives",path:"/vue-directives/touch-repeat"},{name:"Touch Pan",category:"Vue Directives",path:"/vue-directives/touch-pan"}],h=[{id:"touchhold-api",title:"2. TouchHold API",deep:!0},{id:"usage",title:"3. Usage"},{id:"handling-mouse-events",title:"3.1. Handling Mouse Events",sub:!0},{id:"inhibiting-touchhold",title:"3.2. Inhibiting TouchHold",sub:!0},{id:"note-on-hmr",title:"4. Note on HMR"}];return(S,y,b,T)=>{y(s(D,x({title:"Touch Hold Directive",desc:"Vue directive which triggers an event when the user touches and holds on a component or element for a specified amount of time.",heading:"","edit-link":"vue-directives/touch-hold",toc:h,related:v},T),{default:d((V,a,i,o)=>{if(a)a(`<p${o}>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code class="doc-token"${o}>v-touch-pan</code>, <code class="doc-token"${o}>v-touch-swipe</code>, <code class="doc-token"${o}>v-touch-hold</code> and even <code class="doc-token"${o}>v-touch-repeat</code>.</p><blockquote class="doc-note"${o}><p${o}><strong${o}>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p></blockquote><p${o}>We will be describing <code class="doc-token"${o}>v-touch-hold</code> directive on the lines below.</p>`),a(s(w,{file:"TouchHold"},null,i,o)),a(`<h2 id="usage" class="doc-heading doc-h2"${o}>Usage</h2>`),a(s(u,{title:"Basic",file:"Basic"},null,i,o)),a(`<p${o}>The default wait time is 600ms, but you can change it:</p>`),a(s(u,{title:"Custom wait time",file:"CustomTimer"},null,i,o)),a(`<div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>TouchHold also has a default sensitivity of 5px for touch events and 7px for mouse events, which means that it allows a slight movement of the finger or mouse without aborting, improving the user experience.</p></div><p${o}>However, you can change this sensitivity too (notice the directive argument below - <code class="doc-token"${o}>600:12:15</code> - 600ms wait time, 12px sensitivity for touch events, 15px sensitivity for mouse events):</p>`),a(s(u,{title:"Custom sensitivity",file:"CustomSensitivity"},null,i,o)),a(`<h3 id="handling-mouse-events" class="doc-heading doc-h3"${o}>Handling Mouse Events</h3><p${o}>When you want to also handle mouse events too, use the <code class="doc-token"${o}>mouse</code> modifier:</p>`),a(s(c(k),null,{default:d((r,l,g,e)=>{if(l)l(`<pre class="doc-code"${e}><code${e}><span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>v-touch-hold.mouse</span><span class="token attr-value"${e}><span class="token punctuation attr-equals"${e}>=</span><span class="token punctuation"${e}>&quot;</span>userHasHold<span class="token punctuation"${e}>&quot;</span></span><span class="token punctuation"${e}>&gt;</span></span>...<span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span></code></pre>`),l(s(p,null,null,g,e));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-hold.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasHold"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n("..."),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]}),_:1},i,o)),a(`<h3 id="inhibiting-touchhold" class="doc-heading doc-h3"${o}>Inhibiting TouchHold</h3><p${o}>When you want to inhibit TouchHold, you can do so by stopping propagation of the <code class="doc-token"${o}>touchstart</code> / <code class="doc-token"${o}>mousedown</code> events from the inner content:</p>`),a(s(c(k),null,{default:d((r,l,g,e)=>{if(l)l(`<pre class="doc-code"${e}><code${e}><span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>v-touch-hold.mouse</span><span class="token attr-value"${e}><span class="token punctuation attr-equals"${e}>=</span><span class="token punctuation"${e}>&quot;</span>userHasHold<span class="token punctuation"${e}>&quot;</span></span><span class="token punctuation"${e}>&gt;</span></span>
  <span class="token comment"${e}>&lt;!-- ...content --&gt;</span>
  <span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>@touchstart.stop</span> <span class="token attr-name"${e}>@mousedown.stop</span><span class="token punctuation"${e}>&gt;</span></span>
    <span class="token comment"${e}>&lt;!--
      TouchHold will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    --&gt;</span>
  <span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span>
  <span class="token comment"${e}>&lt;!-- ...content --&gt;</span>
<span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span></code></pre>`),l(s(p,null,null,g,e));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-hold.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasHold"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"@touchstart.stop"),n(),t("span",{class:"token attr-name"},"@mousedown.stop"),t("span",{class:"token punctuation"},">")]),n(`
    `),t("span",{class:"token comment"},`<!--
      TouchHold will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    -->`),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]}),_:1},i,o)),a(`<p${o}>However, if you are using <code class="doc-token"${o}>capture</code> or <code class="doc-token"${o}>mouseCapture</code> modifiers then events will first reach the TouchHold directive then the inner content, so TouchHold will still trigger.</p><h2 id="note-on-hmr" class="doc-heading doc-h2"${o}>Note on HMR</h2><p${o}>Due to performance reasons, not all of the modifiers are reactive. Some require a window/page/component refresh to get updated. Please check the API card for the modifiers which are not marked as reactive.</p>`);else return[t("p",null,[n("Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: "),t("code",{class:"doc-token"},"v-touch-pan"),n(", "),t("code",{class:"doc-token"},"v-touch-swipe"),n(", "),t("code",{class:"doc-token"},"v-touch-hold"),n(" and even "),t("code",{class:"doc-token"},"v-touch-repeat"),n(".")]),t("blockquote",{class:"doc-note"},[t("p",null,[t("strong",null,"These directives also work with mouse events, not only touch events"),n(", so you are able to build cool functionality for your App on desktops too.")])]),t("p",null,[n("We will be describing "),t("code",{class:"doc-token"},"v-touch-hold"),n(" directive on the lines below.")]),t(w,{file:"TouchHold"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:r=>c(m)("usage")},"Usage",8,["onClick"]),t(u,{title:"Basic",file:"Basic"}),t("p",null,"The default wait time is 600ms, but you can change it:"),t(u,{title:"Custom wait time",file:"CustomTimer"}),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,"TouchHold also has a default sensitivity of 5px for touch events and 7px for mouse events, which means that it allows a slight movement of the finger or mouse without aborting, improving the user experience.")]),t("p",null,[n("However, you can change this sensitivity too (notice the directive argument below - "),t("code",{class:"doc-token"},"600:12:15"),n(" - 600ms wait time, 12px sensitivity for touch events, 15px sensitivity for mouse events):")]),t(u,{title:"Custom sensitivity",file:"CustomSensitivity"}),t("h3",{id:"handling-mouse-events",class:"doc-heading doc-h3",onClick:r=>c(m)("handling-mouse-events")},"Handling Mouse Events",8,["onClick"]),t("p",null,[n("When you want to also handle mouse events too, use the "),t("code",{class:"doc-token"},"mouse"),n(" modifier:")]),t(c(k),null,{default:d(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-hold.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasHold"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n("..."),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]),_:1}),t("h3",{id:"inhibiting-touchhold",class:"doc-heading doc-h3",onClick:r=>c(m)("inhibiting-touchhold")},"Inhibiting TouchHold",8,["onClick"]),t("p",null,[n("When you want to inhibit TouchHold, you can do so by stopping propagation of the "),t("code",{class:"doc-token"},"touchstart"),n(" / "),t("code",{class:"doc-token"},"mousedown"),n(" events from the inner content:")]),t(c(k),null,{default:d(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-hold.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasHold"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"@touchstart.stop"),n(),t("span",{class:"token attr-name"},"@mousedown.stop"),t("span",{class:"token punctuation"},">")]),n(`
    `),t("span",{class:"token comment"},`<!--
      TouchHold will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    -->`),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]),_:1}),t("p",null,[n("However, if you are using "),t("code",{class:"doc-token"},"capture"),n(" or "),t("code",{class:"doc-token"},"mouseCapture"),n(" modifiers then events will first reach the TouchHold directive then the inner content, so TouchHold will still trigger.")]),t("h2",{id:"note-on-hmr",class:"doc-heading doc-h2",onClick:r=>c(m)("note-on-hmr")},"Note on HMR",8,["onClick"]),t("p",null,"Due to performance reasons, not all of the modifiers are reactive. Some require a window/page/component refresh to get updated. Please check the API card for the modifiers which are not marked as reactive.")]}),_:1},b))}}},H=f.setup;f.setup=($,v)=>{const h=q();return(h.modules||(h.modules=new Set)).add("src/pages/vue-directives/touch-hold.md"),H?H($,v):void 0};const _=P(f,[["__file","touch-hold.md"]]);export{_ as default};
