import{provide as T,mergeProps as P,withCtx as k,createTextVNode as t,unref as c,createVNode as n,useSSRContext as q}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c as u}from"./page-utils-C-QWsEHe.js";import{D as Q,a as d}from"./DocPage-DKr-0pQn.js";import{D as o}from"./DocExample-BcaABDtE.js";import{D as h}from"./DocApi-Df9ryd6x.js";import{D as w}from"./DocPrerender-DPOnWPFO.js";import{C as f}from"./CopyButton-l3ndfN49.js";import{_ as B}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const $={__name:"table",__ssrInlineRender:!0,setup(b){T("_q_ex",{name:"QTable"});const y=[{name:"Markup Table",category:"Vue Components",path:"/vue-components/markup-table"},{name:"Pagination",category:"Vue Components",path:"/vue-components/pagination"}],g=[{id:"qtable-api",title:"2. QTable API",deep:!0},{id:"qth-api",title:"3. QTh API",deep:!0},{id:"qtr-api",title:"4. QTr API",deep:!0},{id:"qtd-api",title:"5. QTd API",deep:!0},{id:"defining-the-columns",title:"6. Defining the columns"},{id:"basic-usage",title:"7. Basic usage"},{id:"omitting-columns-definition",title:"8. Omitting columns definition"},{id:"sticky-header-column",title:"9. Sticky header/column"},{id:"separators",title:"10. Separators"},{id:"styling",title:"11. Styling"},{id:"virtual-scrolling",title:"12. Virtual scrolling"},{id:"selection",title:"13. Selection"},{id:"visible-columns-custom-top-fullscreen",title:"14. Visible columns, custom top, fullscreen"},{id:"popup-editing",title:"15. Popup editing"},{id:"grid-style",title:"16. Grid style"},{id:"expanding-rows",title:"17. Expanding rows"},{id:"before-after-slots",title:"18. Before/after slots"},{id:"pagination",title:"19. Pagination"},{id:"pagination-slot",title:"20. Pagination slot"},{id:"loading-state",title:"21. Loading state"},{id:"custom-top",title:"22. Custom top"},{id:"body-slots",title:"23. Body slots"},{id:"header-slots",title:"24. Header slots"},{id:"no-data",title:"25. No data"},{id:"handling-bottom-layer",title:"26. Handling bottom layer"},{id:"custom-sorting",title:"27. Custom sorting"},{id:"responsive-tables",title:"28. Responsive tables"},{id:"server-side-pagination-filter-and-sorting",title:"29. Server side pagination, filter and sorting"},{id:"exporting-data",title:"30. Exporting data"},{id:"keyboard-navigation",title:"31. Keyboard navigation"}];return(V,S,C,x)=>{S(l(Q,P({title:"Table",desc:"The QTable Vue component allows you to display data in a tabular manner and it's packed with a lot of related features. It's generally called a datatable.",heading:"","edit-link":"vue-components/table",toc:g,related:y},x),{default:k((N,s,i,e)=>{if(s)s(`<p${e}>QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:</p><ul${e}><li${e}>Filtering</li><li${e}>Sorting</li><li${e}>Single / Multiple rows selection with custom selection actions</li><li${e}>Pagination (including server-side if required)</li><li${e}>Grid mode (you can use for example QCards to display data in a non-tabular manner)</li><li${e}>Total customization of rows and cells through scoped slots</li><li${e}>Ability to add additional row(s) at top or bottom of data rows</li><li${e}>Column picker (through QTableColumns component described in one of the sections)</li><li${e}>Custom top and/or bottom Table controls</li><li${e}>Responsive design</li></ul><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>If you don’t need pagination, sorting, filtering, and all other features of QTable, then you may want to check out `),s(l(d,{to:"/vue-components/markup-table"},{default:k((r,p,m,a)=>{if(p)p("QMarkupTable");else return[t("QMarkupTable")]}),_:1},i,e)),s(" component instead.</p></div>"),s(l(h,{file:"QTable"},null,i,e)),s(l(h,{file:"QTh"},null,i,e)),s(l(h,{file:"QTr"},null,i,e)),s(l(h,{file:"QTd"},null,i,e)),s(`<h2 id="defining-the-columns" class="doc-heading doc-h2"${e}>Defining the columns</h2><p${e}>Let’s take an example of configuring the <code class="doc-token"${e}>columns</code> property. We are going to tell QTable that <code class="doc-token"${e}>row-key</code> is ‘name’, which <strong${e}>must</strong> be unique. If this was data fetched from a database we would likely use the row <strong${e}>id</strong>.</p>`),s(l(c(w),null,{default:k((r,p,m,a)=>{if(p)p(`<pre class="doc-code"${a}><code${a}><span class="token literal-property property"${a}>columns</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>[</span> <span class="token comment"${a}>// array of Objects</span>
  <span class="token comment"${a}>// column Object definition</span>
  <span class="token punctuation"${a}>{</span>
    <span class="token comment"${a}>// unique id</span>
    <span class="token comment"${a}>// identifies column</span>
    <span class="token comment"${a}>// (used by pagination.sortBy, &quot;body-cell-[name]&quot; slot, ...)</span>
    <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;desc&#39;</span><span class="token punctuation"${a}>,</span>

    <span class="token comment"${a}>// label for header</span>
    <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Dessert (100g serving)&#39;</span><span class="token punctuation"${a}>,</span>

    <span class="token comment"${a}>// row Object property to determine value for this column</span>
    <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;name&#39;</span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// OR field: row =&gt; row.some.nested.prop,</span>

    <span class="token comment"${a}>// (optional) if we use visible-columns, this col will always be visible</span>
    <span class="token literal-property property"${a}>required</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span><span class="token punctuation"${a}>,</span>

    <span class="token comment"${a}>// (optional) alignment</span>
    <span class="token literal-property property"${a}>align</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;left&#39;</span><span class="token punctuation"${a}>,</span>

    <span class="token comment"${a}>// (optional) tell QTable you want this column sortable</span>
    <span class="token literal-property property"${a}>sortable</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span><span class="token punctuation"${a}>,</span>

    <span class="token comment"${a}>// (optional) compare function if you have</span>
    <span class="token comment"${a}>// some custom data or want a specific way to compare two rows</span>
    <span class="token comment"${a}>// --&gt; note that rows with null/undefined as value will get auto sorted</span>
    <span class="token comment"${a}>// without calling this method (if you want to handle those as well, use &quot;rawSort&quot; instead)</span>
    <span class="token function-variable function"${a}>sort</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>(</span><span class="token parameter"${a}>a<span class="token punctuation"${a}>,</span> b<span class="token punctuation"${a}>,</span> rowA<span class="token punctuation"${a}>,</span> rowB</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>a<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>-</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>b<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// function return value:</span>
    <span class="token comment"${a}>//   * is less than 0 then sort a to an index lower than b, i.e. a comes first</span>
    <span class="token comment"${a}>//   * is 0 then leave a and b unchanged with respect to each other, but sorted with respect to all different elements</span>
    <span class="token comment"${a}>//   * is greater than 0 then sort b to an index lower than a, i.e. b comes first</span>

    <span class="token comment"${a}>// (optional) requires Quasar v2.13+</span>
    <span class="token comment"${a}>// compare function if you have</span>
    <span class="token comment"${a}>// some custom data or want a specific way to compare two rows</span>
    <span class="token comment"${a}>// --&gt; note that there is an alternative &quot;sort&quot; method (above) if you don&#39;t</span>
    <span class="token comment"${a}>// want to handle (by yourself) rows with null/undefined as value</span>
    <span class="token function-variable function"${a}>rawSort</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>(</span><span class="token parameter"${a}>a<span class="token punctuation"${a}>,</span> b<span class="token punctuation"${a}>,</span> rowA<span class="token punctuation"${a}>,</span> rowB</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>a<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>-</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>b<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// has the same return value as the alternative &quot;sort&quot; method above</span>

    <span class="token comment"${a}>// (optional) override &#39;column-sort-order&#39; prop;</span>
    <span class="token comment"${a}>// sets column sort order: &#39;ad&#39; (ascending-descending) or &#39;da&#39; (descending-ascending)</span>
    <span class="token literal-property property"${a}>sortOrder</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;ad&#39;</span><span class="token punctuation"${a}>,</span> <span class="token comment"${a}>// or &#39;da&#39;</span>

    <span class="token comment"${a}>// (optional) you can format the data with a function</span>
    <span class="token function-variable function"${a}>format</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>(</span><span class="token parameter"${a}>val<span class="token punctuation"${a}>,</span> row</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token template-string"${a}><span class="token template-punctuation string"${a}>\`</span><span class="token interpolation"${a}><span class="token interpolation-punctuation punctuation"${a}>\${</span>val<span class="token interpolation-punctuation punctuation"${a}>}</span></span><span class="token string"${a}>%</span><span class="token template-punctuation string"${a}>\`</span></span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// one more format example:</span>
    <span class="token comment"${a}>// format: val =&gt; val</span>
    <span class="token comment"${a}>//   ? /* Unicode checkmark checked */ &quot;\\u2611&quot;</span>
    <span class="token comment"${a}>//   : /* Unicode checkmark unchecked */ &quot;\\u2610&quot;,</span>

    <span class="token comment"${a}>// body td:</span>
    <span class="token literal-property property"${a}>style</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;width: 500px&#39;</span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// or as Function --&gt; style: row =&gt; ... (return String/Array/Object)</span>
    <span class="token literal-property property"${a}>classes</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;my-special-class&#39;</span><span class="token punctuation"${a}>,</span>
    <span class="token comment"${a}>// or as Function --&gt; classes: row =&gt; ... (return String)</span>

    <span class="token comment"${a}>// header th:</span>
    <span class="token literal-property property"${a}>headerStyle</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;width: 500px&#39;</span><span class="token punctuation"${a}>,</span>
    <span class="token literal-property property"${a}>headerClasses</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;my-special-class&#39;</span>
  <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;calories&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Calories&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;calories&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>sortable</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;fat&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Fat (g)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;fat&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>sortable</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;carbs&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Carbs (g)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;carbs&#39;</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;protein&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Protein (g)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;protein&#39;</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;sodium&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Sodium (mg)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;sodium&#39;</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;calcium&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Calcium (%)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;calcium&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>sortable</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span><span class="token punctuation"${a}>,</span> <span class="token function-variable function"${a}>sort</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>(</span><span class="token parameter"${a}>a<span class="token punctuation"${a}>,</span> b</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>a<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>-</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>b<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>}</span><span class="token punctuation"${a}>,</span>
  <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>name</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;iron&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>label</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;Iron (%)&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>field</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;iron&#39;</span><span class="token punctuation"${a}>,</span> <span class="token literal-property property"${a}>sortable</span><span class="token operator"${a}>:</span> <span class="token boolean"${a}>true</span><span class="token punctuation"${a}>,</span> <span class="token function-variable function"${a}>sort</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>(</span><span class="token parameter"${a}>a<span class="token punctuation"${a}>,</span> b</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>=&gt;</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>a<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token operator"${a}>-</span> <span class="token function"${a}>parseInt</span><span class="token punctuation"${a}>(</span>b<span class="token punctuation"${a}>,</span> <span class="token number"${a}>10</span><span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>}</span>
<span class="token punctuation"${a}>]</span></code></pre>`),p(l(f,null,null,m,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"columns"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),t(),n("span",{class:"token comment"},"// array of Objects"),t(`
  `),n("span",{class:"token comment"},"// column Object definition"),t(`
  `),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token comment"},"// unique id"),t(`
    `),n("span",{class:"token comment"},"// identifies column"),t(`
    `),n("span",{class:"token comment"},'// (used by pagination.sortBy, "body-cell-[name]" slot, ...)'),t(`
    `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'desc'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// label for header"),t(`
    `),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Dessert (100g serving)'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// row Object property to determine value for this column"),t(`
    `),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'name'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// OR field: row => row.some.nested.prop,"),t(`

    `),n("span",{class:"token comment"},"// (optional) if we use visible-columns, this col will always be visible"),t(`
    `),n("span",{class:"token literal-property property"},"required"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) alignment"),t(`
    `),n("span",{class:"token literal-property property"},"align"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'left'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) tell QTable you want this column sortable"),t(`
    `),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) compare function if you have"),t(`
    `),n("span",{class:"token comment"},"// some custom data or want a specific way to compare two rows"),t(`
    `),n("span",{class:"token comment"},"// --> note that rows with null/undefined as value will get auto sorted"),t(`
    `),n("span",{class:"token comment"},'// without calling this method (if you want to handle those as well, use "rawSort" instead)'),t(`
    `),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b"),n("span",{class:"token punctuation"},","),t(" rowA"),n("span",{class:"token punctuation"},","),t(" rowB")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// function return value:"),t(`
    `),n("span",{class:"token comment"},"//   * is less than 0 then sort a to an index lower than b, i.e. a comes first"),t(`
    `),n("span",{class:"token comment"},"//   * is 0 then leave a and b unchanged with respect to each other, but sorted with respect to all different elements"),t(`
    `),n("span",{class:"token comment"},"//   * is greater than 0 then sort b to an index lower than a, i.e. b comes first"),t(`

    `),n("span",{class:"token comment"},"// (optional) requires Quasar v2.13+"),t(`
    `),n("span",{class:"token comment"},"// compare function if you have"),t(`
    `),n("span",{class:"token comment"},"// some custom data or want a specific way to compare two rows"),t(`
    `),n("span",{class:"token comment"},`// --> note that there is an alternative "sort" method (above) if you don't`),t(`
    `),n("span",{class:"token comment"},"// want to handle (by yourself) rows with null/undefined as value"),t(`
    `),n("span",{class:"token function-variable function"},"rawSort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b"),n("span",{class:"token punctuation"},","),t(" rowA"),n("span",{class:"token punctuation"},","),t(" rowB")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},'// has the same return value as the alternative "sort" method above'),t(`

    `),n("span",{class:"token comment"},"// (optional) override 'column-sort-order' prop;"),t(`
    `),n("span",{class:"token comment"},"// sets column sort order: 'ad' (ascending-descending) or 'da' (descending-ascending)"),t(`
    `),n("span",{class:"token literal-property property"},"sortOrder"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'ad'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token comment"},"// or 'da'"),t(`

    `),n("span",{class:"token comment"},"// (optional) you can format the data with a function"),t(`
    `),n("span",{class:"token function-variable function"},"format"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("val"),n("span",{class:"token punctuation"},","),t(" row")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),t("val"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"%"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// one more format example:"),t(`
    `),n("span",{class:"token comment"},"// format: val => val"),t(`
    `),n("span",{class:"token comment"},'//   ? /* Unicode checkmark checked */ "\\u2611"'),t(`
    `),n("span",{class:"token comment"},'//   : /* Unicode checkmark unchecked */ "\\u2610",'),t(`

    `),n("span",{class:"token comment"},"// body td:"),t(`
    `),n("span",{class:"token literal-property property"},"style"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'width: 500px'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// or as Function --> style: row => ... (return String/Array/Object)"),t(`
    `),n("span",{class:"token literal-property property"},"classes"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'my-special-class'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// or as Function --> classes: row => ... (return String)"),t(`

    `),n("span",{class:"token comment"},"// header th:"),t(`
    `),n("span",{class:"token literal-property property"},"headerStyle"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'width: 500px'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"headerClasses"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'my-special-class'"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'fat'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Fat (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'fat'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'carbs'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Carbs (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'carbs'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'protein'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Protein (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'protein'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'sodium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Sodium (mg)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'sodium'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calcium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Calcium (%)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calcium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'iron'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Iron (%)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'iron'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"]")])]),n(f)]}),_:1},i,e)),s(`<h2 id="basic-usage" class="doc-heading doc-h2"${e}>Basic usage</h2>`),s(l(o,{title:"Basic",file:"Basic"},null,i,e)),s(l(o,{title:"Force dark mode",file:"Dark"},null,i,e)),s(l(o,{title:"Dense",file:"Dense"},null,i,e)),s(`<div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can use the <code class="doc-token"${e}>dense</code> prop along with <code class="doc-token"${e}>$q.screen</code> to create a responsive behavior. Example: <code class="doc-token"${e}>:dense=&quot;$q.screen.lt.md&quot;</code>. More info: `),s(l(d,{to:"/options/screen-plugin"},{default:k((r,p,m,a)=>{if(p)p("Screen Plugin");else return[t("Screen Plugin")]}),_:1},i,e)),s(`.</p></div><h2 id="omitting-columns-definition" class="doc-heading doc-h2"${e}>Omitting columns definition</h2><p${e}>You can omit specifying the <code class="doc-token"${e}>columns</code>. QTable will infer the columns from the properties of the first row of the data. Note that labels are uppercased and sorting is enabled:</p>`),s(l(o,{title:"Infering columns from data",file:"InferColumns"},null,i,e)),s(`<h2 id="sticky-header-column" class="doc-heading doc-h2"${e}>Sticky header/column</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Sticky headers and columns are achieved through CSS with <code class="doc-token"${e}>position: sticky</code>. This is NOT supported on all browsers. Check `),s(l(d,{to:"https://caniuse.com/#search=sticky"},{default:k((r,p,m,a)=>{if(p)p("caniuse.com");else return[t("caniuse.com")]}),_:1},i,e)),s(` before using this technique.</p></div><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Pay attention to the code in the “style” section in the following examples, especially around <code class="doc-token"${e}>position: sticky</code>.</p></div>`),s(l(o,{title:"Sticky header",file:"StickyHeader"},null,i,e)),s(l(o,{title:"Sticky first column",file:"StickyColumn"},null,i,e)),s(l(o,{title:"Sticky last column",file:"StickyLastColumn"},null,i,e)),s(l(o,{title:"Sticky header and column",file:"StickyHeaderAndColumn"},null,i,e)),s(l(o,{title:"Sticky header and last column",file:"StickyHeaderAndLastColumn"},null,i,e)),s(`<h2 id="separators" class="doc-heading doc-h2"${e}>Separators</h2>`),s(l(o,{title:"Separators",file:"Separators"},null,i,e)),s(`<h2 id="styling" class="doc-heading doc-h2"${e}>Styling</h2>`),s(l(o,{title:"Custom column",file:"CustomColumn"},null,i,e)),s(l(o,{title:"Custom coloring",file:"CustomColor"},null,i,e)),s(l(o,{title:"No header/footer",file:"NoHeaderFooter"},null,i,e)),s(`<h2 id="virtual-scrolling" class="doc-heading doc-h2"${e}>Virtual scrolling</h2><p${e}>Notice that when enabling virtual scroll you will need to specify the <code class="doc-token"${e}>table-style</code> (with a max-height) prop. In the example below, we are also forcing QTable to display all rows at once (note the use of <code class="doc-token"${e}>pagination</code> and <code class="doc-token"${e}>rows-per-page-options</code> props).</p>`),s(l(o,{title:"Basic virtual scroll",file:"VirtscrollBasic"},null,i,e)),s(`<p${e}>You can dynamically load new rows when scroll reaches the end:</p>`),s(l(o,{title:"Dynamic loading virtual scroll",file:"VirtscrollDynamic"},null,i,e)),s(`<p${e}>You can have both virtual scroll and pagination:</p>`),s(l(o,{title:"Virtual scroll and pagination",file:"VirtscrollPagination"},null,i,e)),s(`<p${e}>The example below shows how virtual scroll can be used along with a sticky header. Notice the <code class="doc-token"${e}>virtual-scroll-sticky-start</code> prop which is set to the header height.</p>`),s(l(o,{title:"Virtual scroll with sticky header",file:"VirtscrollSticky"},null,i,e)),s(`<p${e}>There are 2 utility CSS classes that control VirtualScroll size calculation:</p><ul${e}><li${e}>Use <code class="doc-token"${e}>q-virtual-scroll--with-prev</code> class on an element rendered by the VirtualScroll to indicate that the element should be grouped with the previous one (main use case is for multiple table rows generated from the same row of data).</li><li${e}>Use <code class="doc-token"${e}>q-virtual-scroll--skip</code> class on an element rendered by the VirtualScroll to indicate that the element’s size should be ignored in size calculations.</li></ul>`),s(l(o,{title:"Virtual scroll with multiple rows for a data row",file:"VirtscrollMultipleRows"},null,i,e)),s(`<h2 id="selection" class="doc-heading doc-h2"${e}>Selection</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>The property <code class="doc-token"${e}>row-key</code> must be set in order for selection to work properly.</p></div>`),s(l(o,{title:"Single selection",file:"SingleSelection"},null,i,e)),s(l(o,{title:"Multiple selection",file:"MultipleSelection"},null,i,e)),s(l(o,{title:"Selection cell slots",file:"SelectionSlots"},null,i,e)),s(l(o,{title:"Selection cell slots with range selection",file:"SelectionSlotsRange"},null,i,e)),s(l(o,{title:"Custom multiple selection",file:"CustomSelection"},null,i,e)),s(`<h2 id="visible-columns-custom-top-fullscreen" class="doc-heading doc-h2"${e}>Visible columns, custom top, fullscreen</h2><p${e}>Please note that columns marked as <code class="doc-token"${e}>required</code> (in the column definition) cannot be toggled and are always visible.</p>`),s(l(o,{title:"Visible columns, custom top and fullscreen",file:"VisibleColumns"},null,i,e)),s(l(o,{title:"Visible columns",file:"VisibleColumns2"},null,i,e)),s(`<h2 id="popup-editing" class="doc-heading doc-h2"${e}>Popup editing</h2><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Below is an example with the user being able to edit “in place” with the help of <strong${e}>QPopupEdit</strong> component. Please note that we are using the <code class="doc-token"${e}>body</code> scoped slot. <strong${e}>QPopupEdit</strong> won’t work with cell scoped slots.</p></div>`),s(l(o,{title:"Popup editing",file:"PopupEditing"},null,i,e)),s(`<h2 id="grid-style" class="doc-heading doc-h2"${e}>Grid style</h2><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can use the <code class="doc-token"${e}>grid</code> prop along with <code class="doc-token"${e}>$q.screen</code> to create a responsive behavior. Example: <code class="doc-token"${e}>:grid=&quot;$q.screen.lt.md&quot;</code>. More info: `),s(l(d,{to:"/options/screen-plugin"},{default:k((r,p,m,a)=>{if(p)p("Screen Plugin");else return[t("Screen Plugin")]}),_:1},i,e)),s(`.</p></div><p${e}>In the example below, we let QTable deal with displaying the grid mode (not using the specific slot):</p>`),s(l(o,{title:"Grid style",file:"GridStyle"},null,i,e)),s(l(o,{title:"Grid with header",file:"GridHeader"},null,i,e)),s(l(o,{title:"Colored grid style",file:"GridStyleColored"},null,i,e)),s(l(o,{title:"Masonry like grid",file:"GridMasonry"},null,i,e)),s(`<p${e}>However, if you want to fully customize the content, check the example below, where:</p><ul${e}><li${e}>We are using a Vue scoped slot called <code class="doc-token"${e}>item</code> to define how each record (the equivalent of a row in non-grid mode) should look. This allows you total freedom.</li><li${e}>We are using multiple selection.</li></ul>`),s(l(o,{title:"Grid style with slot",file:"GridStyleSlot"},null,i,e)),s(`<h2 id="expanding-rows" class="doc-heading doc-h2"${e}>Expanding rows</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Add unique (distinct) <code class="doc-token"${e}>key</code> on QTr if you generate more than one QTr from a row in data.</p></div>`),s(l(o,{title:"Internal expansion model",file:"ExpandedRowInternal"},null,i,e)),s(`<p${e}>An external expansion model can also be used:</p>`),s(l(o,{title:"External expansion model",file:"ExpandedRowExternal"},null,i,e)),s(`<p${e}>If you are using virtual scroll with QTable, you should know that there are 2 utility CSS classes that control VirtualScroll size calculation:</p><ul${e}><li${e}>Use <code class="doc-token"${e}>q-virtual-scroll--with-prev</code> class on an element rendered by the VirtualScroll to indicate that the element should be grouped with the previous one (main use case is for multiple table rows generated from the same row of data).</li><li${e}>Use <code class="doc-token"${e}>q-virtual-scroll--skip</code> class on an element rendered by the VirtualScroll to indicate that the element’s size should be ignored in size calculations.</li></ul>`),s(l(o,{title:"Virtual scroll with expansion model",file:"VirtscrollExpandedRow"},null,i,e)),s(`<h2 id="before-after-slots" class="doc-heading doc-h2"${e}>Before/after slots</h2>`),s(l(o,{title:"Before/After slots (header/footer)",file:"BeforeAfterHeaderFooter"},null,i,e)),s(`<h2 id="pagination" class="doc-heading doc-h2"${e}>Pagination</h2><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>When <code class="doc-token"${e}>pagination</code> has a property named <code class="doc-token"${e}>rowsNumber</code>, then this means that you’ll be configuring Table for <strong${e}>server</strong>-side pagination (&amp; sorting &amp; filtering). See <em${e}>“Server side pagination, filter and sorting”</em> section.</p></div><p${e}>Below are two examples of handling the pagination (and sorting and rows per page).</p><p${e}>The first example highlights how to configure the initial pagination:</p>`),s(l(o,{title:"Initial pagination",file:"PaginationInitial"},null,i,e)),s(`<p${e}>The second example uses the “v-model:pagination” directive because we want to access its current value at any time. A use-case for the technique below can be to control the pagination from outside of QTable.</p>`),s(l(o,{title:"Synchronized pagination",file:"PaginationSync"},null,i,e)),s(`<h2 id="pagination-slot" class="doc-heading doc-h2"${e}>Pagination slot</h2><p${e}>For learning purposes, we will customize the pagination controls with the default controls in order to help you get started with your own.</p>`),s(l(o,{title:"Pagination slot",file:"PaginationSlot"},null,i,e)),s(`<h2 id="loading-state" class="doc-heading doc-h2"${e}>Loading state</h2>`),s(l(o,{title:"Default loading",file:"Loading"},null,i,e)),s(l(o,{title:"Custom loading state",file:"CustomLoading"},null,i,e)),s(`<h2 id="custom-top" class="doc-heading doc-h2"${e}>Custom top</h2>`),s(l(o,{title:"Custom top with add/remove row",file:"CustomTop"},null,i,e)),s(`<h2 id="body-slots" class="doc-heading doc-h2"${e}>Body slots</h2><p${e}>The example below shows how you can use a slot to customize the entire row:</p>`),s(l(o,{title:"Body slot",file:"SlotBody"},null,i,e)),s(`<p${e}>Below, we use a slot which gets applied to each body cell:</p>`),s(l(o,{title:"Body-cell slot",file:"SlotBodyCell"},null,i,e)),s(`<p${e}>We can also customize only one particular column only. The syntax for this slot is <code class="doc-token"${e}>body-cell-[name]</code>, where <code class="doc-token"${e}>[name]</code> should be replaced by the property of each row which is used as the row-key.</p>`),s(l(o,{title:"Body-cell-[name] slot",file:"SlotBodyCellName"},null,i,e)),s(`<h2 id="header-slots" class="doc-heading doc-h2"${e}>Header slots</h2><p${e}>The example below shows how you can use a slot to customize the entire header row:</p>`),s(l(o,{title:"Header slot",file:"SlotHeader"},null,i,e)),s(`<p${e}>Below, we use a slot which gets applied to each header cell:</p>`),s(l(o,{title:"Header-cell slot",file:"SlotHeaderCell"},null,i,e)),s(`<p${e}>We can also customize only one particular header cell only. The syntax for this slot is <code class="doc-token"${e}>header-cell-[name]</code>, where <code class="doc-token"${e}>[name]</code> should be replaced by the property of each row which is used as the row-key.</p>`),s(l(o,{title:"Header-cell-[name] slot",file:"SlotHeaderCellName"},null,i,e)),s(`<h2 id="no-data" class="doc-heading doc-h2"${e}>No data</h2>`),s(l(o,{title:"No Data Label",file:"NoData"},null,i,e)),s(`<p${e}>There is also a “no-data” scoped slot (see below) that you can also to customize the messages for both when a filter doesn’t returns any results or the table has no data to display. Also type something into the “Search” input.</p>`),s(l(o,{title:"No Data Slot",file:"NoDataSlot"},null,i,e)),s(`<h2 id="handling-bottom-layer" class="doc-heading doc-h2"${e}>Handling bottom layer</h2><p${e}>There are a few properties that you can use to hide the bottom layer or specific parts of it. You can play with it below:</p>`),s(l(o,{title:"Hiding bottom layer",file:"HideBottom"},null,i,e)),s(`<h2 id="custom-sorting" class="doc-heading doc-h2"${e}>Custom sorting</h2>`),s(l(o,{title:"Custom sorting",file:"CustomSorting"},null,i,e)),s(`<h2 id="responsive-tables" class="doc-heading doc-h2"${e}>Responsive tables</h2><p${e}>In order to create responsive tables, we have two tools at our disposal: <code class="doc-token"${e}>dense</code> and <code class="doc-token"${e}>grid</code> properties. We can connect these with <code class="doc-token"${e}>$q.screen</code>. More info: `),s(l(d,{to:"/options/screen-plugin"},{default:k((r,p,m,a)=>{if(p)p("Screen Plugin");else return[t("Screen Plugin")]}),_:1},i,e)),s(`.</p><p${e}>First example below uses <code class="doc-token"${e}>$q.screen.lt.md</code> (for enabling dense mode) and the second examples uses <code class="doc-token"${e}>$q.screen.xs</code> to enable grid mode, so play with browser width to see them in action.</p>`),s(l(o,{title:"Using dense prop",file:"ResponsiveDense"},null,i,e)),s(l(o,{title:"Using grid prop",file:"ResponsiveGrid"},null,i,e)),s(`<h2 id="server-side-pagination-filter-and-sorting" class="doc-heading doc-h2"${e}>Server side pagination, filter and sorting</h2><p${e}>When your database contains a big number of rows for a Table, obviously it’s not feasible to load them all for multiple reasons (memory, UI rendering performance, …). Instead, you can load only a Table page. Whenever the user wants to navigate to another Table page, or wants to sort by a column or wants to filter the Table, a <strong${e}>request</strong> is sent to the <strong${e}>server</strong> to fetch the partially paged data.</p><ol${e}><li${e}><p${e}>First step to enable this behavior is to specify <code class="doc-token"${e}>pagination</code> prop, which MUST contain <code class="doc-token"${e}>rowsNumber</code>. QTable needs to know the total number of rows available in order to correctly render the pagination links. Should filtering cause the <code class="doc-token"${e}>rowsNumber</code> to change then it must be modified dynamically.</p></li><li${e}><p${e}>Second step is to listen for <code class="doc-token"${e}>@request</code> event on QTable. This event is triggered when data needs to be fetched from the <strong${e}>server</strong> because either page number or sorting or filtering changed.</p></li><li${e}><p${e}>It’s best that you also specify the <code class="doc-token"${e}>loading</code> prop in order to notify the user that a background process is in progress.</p></li></ol><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>In the example below, steps have been taken to emulate an ajax call to a server. While the concepts are similar, if you use this code you will need to make the appropriate changes to connect to your own data source.</p></div>`),s(l(o,{title:"Synchronizing with server",file:"Synchronizing"},null,i,e)),s(`<h2 id="exporting-data" class="doc-heading doc-h2"${e}>Exporting data</h2><p${e}>Below is an example of a naive csv encoding and then exporting table data by using the `),s(l(d,{to:"/quasar-utils/other-utils#export-file"},{default:k((r,p,m,a)=>{if(p)p("exportFile");else return[t("exportFile")]}),_:1},i,e)),s(" Quasar util. The browser should trigger a file download. For a more professional approach in regards to encoding we do recommend using "),s(l(d,{to:"https://csv.js.org/parse/"},{default:k((r,p,m,a)=>{if(p)p("csv-parse");else return[t("csv-parse")]}),_:1},i,e)),s(" and "),s(l(d,{to:"https://csv.js.org/stringify/"},{default:k((r,p,m,a)=>{if(p)p("csv-stringify");else return[t("csv-stringify")]}),_:1},i,e)),s(` packages.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You could also make use of the <code class="doc-token"${e}>filteredSortedRows</code> internal computed property of QTable should you want to export the user filtered + sorted data.</p></div>`),s(l(o,{title:"Export to csv",file:"ExportCsv"},null,i,e)),s(`<h2 id="keyboard-navigation" class="doc-heading doc-h2"${e}>Keyboard navigation</h2><p${e}>Below is an example of keyboard navigation in the table using selected row. Use <code class="doc-token"${e}>ArrowUp</code>, <code class="doc-token"${e}>ArrowDown</code>, <code class="doc-token"${e}>PageUp</code>, <code class="doc-token"${e}>PageDown</code>, <code class="doc-token"${e}>Home</code> and <code class="doc-token"${e}>End</code> keys to navigate.</p>`),s(l(o,{title:"Keyboard navigation",file:"KeyboardNavigation"},null,i,e));else return[n("p",null,"QTable is a component that allows you to display data in a tabular manner. It’s generally called a datatable. It packs the following main features:"),n("ul",null,[n("li",null,"Filtering"),n("li",null,"Sorting"),n("li",null,"Single / Multiple rows selection with custom selection actions"),n("li",null,"Pagination (including server-side if required)"),n("li",null,"Grid mode (you can use for example QCards to display data in a non-tabular manner)"),n("li",null,"Total customization of rows and cells through scoped slots"),n("li",null,"Ability to add additional row(s) at top or bottom of data rows"),n("li",null,"Column picker (through QTableColumns component described in one of the sections)"),n("li",null,"Custom top and/or bottom Table controls"),n("li",null,"Responsive design")]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("If you don’t need pagination, sorting, filtering, and all other features of QTable, then you may want to check out "),n(d,{to:"/vue-components/markup-table"},{default:k(()=>[t("QMarkupTable")]),_:1}),t(" component instead.")])]),n(h,{file:"QTable"}),n(h,{file:"QTh"}),n(h,{file:"QTr"}),n(h,{file:"QTd"}),n("h2",{id:"defining-the-columns",class:"doc-heading doc-h2",onClick:r=>c(u)("defining-the-columns")},"Defining the columns",8,["onClick"]),n("p",null,[t("Let’s take an example of configuring the "),n("code",{class:"doc-token"},"columns"),t(" property. We are going to tell QTable that "),n("code",{class:"doc-token"},"row-key"),t(" is ‘name’, which "),n("strong",null,"must"),t(" be unique. If this was data fetched from a database we would likely use the row "),n("strong",null,"id"),t(".")]),n(c(w),null,{default:k(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"columns"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),t(),n("span",{class:"token comment"},"// array of Objects"),t(`
  `),n("span",{class:"token comment"},"// column Object definition"),t(`
  `),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token comment"},"// unique id"),t(`
    `),n("span",{class:"token comment"},"// identifies column"),t(`
    `),n("span",{class:"token comment"},'// (used by pagination.sortBy, "body-cell-[name]" slot, ...)'),t(`
    `),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'desc'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// label for header"),t(`
    `),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Dessert (100g serving)'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// row Object property to determine value for this column"),t(`
    `),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'name'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// OR field: row => row.some.nested.prop,"),t(`

    `),n("span",{class:"token comment"},"// (optional) if we use visible-columns, this col will always be visible"),t(`
    `),n("span",{class:"token literal-property property"},"required"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) alignment"),t(`
    `),n("span",{class:"token literal-property property"},"align"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'left'"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) tell QTable you want this column sortable"),t(`
    `),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(`

    `),n("span",{class:"token comment"},"// (optional) compare function if you have"),t(`
    `),n("span",{class:"token comment"},"// some custom data or want a specific way to compare two rows"),t(`
    `),n("span",{class:"token comment"},"// --> note that rows with null/undefined as value will get auto sorted"),t(`
    `),n("span",{class:"token comment"},'// without calling this method (if you want to handle those as well, use "rawSort" instead)'),t(`
    `),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b"),n("span",{class:"token punctuation"},","),t(" rowA"),n("span",{class:"token punctuation"},","),t(" rowB")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// function return value:"),t(`
    `),n("span",{class:"token comment"},"//   * is less than 0 then sort a to an index lower than b, i.e. a comes first"),t(`
    `),n("span",{class:"token comment"},"//   * is 0 then leave a and b unchanged with respect to each other, but sorted with respect to all different elements"),t(`
    `),n("span",{class:"token comment"},"//   * is greater than 0 then sort b to an index lower than a, i.e. b comes first"),t(`

    `),n("span",{class:"token comment"},"// (optional) requires Quasar v2.13+"),t(`
    `),n("span",{class:"token comment"},"// compare function if you have"),t(`
    `),n("span",{class:"token comment"},"// some custom data or want a specific way to compare two rows"),t(`
    `),n("span",{class:"token comment"},`// --> note that there is an alternative "sort" method (above) if you don't`),t(`
    `),n("span",{class:"token comment"},"// want to handle (by yourself) rows with null/undefined as value"),t(`
    `),n("span",{class:"token function-variable function"},"rawSort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b"),n("span",{class:"token punctuation"},","),t(" rowA"),n("span",{class:"token punctuation"},","),t(" rowB")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},'// has the same return value as the alternative "sort" method above'),t(`

    `),n("span",{class:"token comment"},"// (optional) override 'column-sort-order' prop;"),t(`
    `),n("span",{class:"token comment"},"// sets column sort order: 'ad' (ascending-descending) or 'da' (descending-ascending)"),t(`
    `),n("span",{class:"token literal-property property"},"sortOrder"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'ad'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token comment"},"// or 'da'"),t(`

    `),n("span",{class:"token comment"},"// (optional) you can format the data with a function"),t(`
    `),n("span",{class:"token function-variable function"},"format"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("val"),n("span",{class:"token punctuation"},","),t(" row")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token interpolation"},[n("span",{class:"token interpolation-punctuation punctuation"},"${"),t("val"),n("span",{class:"token interpolation-punctuation punctuation"},"}")]),n("span",{class:"token string"},"%"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// one more format example:"),t(`
    `),n("span",{class:"token comment"},"// format: val => val"),t(`
    `),n("span",{class:"token comment"},'//   ? /* Unicode checkmark checked */ "\\u2611"'),t(`
    `),n("span",{class:"token comment"},'//   : /* Unicode checkmark unchecked */ "\\u2610",'),t(`

    `),n("span",{class:"token comment"},"// body td:"),t(`
    `),n("span",{class:"token literal-property property"},"style"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'width: 500px'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// or as Function --> style: row => ... (return String/Array/Object)"),t(`
    `),n("span",{class:"token literal-property property"},"classes"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'my-special-class'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token comment"},"// or as Function --> classes: row => ... (return String)"),t(`

    `),n("span",{class:"token comment"},"// header th:"),t(`
    `),n("span",{class:"token literal-property property"},"headerStyle"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'width: 500px'"),n("span",{class:"token punctuation"},","),t(`
    `),n("span",{class:"token literal-property property"},"headerClasses"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'my-special-class'"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calories'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'fat'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Fat (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'fat'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'carbs'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Carbs (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'carbs'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'protein'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Protein (g)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'protein'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'sodium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Sodium (mg)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'sodium'"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calcium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Calcium (%)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'calcium'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`
  `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token literal-property property"},"name"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'iron'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"label"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'Iron (%)'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"field"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'iron'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token literal-property property"},"sortable"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token function-variable function"},"sort"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[t("a"),n("span",{class:"token punctuation"},","),t(" b")]),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"=>"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("a"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token operator"},"-"),t(),n("span",{class:"token function"},"parseInt"),n("span",{class:"token punctuation"},"("),t("b"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"]")])]),n(f)]),_:1}),n("h2",{id:"basic-usage",class:"doc-heading doc-h2",onClick:r=>c(u)("basic-usage")},"Basic usage",8,["onClick"]),n(o,{title:"Basic",file:"Basic"}),n(o,{title:"Force dark mode",file:"Dark"}),n(o,{title:"Dense",file:"Dense"}),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("You can use the "),n("code",{class:"doc-token"},"dense"),t(" prop along with "),n("code",{class:"doc-token"},"$q.screen"),t(" to create a responsive behavior. Example: "),n("code",{class:"doc-token"},':dense="$q.screen.lt.md"'),t(". More info: "),n(d,{to:"/options/screen-plugin"},{default:k(()=>[t("Screen Plugin")]),_:1}),t(".")])]),n("h2",{id:"omitting-columns-definition",class:"doc-heading doc-h2",onClick:r=>c(u)("omitting-columns-definition")},"Omitting columns definition",8,["onClick"]),n("p",null,[t("You can omit specifying the "),n("code",{class:"doc-token"},"columns"),t(". QTable will infer the columns from the properties of the first row of the data. Note that labels are uppercased and sorting is enabled:")]),n(o,{title:"Infering columns from data",file:"InferColumns"}),n("h2",{id:"sticky-header-column",class:"doc-heading doc-h2",onClick:r=>c(u)("sticky-header-column")},"Sticky header/column",8,["onClick"]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[t("Sticky headers and columns are achieved through CSS with "),n("code",{class:"doc-token"},"position: sticky"),t(". This is NOT supported on all browsers. Check "),n(d,{to:"https://caniuse.com/#search=sticky"},{default:k(()=>[t("caniuse.com")]),_:1}),t(" before using this technique.")])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("Pay attention to the code in the “style” section in the following examples, especially around "),n("code",{class:"doc-token"},"position: sticky"),t(".")])]),n(o,{title:"Sticky header",file:"StickyHeader"}),n(o,{title:"Sticky first column",file:"StickyColumn"}),n(o,{title:"Sticky last column",file:"StickyLastColumn"}),n(o,{title:"Sticky header and column",file:"StickyHeaderAndColumn"}),n(o,{title:"Sticky header and last column",file:"StickyHeaderAndLastColumn"}),n("h2",{id:"separators",class:"doc-heading doc-h2",onClick:r=>c(u)("separators")},"Separators",8,["onClick"]),n(o,{title:"Separators",file:"Separators"}),n("h2",{id:"styling",class:"doc-heading doc-h2",onClick:r=>c(u)("styling")},"Styling",8,["onClick"]),n(o,{title:"Custom column",file:"CustomColumn"}),n(o,{title:"Custom coloring",file:"CustomColor"}),n(o,{title:"No header/footer",file:"NoHeaderFooter"}),n("h2",{id:"virtual-scrolling",class:"doc-heading doc-h2",onClick:r=>c(u)("virtual-scrolling")},"Virtual scrolling",8,["onClick"]),n("p",null,[t("Notice that when enabling virtual scroll you will need to specify the "),n("code",{class:"doc-token"},"table-style"),t(" (with a max-height) prop. In the example below, we are also forcing QTable to display all rows at once (note the use of "),n("code",{class:"doc-token"},"pagination"),t(" and "),n("code",{class:"doc-token"},"rows-per-page-options"),t(" props).")]),n(o,{title:"Basic virtual scroll",file:"VirtscrollBasic"}),n("p",null,"You can dynamically load new rows when scroll reaches the end:"),n(o,{title:"Dynamic loading virtual scroll",file:"VirtscrollDynamic"}),n("p",null,"You can have both virtual scroll and pagination:"),n(o,{title:"Virtual scroll and pagination",file:"VirtscrollPagination"}),n("p",null,[t("The example below shows how virtual scroll can be used along with a sticky header. Notice the "),n("code",{class:"doc-token"},"virtual-scroll-sticky-start"),t(" prop which is set to the header height.")]),n(o,{title:"Virtual scroll with sticky header",file:"VirtscrollSticky"}),n("p",null,"There are 2 utility CSS classes that control VirtualScroll size calculation:"),n("ul",null,[n("li",null,[t("Use "),n("code",{class:"doc-token"},"q-virtual-scroll--with-prev"),t(" class on an element rendered by the VirtualScroll to indicate that the element should be grouped with the previous one (main use case is for multiple table rows generated from the same row of data).")]),n("li",null,[t("Use "),n("code",{class:"doc-token"},"q-virtual-scroll--skip"),t(" class on an element rendered by the VirtualScroll to indicate that the element’s size should be ignored in size calculations.")])]),n(o,{title:"Virtual scroll with multiple rows for a data row",file:"VirtscrollMultipleRows"}),n("h2",{id:"selection",class:"doc-heading doc-h2",onClick:r=>c(u)("selection")},"Selection",8,["onClick"]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[t("The property "),n("code",{class:"doc-token"},"row-key"),t(" must be set in order for selection to work properly.")])]),n(o,{title:"Single selection",file:"SingleSelection"}),n(o,{title:"Multiple selection",file:"MultipleSelection"}),n(o,{title:"Selection cell slots",file:"SelectionSlots"}),n(o,{title:"Selection cell slots with range selection",file:"SelectionSlotsRange"}),n(o,{title:"Custom multiple selection",file:"CustomSelection"}),n("h2",{id:"visible-columns-custom-top-fullscreen",class:"doc-heading doc-h2",onClick:r=>c(u)("visible-columns-custom-top-fullscreen")},"Visible columns, custom top, fullscreen",8,["onClick"]),n("p",null,[t("Please note that columns marked as "),n("code",{class:"doc-token"},"required"),t(" (in the column definition) cannot be toggled and are always visible.")]),n(o,{title:"Visible columns, custom top and fullscreen",file:"VisibleColumns"}),n(o,{title:"Visible columns",file:"VisibleColumns2"}),n("h2",{id:"popup-editing",class:"doc-heading doc-h2",onClick:r=>c(u)("popup-editing")},"Popup editing",8,["onClick"]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("Below is an example with the user being able to edit “in place” with the help of "),n("strong",null,"QPopupEdit"),t(" component. Please note that we are using the "),n("code",{class:"doc-token"},"body"),t(" scoped slot. "),n("strong",null,"QPopupEdit"),t(" won’t work with cell scoped slots.")])]),n(o,{title:"Popup editing",file:"PopupEditing"}),n("h2",{id:"grid-style",class:"doc-heading doc-h2",onClick:r=>c(u)("grid-style")},"Grid style",8,["onClick"]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("You can use the "),n("code",{class:"doc-token"},"grid"),t(" prop along with "),n("code",{class:"doc-token"},"$q.screen"),t(" to create a responsive behavior. Example: "),n("code",{class:"doc-token"},':grid="$q.screen.lt.md"'),t(". More info: "),n(d,{to:"/options/screen-plugin"},{default:k(()=>[t("Screen Plugin")]),_:1}),t(".")])]),n("p",null,"In the example below, we let QTable deal with displaying the grid mode (not using the specific slot):"),n(o,{title:"Grid style",file:"GridStyle"}),n(o,{title:"Grid with header",file:"GridHeader"}),n(o,{title:"Colored grid style",file:"GridStyleColored"}),n(o,{title:"Masonry like grid",file:"GridMasonry"}),n("p",null,"However, if you want to fully customize the content, check the example below, where:"),n("ul",null,[n("li",null,[t("We are using a Vue scoped slot called "),n("code",{class:"doc-token"},"item"),t(" to define how each record (the equivalent of a row in non-grid mode) should look. This allows you total freedom.")]),n("li",null,"We are using multiple selection.")]),n(o,{title:"Grid style with slot",file:"GridStyleSlot"}),n("h2",{id:"expanding-rows",class:"doc-heading doc-h2",onClick:r=>c(u)("expanding-rows")},"Expanding rows",8,["onClick"]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[t("Add unique (distinct) "),n("code",{class:"doc-token"},"key"),t(" on QTr if you generate more than one QTr from a row in data.")])]),n(o,{title:"Internal expansion model",file:"ExpandedRowInternal"}),n("p",null,"An external expansion model can also be used:"),n(o,{title:"External expansion model",file:"ExpandedRowExternal"}),n("p",null,"If you are using virtual scroll with QTable, you should know that there are 2 utility CSS classes that control VirtualScroll size calculation:"),n("ul",null,[n("li",null,[t("Use "),n("code",{class:"doc-token"},"q-virtual-scroll--with-prev"),t(" class on an element rendered by the VirtualScroll to indicate that the element should be grouped with the previous one (main use case is for multiple table rows generated from the same row of data).")]),n("li",null,[t("Use "),n("code",{class:"doc-token"},"q-virtual-scroll--skip"),t(" class on an element rendered by the VirtualScroll to indicate that the element’s size should be ignored in size calculations.")])]),n(o,{title:"Virtual scroll with expansion model",file:"VirtscrollExpandedRow"}),n("h2",{id:"before-after-slots",class:"doc-heading doc-h2",onClick:r=>c(u)("before-after-slots")},"Before/after slots",8,["onClick"]),n(o,{title:"Before/After slots (header/footer)",file:"BeforeAfterHeaderFooter"}),n("h2",{id:"pagination",class:"doc-heading doc-h2",onClick:r=>c(u)("pagination")},"Pagination",8,["onClick"]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("When "),n("code",{class:"doc-token"},"pagination"),t(" has a property named "),n("code",{class:"doc-token"},"rowsNumber"),t(", then this means that you’ll be configuring Table for "),n("strong",null,"server"),t("-side pagination (& sorting & filtering). See "),n("em",null,"“Server side pagination, filter and sorting”"),t(" section.")])]),n("p",null,"Below are two examples of handling the pagination (and sorting and rows per page)."),n("p",null,"The first example highlights how to configure the initial pagination:"),n(o,{title:"Initial pagination",file:"PaginationInitial"}),n("p",null,"The second example uses the “v-model:pagination” directive because we want to access its current value at any time. A use-case for the technique below can be to control the pagination from outside of QTable."),n(o,{title:"Synchronized pagination",file:"PaginationSync"}),n("h2",{id:"pagination-slot",class:"doc-heading doc-h2",onClick:r=>c(u)("pagination-slot")},"Pagination slot",8,["onClick"]),n("p",null,"For learning purposes, we will customize the pagination controls with the default controls in order to help you get started with your own."),n(o,{title:"Pagination slot",file:"PaginationSlot"}),n("h2",{id:"loading-state",class:"doc-heading doc-h2",onClick:r=>c(u)("loading-state")},"Loading state",8,["onClick"]),n(o,{title:"Default loading",file:"Loading"}),n(o,{title:"Custom loading state",file:"CustomLoading"}),n("h2",{id:"custom-top",class:"doc-heading doc-h2",onClick:r=>c(u)("custom-top")},"Custom top",8,["onClick"]),n(o,{title:"Custom top with add/remove row",file:"CustomTop"}),n("h2",{id:"body-slots",class:"doc-heading doc-h2",onClick:r=>c(u)("body-slots")},"Body slots",8,["onClick"]),n("p",null,"The example below shows how you can use a slot to customize the entire row:"),n(o,{title:"Body slot",file:"SlotBody"}),n("p",null,"Below, we use a slot which gets applied to each body cell:"),n(o,{title:"Body-cell slot",file:"SlotBodyCell"}),n("p",null,[t("We can also customize only one particular column only. The syntax for this slot is "),n("code",{class:"doc-token"},"body-cell-[name]"),t(", where "),n("code",{class:"doc-token"},"[name]"),t(" should be replaced by the property of each row which is used as the row-key.")]),n(o,{title:"Body-cell-[name] slot",file:"SlotBodyCellName"}),n("h2",{id:"header-slots",class:"doc-heading doc-h2",onClick:r=>c(u)("header-slots")},"Header slots",8,["onClick"]),n("p",null,"The example below shows how you can use a slot to customize the entire header row:"),n(o,{title:"Header slot",file:"SlotHeader"}),n("p",null,"Below, we use a slot which gets applied to each header cell:"),n(o,{title:"Header-cell slot",file:"SlotHeaderCell"}),n("p",null,[t("We can also customize only one particular header cell only. The syntax for this slot is "),n("code",{class:"doc-token"},"header-cell-[name]"),t(", where "),n("code",{class:"doc-token"},"[name]"),t(" should be replaced by the property of each row which is used as the row-key.")]),n(o,{title:"Header-cell-[name] slot",file:"SlotHeaderCellName"}),n("h2",{id:"no-data",class:"doc-heading doc-h2",onClick:r=>c(u)("no-data")},"No data",8,["onClick"]),n(o,{title:"No Data Label",file:"NoData"}),n("p",null,"There is also a “no-data” scoped slot (see below) that you can also to customize the messages for both when a filter doesn’t returns any results or the table has no data to display. Also type something into the “Search” input."),n(o,{title:"No Data Slot",file:"NoDataSlot"}),n("h2",{id:"handling-bottom-layer",class:"doc-heading doc-h2",onClick:r=>c(u)("handling-bottom-layer")},"Handling bottom layer",8,["onClick"]),n("p",null,"There are a few properties that you can use to hide the bottom layer or specific parts of it. You can play with it below:"),n(o,{title:"Hiding bottom layer",file:"HideBottom"}),n("h2",{id:"custom-sorting",class:"doc-heading doc-h2",onClick:r=>c(u)("custom-sorting")},"Custom sorting",8,["onClick"]),n(o,{title:"Custom sorting",file:"CustomSorting"}),n("h2",{id:"responsive-tables",class:"doc-heading doc-h2",onClick:r=>c(u)("responsive-tables")},"Responsive tables",8,["onClick"]),n("p",null,[t("In order to create responsive tables, we have two tools at our disposal: "),n("code",{class:"doc-token"},"dense"),t(" and "),n("code",{class:"doc-token"},"grid"),t(" properties. We can connect these with "),n("code",{class:"doc-token"},"$q.screen"),t(". More info: "),n(d,{to:"/options/screen-plugin"},{default:k(()=>[t("Screen Plugin")]),_:1}),t(".")]),n("p",null,[t("First example below uses "),n("code",{class:"doc-token"},"$q.screen.lt.md"),t(" (for enabling dense mode) and the second examples uses "),n("code",{class:"doc-token"},"$q.screen.xs"),t(" to enable grid mode, so play with browser width to see them in action.")]),n(o,{title:"Using dense prop",file:"ResponsiveDense"}),n(o,{title:"Using grid prop",file:"ResponsiveGrid"}),n("h2",{id:"server-side-pagination-filter-and-sorting",class:"doc-heading doc-h2",onClick:r=>c(u)("server-side-pagination-filter-and-sorting")},"Server side pagination, filter and sorting",8,["onClick"]),n("p",null,[t("When your database contains a big number of rows for a Table, obviously it’s not feasible to load them all for multiple reasons (memory, UI rendering performance, …). Instead, you can load only a Table page. Whenever the user wants to navigate to another Table page, or wants to sort by a column or wants to filter the Table, a "),n("strong",null,"request"),t(" is sent to the "),n("strong",null,"server"),t(" to fetch the partially paged data.")]),n("ol",null,[n("li",null,[n("p",null,[t("First step to enable this behavior is to specify "),n("code",{class:"doc-token"},"pagination"),t(" prop, which MUST contain "),n("code",{class:"doc-token"},"rowsNumber"),t(". QTable needs to know the total number of rows available in order to correctly render the pagination links. Should filtering cause the "),n("code",{class:"doc-token"},"rowsNumber"),t(" to change then it must be modified dynamically.")])]),n("li",null,[n("p",null,[t("Second step is to listen for "),n("code",{class:"doc-token"},"@request"),t(" event on QTable. This event is triggered when data needs to be fetched from the "),n("strong",null,"server"),t(" because either page number or sorting or filtering changed.")])]),n("li",null,[n("p",null,[t("It’s best that you also specify the "),n("code",{class:"doc-token"},"loading"),t(" prop in order to notify the user that a background process is in progress.")])])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,"In the example below, steps have been taken to emulate an ajax call to a server. While the concepts are similar, if you use this code you will need to make the appropriate changes to connect to your own data source.")]),n(o,{title:"Synchronizing with server",file:"Synchronizing"}),n("h2",{id:"exporting-data",class:"doc-heading doc-h2",onClick:r=>c(u)("exporting-data")},"Exporting data",8,["onClick"]),n("p",null,[t("Below is an example of a naive csv encoding and then exporting table data by using the "),n(d,{to:"/quasar-utils/other-utils#export-file"},{default:k(()=>[t("exportFile")]),_:1}),t(" Quasar util. The browser should trigger a file download. For a more professional approach in regards to encoding we do recommend using "),n(d,{to:"https://csv.js.org/parse/"},{default:k(()=>[t("csv-parse")]),_:1}),t(" and "),n(d,{to:"https://csv.js.org/stringify/"},{default:k(()=>[t("csv-stringify")]),_:1}),t(" packages.")]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("You could also make use of the "),n("code",{class:"doc-token"},"filteredSortedRows"),t(" internal computed property of QTable should you want to export the user filtered + sorted data.")])]),n(o,{title:"Export to csv",file:"ExportCsv"}),n("h2",{id:"keyboard-navigation",class:"doc-heading doc-h2",onClick:r=>c(u)("keyboard-navigation")},"Keyboard navigation",8,["onClick"]),n("p",null,[t("Below is an example of keyboard navigation in the table using selected row. Use "),n("code",{class:"doc-token"},"ArrowUp"),t(", "),n("code",{class:"doc-token"},"ArrowDown"),t(", "),n("code",{class:"doc-token"},"PageUp"),t(", "),n("code",{class:"doc-token"},"PageDown"),t(", "),n("code",{class:"doc-token"},"Home"),t(" and "),n("code",{class:"doc-token"},"End"),t(" keys to navigate.")]),n(o,{title:"Keyboard navigation",file:"KeyboardNavigation"})]}),_:1},C))}}},v=$.setup;$.setup=(b,y)=>{const g=q();return(g.modules||(g.modules=new Set)).add("src/pages/vue-components/table.md"),v?v(b,y):void 0};const nn=B($,[["__file","table.md"]]);export{nn as default};
