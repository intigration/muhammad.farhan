import{provide as F,mergeProps as D,withCtx as u,createTextVNode as o,createVNode as i,unref as c,useSSRContext as Q}from"vue";import{ssrRenderComponent as n}from"vue/server-renderer";import{c as d}from"./page-utils-C-QWsEHe.js";import{D as A,a as p}from"./DocPage-DKr-0pQn.js";import{D as l}from"./DocExample-BcaABDtE.js";import{D as v}from"./DocApi-Df9ryd6x.js";import{_ as N}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const g={__name:"file",__ssrInlineRender:!0,setup(m){F("_q_ex",{name:"QFile"});const f=[{name:"Uploader",category:"Vue Components",path:"/vue-components/uploader"},{name:"Input Textfield",category:"Form Components",path:"/vue-components/input"}],h=[{id:"qfile-api",title:"2. QFile API",deep:!0},{id:"design",title:"3. Design"},{id:"decorators",title:"3.1. Decorators",sub:!0},{id:"coloring",title:"3.2. Coloring",sub:!0},{id:"clearable",title:"3.3. Clearable",sub:!0},{id:"disable-and-readonly",title:"3.4. Disable and readonly",sub:!0},{id:"usage",title:"4. Usage"},{id:"basic",title:"4.1. Basic",sub:!0},{id:"appending-files",title:"4.2. Appending files",sub:!0},{id:"counters",title:"4.3. Counters",sub:!0},{id:"using-chips",title:"4.4. Using chips",sub:!0},{id:"using-file-slot",title:"4.5. Using file slot",sub:!0},{id:"restricting-files",title:"4.6. Restricting files",sub:!0},{id:"native-form-submit",title:"4.7. Native form submit",sub:!0}];return(x,k,y,w)=>{k(n(A,D({title:"File Picker",desc:"The QFile Vue component is used as a file picker.",heading:"","edit-link":"vue-components/file",toc:h,related:f},w),{default:u((R,t,a,e)=>{if(t)t(`<p${e}>QFile is a component which handles the user interaction for picking file(s).</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>If you also want a component to handle the upload for you, please consider using `),t(n(p,{to:"/vue-components/uploader"},{default:u((s,r,$,C)=>{if(r)r("QUploader");else return[o("QUploader")]}),_:1},a,e)),t(" instead.</p></div>"),t(n(v,{file:"QFile"},null,a,e)),t(`<h2 id="design" class="doc-heading doc-h2"${e}>Design</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>For your QFile you can use only one of the main designs (<code class="doc-token"${e}>filled</code>, <code class="doc-token"${e}>outlined</code>, <code class="doc-token"${e}>standout</code>, <code class="doc-token"${e}>borderless</code>). You cannot use multiple as they are self-exclusive.</p></div>`),t(n(l,{title:"Design Overview",file:"DesignOverview"},null,a,e)),t(`<h3 id="decorators" class="doc-heading doc-h3"${e}>Decorators</h3>`),t(n(l,{title:"Decorators",file:"Decorators"},null,a,e)),t(`<h3 id="coloring" class="doc-heading doc-h3"${e}>Coloring</h3>`),t(n(l,{title:"Coloring",file:"Coloring"},null,a,e)),t(`<h3 id="clearable" class="doc-heading doc-h3"${e}>Clearable</h3><p${e}>As a helper, you can use <code class="doc-token"${e}>clearable</code> prop so user can reset model to <code class="doc-token"${e}>null</code> through an appended icon. The second QFile in the example below is the equivalent of using <code class="doc-token"${e}>clearable</code>.</p>`),t(n(l,{title:"Clearable",file:"Clearable"},null,a,e)),t(`<h3 id="disable-and-readonly" class="doc-heading doc-h3"${e}>Disable and readonly</h3>`),t(n(l,{title:"Disable and readonly",file:"DisableReadonly"},null,a,e)),t(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Under the hood, QFile uses a native input. Due to browser security policy, it is not allowed to programmatically fill such an input with a value. As a result, even if you set v-model from the beginning to a value, the component will show those file(s) but the input tag itself won’t be filled in with that value. A user interaction (click/tap/<kbd${e}>ENTER</kbd> key/<kbd${e}>SPACE</kbd> key) is absolutely required in order for the native input to contain them. It’s best to always have the initial value of model set to <code class="doc-token"${e}>null</code> or <code class="doc-token"${e}>undefined/void 0</code>.</p></div><h3 id="basic" class="doc-heading doc-h3"${e}>Basic</h3>`),t(n(l,{title:"Single file",file:"BasicSingle"},null,a,e)),t(n(l,{title:"Multiple files",file:"BasicMultiple"},null,a,e)),t(`<h3 id="appending-files" class="doc-heading doc-h3"${e}>Appending files</h3><p${e}>By default, QFile replaces the model each time the user selects any files through the popup. However, when you are accepting multiple files (<code class="doc-token"${e}>multiple</code> prop) you can change this behavior and append the new selection to the model rather than replacing its old value.</p><p${e}>Below you can pick files multiple times and QFile will keep on appending them to the model:</p>`),t(n(l,{title:"Appending files",file:"AppendingFiles"},null,a,e)),t(`<h3 id="counters" class="doc-heading doc-h3"${e}>Counters</h3>`),t(n(l,{title:"Basic counter",file:"CounterBasic"},null,a,e)),t(n(l,{title:"Counter label",file:"CounterLabel"},null,a,e)),t(`<h3 id="using-chips" class="doc-heading doc-h3"${e}>Using chips</h3>`),t(n(l,{title:"With chips",file:"WithChips"},null,a,e)),t(`<h3 id="using-file-slot" class="doc-heading doc-h3"${e}>Using file slot</h3><p${e}>The example below highlights how you can customize the display of each file and even incorporate a possible upload progress indicator:</p>`),t(n(l,{title:"With progress indicator",file:"WithProgress"},null,a,e)),t(`<h3 id="restricting-files" class="doc-heading doc-h3"${e}>Restricting files</h3>`),t(n(l,{title:"Basic restrictions",file:"RestrictionBasic"},null,a,e)),t(`<p${e}>You can even combine the restrictions above.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>In the example above, we’re using <code class="doc-token"${e}>accept</code> property. Its value must be a comma separated list of unique file type specifiers. Maps to ‘accept’ attribute of native input type=file element. `),t(n(p,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers"},{default:u((s,r,$,C)=>{if(r)r("More info");else return[o("More info")]}),_:1},a,e)),t(`.</p></div><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Recommended format for the <code class="doc-token"${e}>accept</code> property is <code class="doc-token"${e}>&lt;mediatype&gt;/&lt;extension&gt;</code>. Examples: “image/png”, “image/png”. QFile uses an <code class="doc-token"${e}>&lt;input type=&quot;file&quot;&gt;</code> under the hood and it relies entirely on the host browser to trigger the file picker. If the <code class="doc-token"${e}>accept</code> property (that gets applied to the input) is not correct, no file picker will appear on screen or it will appear but it will accept all file types.</p></div><p${e}>You can also apply custom filters (which are executed after user picks files):</p>`),t(n(l,{title:"Filter",file:"RestrictionFilter"},null,a,e)),t(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QFile, otherwise formData will not contain it (if it should):</p>`),t(n(l,{title:"Native form",file:"NativeForm"},null,a,e));else return[i("p",null,"QFile is a component which handles the user interaction for picking file(s)."),i("div",{class:"doc-note doc-note--tip"},[i("p",{class:"doc-note__title"},"TIP"),i("p",null,[o("If you also want a component to handle the upload for you, please consider using "),i(p,{to:"/vue-components/uploader"},{default:u(()=>[o("QUploader")]),_:1}),o(" instead.")])]),i(v,{file:"QFile"}),i("h2",{id:"design",class:"doc-heading doc-h2",onClick:s=>c(d)("design")},"Design",8,["onClick"]),i("div",{class:"doc-note doc-note--warning"},[i("p",{class:"doc-note__title"},"WARNING"),i("p",null,[o("For your QFile you can use only one of the main designs ("),i("code",{class:"doc-token"},"filled"),o(", "),i("code",{class:"doc-token"},"outlined"),o(", "),i("code",{class:"doc-token"},"standout"),o(", "),i("code",{class:"doc-token"},"borderless"),o("). You cannot use multiple as they are self-exclusive.")])]),i(l,{title:"Design Overview",file:"DesignOverview"}),i("h3",{id:"decorators",class:"doc-heading doc-h3",onClick:s=>c(d)("decorators")},"Decorators",8,["onClick"]),i(l,{title:"Decorators",file:"Decorators"}),i("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:s=>c(d)("coloring")},"Coloring",8,["onClick"]),i(l,{title:"Coloring",file:"Coloring"}),i("h3",{id:"clearable",class:"doc-heading doc-h3",onClick:s=>c(d)("clearable")},"Clearable",8,["onClick"]),i("p",null,[o("As a helper, you can use "),i("code",{class:"doc-token"},"clearable"),o(" prop so user can reset model to "),i("code",{class:"doc-token"},"null"),o(" through an appended icon. The second QFile in the example below is the equivalent of using "),i("code",{class:"doc-token"},"clearable"),o(".")]),i(l,{title:"Clearable",file:"Clearable"}),i("h3",{id:"disable-and-readonly",class:"doc-heading doc-h3",onClick:s=>c(d)("disable-and-readonly")},"Disable and readonly",8,["onClick"]),i(l,{title:"Disable and readonly",file:"DisableReadonly"}),i("h2",{id:"usage",class:"doc-heading doc-h2",onClick:s=>c(d)("usage")},"Usage",8,["onClick"]),i("div",{class:"doc-note doc-note--warning"},[i("p",{class:"doc-note__title"},"WARNING"),i("p",null,[o("Under the hood, QFile uses a native input. Due to browser security policy, it is not allowed to programmatically fill such an input with a value. As a result, even if you set v-model from the beginning to a value, the component will show those file(s) but the input tag itself won’t be filled in with that value. A user interaction (click/tap/"),i("kbd",null,"ENTER"),o(" key/"),i("kbd",null,"SPACE"),o(" key) is absolutely required in order for the native input to contain them. It’s best to always have the initial value of model set to "),i("code",{class:"doc-token"},"null"),o(" or "),i("code",{class:"doc-token"},"undefined/void 0"),o(".")])]),i("h3",{id:"basic",class:"doc-heading doc-h3",onClick:s=>c(d)("basic")},"Basic",8,["onClick"]),i(l,{title:"Single file",file:"BasicSingle"}),i(l,{title:"Multiple files",file:"BasicMultiple"}),i("h3",{id:"appending-files",class:"doc-heading doc-h3",onClick:s=>c(d)("appending-files")},"Appending files",8,["onClick"]),i("p",null,[o("By default, QFile replaces the model each time the user selects any files through the popup. However, when you are accepting multiple files ("),i("code",{class:"doc-token"},"multiple"),o(" prop) you can change this behavior and append the new selection to the model rather than replacing its old value.")]),i("p",null,"Below you can pick files multiple times and QFile will keep on appending them to the model:"),i(l,{title:"Appending files",file:"AppendingFiles"}),i("h3",{id:"counters",class:"doc-heading doc-h3",onClick:s=>c(d)("counters")},"Counters",8,["onClick"]),i(l,{title:"Basic counter",file:"CounterBasic"}),i(l,{title:"Counter label",file:"CounterLabel"}),i("h3",{id:"using-chips",class:"doc-heading doc-h3",onClick:s=>c(d)("using-chips")},"Using chips",8,["onClick"]),i(l,{title:"With chips",file:"WithChips"}),i("h3",{id:"using-file-slot",class:"doc-heading doc-h3",onClick:s=>c(d)("using-file-slot")},"Using file slot",8,["onClick"]),i("p",null,"The example below highlights how you can customize the display of each file and even incorporate a possible upload progress indicator:"),i(l,{title:"With progress indicator",file:"WithProgress"}),i("h3",{id:"restricting-files",class:"doc-heading doc-h3",onClick:s=>c(d)("restricting-files")},"Restricting files",8,["onClick"]),i(l,{title:"Basic restrictions",file:"RestrictionBasic"}),i("p",null,"You can even combine the restrictions above."),i("div",{class:"doc-note doc-note--tip"},[i("p",{class:"doc-note__title"},"TIP"),i("p",null,[o("In the example above, we’re using "),i("code",{class:"doc-token"},"accept"),o(" property. Its value must be a comma separated list of unique file type specifiers. Maps to ‘accept’ attribute of native input type=file element. "),i(p,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers"},{default:u(()=>[o("More info")]),_:1}),o(".")])]),i("div",{class:"doc-note doc-note--warning"},[i("p",{class:"doc-note__title"},"WARNING"),i("p",null,[o("Recommended format for the "),i("code",{class:"doc-token"},"accept"),o(" property is "),i("code",{class:"doc-token"},"<mediatype>/<extension>"),o(". Examples: “image/png”, “image/png”. QFile uses an "),i("code",{class:"doc-token"},'<input type="file">'),o(" under the hood and it relies entirely on the host browser to trigger the file picker. If the "),i("code",{class:"doc-token"},"accept"),o(" property (that gets applied to the input) is not correct, no file picker will appear on screen or it will appear but it will accept all file types.")])]),i("p",null,"You can also apply custom filters (which are executed after user picks files):"),i(l,{title:"Filter",file:"RestrictionFilter"}),i("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:s=>c(d)("native-form-submit")},"Native form submit",8,["onClick"]),i("p",null,[o("When dealing with a native form which has an "),i("code",{class:"doc-token"},"action"),o(" and a "),i("code",{class:"doc-token"},"method"),o(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),i("code",{class:"doc-token"},"name"),o(" property on QFile, otherwise formData will not contain it (if it should):")]),i(l,{title:"Native form",file:"NativeForm"})]}),_:1},y))}}},b=g.setup;g.setup=(m,f)=>{const h=Q();return(h.modules||(h.modules=new Set)).add("src/pages/vue-components/file.md"),b?b(m,f):void 0};const Z=N(g,[["__file","file.md"]]);export{Z as default};
