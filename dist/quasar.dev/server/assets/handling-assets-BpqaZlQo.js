import{mergeProps as k,withCtx as d,createTextVNode as t,createVNode as s,unref as i,useSSRContext as w}from"vue";import{ssrRenderComponent as p}from"vue/server-renderer";import{c as n}from"./page-utils-C-QWsEHe.js";import{D as $,a as g}from"./DocPage-DKr-0pQn.js";import{_ as R}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const r={__name:"handling-assets",__ssrInlineRender:!0,setup(u){const l=[{id:"regular-assets-src-assets",title:"2. Regular assets - /src/assets"},{id:"asset-resolving-rules",title:"2.1. Asset Resolving Rules",sub:!0},{id:"static-assets-public",title:"3. Static Assets - /public"},{id:"more-info-with-vite",title:"4. More info with Vite"}];return(c,f,b,v)=>{f(p($,k({title:"App Handling Assets",desc:"(@quasar/app-vite) How to use regular app assets and static assets in a Quasar app.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/handling-assets",toc:l},v),{default:d((S,o,y,e)=>{if(o)o(`<p${e}>You will notice in the project structure we have two directories for assets: <code class="doc-token"${e}>/public/</code> and <code class="doc-token"${e}>/src/assets/</code>. What is the difference between them? Some are static assets while the others are processed and embedded by the build system.</p><p${e}>So let’s try to answer the question above. We’ll first talk about using regular assets then we’ll see what the difference is for static assets.</p><h2 id="regular-assets-src-assets" class="doc-heading doc-h2"${e}>Regular assets - /src/assets</h2><p${e}>In <code class="doc-token"${e}>*.vue</code> components, all your templates and CSS are parsed by <code class="doc-token"${e}>vue-html-loader</code> and <code class="doc-token"${e}>css-loader</code> to look for asset URLs. For example, in <code class="doc-token"${e}>&lt;img src=&quot;./logo.png&quot;&gt;</code> and <code class="doc-token"${e}>background: url(./logo.png)</code>, <code class="doc-token"${e}>&quot;./logo.png&quot;</code> is a relative asset path and will be resolved by Vite as a module dependency.</p><p${e}>Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Vite-processed assets inside <code class="doc-token"${e}>/src/assets</code>, along side other source files. In fact, you don’t even have to put them all in <code class="doc-token"${e}>/src/assets</code>: you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.</p><h3 id="asset-resolving-rules" class="doc-heading doc-h3"${e}>Asset Resolving Rules</h3><p${e}>Relative URLs, e.g. <code class="doc-token"${e}>./assets/logo.png</code> will be interpreted as a module dependency. They will be replaced with an auto-generated URL based on your Vite output configuration.</p><p${e}>URLs prefixed with <code class="doc-token"${e}>~</code> are treated as a module request, similar to <code class="doc-token"${e}>import &#39;some-module/image.png&#39;</code>. You need to use this prefix if you want to leverage Vite’s module resolving configurations. Quasar provides the <code class="doc-token"${e}>assets</code> alias out of the box, so it is recommended that you use it like this: <code class="doc-token"${e}>&lt;img src=&quot;~assets/logo.png&quot;&gt;</code>. Notice <code class="doc-token"${e}>~</code> in front of ‘assets’.</p><h2 id="static-assets-public" class="doc-heading doc-h2"${e}>Static Assets - /public</h2><p${e}>Root-relative URLs (e.g. <code class="doc-token"${e}>/logo.png</code> – where ‘/’ is your publicPath) or <code class="doc-token"${e}>logo.png</code> are not processed at all. This should be placed in <code class="doc-token"${e}>public/</code>. These won’t be processed at all. The content of the public folder is simply copied over to the distributable folder as-is.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>Assets vs Statics</p><p${e}>Files in the “assets” folder are only included in your build if they have a literal reference in one of your Vue files. Every file and folder from the “public” folder are copied into your production build as-is, no matter what.</p></div><div class="doc-note doc-note--danger"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>When not building a SPA/PWA/SSR, then <code class="doc-token"${e}>/public/icons/*</code> and <code class="doc-token"${e}>/public/favicon.ico</code> will NOT be embedded into your app because they would not serve any purpose. For example, Electron or Cordova apps do not require those files.</p></div><h2 id="more-info-with-vite" class="doc-heading doc-h2"${e}>More info with Vite</h2><p${e}>Please read Vite’s guide `),o(p(g,{to:"https://vitejs.dev/guide/assets.html"},{default:d((a,h,x,V)=>{if(h)h("here");else return[t("here")]}),_:1},y,e)),o(".</p>");else return[s("p",null,[t("You will notice in the project structure we have two directories for assets: "),s("code",{class:"doc-token"},"/public/"),t(" and "),s("code",{class:"doc-token"},"/src/assets/"),t(". What is the difference between them? Some are static assets while the others are processed and embedded by the build system.")]),s("p",null,"So let’s try to answer the question above. We’ll first talk about using regular assets then we’ll see what the difference is for static assets."),s("h2",{id:"regular-assets-src-assets",class:"doc-heading doc-h2",onClick:a=>i(n)("regular-assets-src-assets")},"Regular assets - /src/assets",8,["onClick"]),s("p",null,[t("In "),s("code",{class:"doc-token"},"*.vue"),t(" components, all your templates and CSS are parsed by "),s("code",{class:"doc-token"},"vue-html-loader"),t(" and "),s("code",{class:"doc-token"},"css-loader"),t(" to look for asset URLs. For example, in "),s("code",{class:"doc-token"},'<img src="./logo.png">'),t(" and "),s("code",{class:"doc-token"},"background: url(./logo.png)"),t(", "),s("code",{class:"doc-token"},'"./logo.png"'),t(" is a relative asset path and will be resolved by Vite as a module dependency.")]),s("p",null,[t("Since these assets may be inlined/copied/renamed during build, they are essentially part of your source code. This is why it is recommended to place Vite-processed assets inside "),s("code",{class:"doc-token"},"/src/assets"),t(", along side other source files. In fact, you don’t even have to put them all in "),s("code",{class:"doc-token"},"/src/assets"),t(": you can organize them based on the module/component using them. For example, you can put each component in its own directory, with its static assets right next to it.")]),s("h3",{id:"asset-resolving-rules",class:"doc-heading doc-h3",onClick:a=>i(n)("asset-resolving-rules")},"Asset Resolving Rules",8,["onClick"]),s("p",null,[t("Relative URLs, e.g. "),s("code",{class:"doc-token"},"./assets/logo.png"),t(" will be interpreted as a module dependency. They will be replaced with an auto-generated URL based on your Vite output configuration.")]),s("p",null,[t("URLs prefixed with "),s("code",{class:"doc-token"},"~"),t(" are treated as a module request, similar to "),s("code",{class:"doc-token"},"import 'some-module/image.png'"),t(". You need to use this prefix if you want to leverage Vite’s module resolving configurations. Quasar provides the "),s("code",{class:"doc-token"},"assets"),t(" alias out of the box, so it is recommended that you use it like this: "),s("code",{class:"doc-token"},'<img src="~assets/logo.png">'),t(". Notice "),s("code",{class:"doc-token"},"~"),t(" in front of ‘assets’.")]),s("h2",{id:"static-assets-public",class:"doc-heading doc-h2",onClick:a=>i(n)("static-assets-public")},"Static Assets - /public",8,["onClick"]),s("p",null,[t("Root-relative URLs (e.g. "),s("code",{class:"doc-token"},"/logo.png"),t(" – where ‘/’ is your publicPath) or "),s("code",{class:"doc-token"},"logo.png"),t(" are not processed at all. This should be placed in "),s("code",{class:"doc-token"},"public/"),t(". These won’t be processed at all. The content of the public folder is simply copied over to the distributable folder as-is.")]),s("div",{class:"doc-note doc-note--tip"},[s("p",{class:"doc-note__title"},"Assets vs Statics"),s("p",null,"Files in the “assets” folder are only included in your build if they have a literal reference in one of your Vue files. Every file and folder from the “public” folder are copied into your production build as-is, no matter what.")]),s("div",{class:"doc-note doc-note--danger"},[s("p",{class:"doc-note__title"},"WARNING"),s("p",null,[t("When not building a SPA/PWA/SSR, then "),s("code",{class:"doc-token"},"/public/icons/*"),t(" and "),s("code",{class:"doc-token"},"/public/favicon.ico"),t(" will NOT be embedded into your app because they would not serve any purpose. For example, Electron or Cordova apps do not require those files.")])]),s("h2",{id:"more-info-with-vite",class:"doc-heading doc-h2",onClick:a=>i(n)("more-info-with-vite")},"More info with Vite",8,["onClick"]),s("p",null,[t("Please read Vite’s guide "),s(g,{to:"https://vitejs.dev/guide/assets.html"},{default:d(()=>[t("here")]),_:1}),t(".")])]}),_:1},b))}}},m=r.setup;r.setup=(u,l)=>{const c=w();return(c.modules||(c.modules=new Set)).add("src/pages/quasar-cli-vite/handling-assets.md"),m?m(u,l):void 0};const Q=R(r,[["__file","handling-assets.md"]]);export{Q as default};
