import{mergeProps as q,withCtx as n,createTextVNode as o,unref as p,createVNode as e,useSSRContext as T}from"vue";import{ssrRenderComponent as d}from"vue/server-renderer";import{c as h}from"./page-utils-C-QWsEHe.js";import{D as j,a as i}from"./DocPage-DKr-0pQn.js";import{D as f}from"./DocTree-Kz2iQlb5.js";import{D as b}from"./DocPrerender-DPOnWPFO.js";import{C as k}from"./CopyButton-l3ndfN49.js";import{_ as C}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const v={__name:"ssr-upgrade-guide",__ssrInlineRender:!0,setup(S){const w=[{name:"Configuring SSR",category:"SSR mode",path:"/quasar-cli-webpack/developing-ssr/configuring-ssr"},{name:"ssrContext",category:"SSR mode",path:"/quasar-cli-webpack/developing-ssr/ssr-context"},{name:"SSR Middleware",category:"SSR mode",path:"/quasar-cli-webpack/developing-ssr/ssr-middleware"},{name:"SSR Production Export",category:"SSR mode",path:"/quasar-cli-webpack/developing-ssr/ssr-production-export"}],m=[{id:"upgrading-from-quasar-v1",title:"2. Upgrading from Quasar v1"},{id:"high-overview-of-the-improvements",title:"2.1. High overview of the improvements",sub:!0},{id:"the-src-ssr-folder",title:"2.2. The /src-ssr folder",sub:!0},{id:"performing-the-upgrade",title:"2.3. Performing the upgrade",sub:!0},{id:"tips",title:"2.4. Tips",sub:!0}],g={oldTree:{l:"src-ssr",c:[{l:"index.js",e:"Production Node webserver serving the app"},{l:"extension.js",e:"Common code for production & development server"}]},newTree:{l:"src-ssr",c:[{l:"middlewares/",e:"SSR middleware files"},{l:"production-export.js",e:"SSR webserver production export"}]}};return(Q,y,x,R)=>{y(d(j,q({title:"Upgrade guide on SSR",desc:"(@quasar/app-webpack) Upgrading instructions from Quasar v1 to v2 when dealing with SSR.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-ssr/ssr-upgrade-guide",toc:m,related:w},R),{default:n((V,t,c,r)=>{if(t)t(`<p${r}>This page refers only to upgrading a Quasar UI v1 app (with Vue 2) to a Quasar UI v2 one (with Vue 3).</p><h2 id="upgrading-from-quasar-v1" class="doc-heading doc-h2"${r}>Upgrading from Quasar v1</h2><p${r}>The SSR mode for Quasar v2 is an almost complete overhaul of the previous version, significantly improving the developer experience. Some of the changes were needed due to the architectural requirements of Vue 3.</p><p${r}>Please note that currently the only Nodejs supported server is `),t(d(i,{to:"https://expressjs.com/"},{default:n((l,s,u,a)=>{if(s)s("Expressjs");else return[o("Expressjs")]}),_:1},c,r)),t(`.</p><h3 id="high-overview-of-the-improvements" class="doc-heading doc-h3"${r}>High overview of the improvements</h3><ul${r}><li${r}>Introducing the concept of `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-middleware"},{default:n((l,s,u,a)=>{if(s)s("SSR middleware");else return[o("SSR middleware")]}),_:1},c,r)),t(` files, which also allows for HMR for them while on dev. This replaces the old <code class="doc-token"${r}>index.js</code> and <code class="doc-token"${r}>extension.js</code>.</li><li${r}>The exact same middleware can now run on both dev and production builds, not just the old “SSR Extension”.</li><li${r}>You can enable linting for SSR middlewares too.</li><li${r}>Due to the architecture of Vue 3, you now can (and need!) to define a SSR transformation for each of your custom Vue directives (Quasar supplied Vue directives are excluded from this).</li><li${r}><strong${r}>Out of the box support for Typescript</strong>. All .js files under <code class="doc-token"${r}>src-ssr</code> can be now rewritten as .ts. Make sure to read about `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-with-typescript"},{default:n((l,s,u,a)=>{if(s)s("SSR with Typescript");else return[o("SSR with Typescript")]}),_:1},c,r)),t(` for more information.</li></ul><h3 id="the-src-ssr-folder" class="doc-heading doc-h3"${r}>The /src-ssr folder</h3><p${r}>The <strong${r}>old</strong> structure:</p>`),t(d(f,{def:g.oldTree},null,c,r)),t(`<p${r}>The <strong${r}>NEW</strong> structure:</p>`),t(d(f,{def:g.newTree},null,c,r)),t(`<h3 id="performing-the-upgrade" class="doc-heading doc-h3"${r}>Performing the upgrade</h3><p${r}>The old <code class="doc-token"${r}>index.js</code> and <code class="doc-token"${r}>extension.js</code> have been replaced by the superior SSR middleware files. It would be a good idea to `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-middleware"},{default:n((l,s,u,a)=>{if(s)s("read about the SSR middleware");else return[o("read about the SSR middleware")]}),_:1},c,r)),t(` before diving in further.</p><p${r}>So here we go:</p><ol${r}><li${r}>We recommend that you save the content of your current <code class="doc-token"${r}>src-ssr</code> folder somewhere else.</li><li${r}>Remove and add back the Quasar SSR mode (<code class="doc-token"${r}>$ quasar mode remove ssr</code>, <code class="doc-token"${r}>$quasar mode add ssr</code>).</li><li${r}>Declare the middleware files under quasar.config file &gt; ssr &gt; middlewares: []. The array should look like this:</li></ol>`),t(d(p(b),null,{default:n((l,s,u,a)=>{if(s)s(`<pre class="doc-code"${a}><code${a}><span class="token literal-property property"${a}>middlewares</span><span class="token operator"${a}>:</span> <span class="token punctuation"${a}>[</span>
  ctx<span class="token punctuation"${a}>.</span>prod <span class="token operator"${a}>?</span> <span class="token string"${a}>&#39;compression&#39;</span> <span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;&#39;</span><span class="token punctuation"${a}>,</span>
  <span class="token string"${a}>&#39;render&#39;</span> <span class="token comment"${a}>// should always keep this one as last one</span>
<span class="token punctuation"${a}>]</span></code></pre>`),s(d(k,null,null,u,a));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token literal-property property"},"middlewares"),e("span",{class:"token operator"},":"),o(),e("span",{class:"token punctuation"},"["),o(`
  ctx`),e("span",{class:"token punctuation"},"."),o("prod "),e("span",{class:"token operator"},"?"),o(),e("span",{class:"token string"},"'compression'"),o(),e("span",{class:"token operator"},":"),o(),e("span",{class:"token string"},"''"),e("span",{class:"token punctuation"},","),o(`
  `),e("span",{class:"token string"},"'render'"),o(),e("span",{class:"token comment"},"// should always keep this one as last one"),o(`
`),e("span",{class:"token punctuation"},"]")])]),e(k)]}),_:1},c,r)),t(`<ol start="4"${r}><li${r}>You will then have to port the old logic by using the SSR middleware files, which should be really easy (since you’ll end up copy-pasting most of the old code into the middleware files).</li><li${r}>Review quasar.config file &gt; ssr properties. Most of the old props have been removed and replaced by `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr#quasar-config-js"},{default:n((l,s,u,a)=>{if(s)s("new ones");else return[o("new ones")]}),_:1},c,r)),t(`.</li></ol><p${r}>Also remember that the files that you create in the <code class="doc-token"${r}>src-ssr/middlewares</code> folder need to also be declared under quasar.config file &gt; ssr &gt; middlewares. This is because their order matters, just like how the order of applying any Expressjs middleware matters too. You can use the <code class="doc-token"${r}>$ quasar new ssrmiddleware &lt;name&gt;</code> command to speed things up.</p><p${r}>Always keep the original <code class="doc-token"${r}>render</code> middleware as last one in the list.</p><h3 id="tips" class="doc-heading doc-h3"${r}>Tips</h3><ul${r}><li${r}>You might want to check out the `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr"},{default:n((l,s,u,a)=>{if(s)s("new configuration");else return[o("new configuration")]}),_:1},c,r)),t(` properties available through quasar.config file &gt; ssr.</li><li${r}>You might want to check out the `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-context"},{default:n((l,s,u,a)=>{if(s)s("ssrContext");else return[o("ssrContext")]}),_:1},c,r)),t(` page which describes in detail what properties you can use from it.</li><li${r}>You might want to check out the `),t(d(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-production-export"},{default:n((l,s,u,a)=>{if(s)s("SSR Production Export");else return[o("SSR Production Export")]}),_:1},c,r)),t(" page which describes in detail what the production-export.js/ts can do for you.</li></ul>");else return[e("p",null,"This page refers only to upgrading a Quasar UI v1 app (with Vue 2) to a Quasar UI v2 one (with Vue 3)."),e("h2",{id:"upgrading-from-quasar-v1",class:"doc-heading doc-h2",onClick:l=>p(h)("upgrading-from-quasar-v1")},"Upgrading from Quasar v1",8,["onClick"]),e("p",null,"The SSR mode for Quasar v2 is an almost complete overhaul of the previous version, significantly improving the developer experience. Some of the changes were needed due to the architectural requirements of Vue 3."),e("p",null,[o("Please note that currently the only Nodejs supported server is "),e(i,{to:"https://expressjs.com/"},{default:n(()=>[o("Expressjs")]),_:1}),o(".")]),e("h3",{id:"high-overview-of-the-improvements",class:"doc-heading doc-h3",onClick:l=>p(h)("high-overview-of-the-improvements")},"High overview of the improvements",8,["onClick"]),e("ul",null,[e("li",null,[o("Introducing the concept of "),e(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-middleware"},{default:n(()=>[o("SSR middleware")]),_:1}),o(" files, which also allows for HMR for them while on dev. This replaces the old "),e("code",{class:"doc-token"},"index.js"),o(" and "),e("code",{class:"doc-token"},"extension.js"),o(".")]),e("li",null,"The exact same middleware can now run on both dev and production builds, not just the old “SSR Extension”."),e("li",null,"You can enable linting for SSR middlewares too."),e("li",null,"Due to the architecture of Vue 3, you now can (and need!) to define a SSR transformation for each of your custom Vue directives (Quasar supplied Vue directives are excluded from this)."),e("li",null,[e("strong",null,"Out of the box support for Typescript"),o(". All .js files under "),e("code",{class:"doc-token"},"src-ssr"),o(" can be now rewritten as .ts. Make sure to read about "),e(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-with-typescript"},{default:n(()=>[o("SSR with Typescript")]),_:1}),o(" for more information.")])]),e("h3",{id:"the-src-ssr-folder",class:"doc-heading doc-h3",onClick:l=>p(h)("the-src-ssr-folder")},"The /src-ssr folder",8,["onClick"]),e("p",null,[o("The "),e("strong",null,"old"),o(" structure:")]),e(f,{def:g.oldTree},null,8,["def"]),e("p",null,[o("The "),e("strong",null,"NEW"),o(" structure:")]),e(f,{def:g.newTree},null,8,["def"]),e("h3",{id:"performing-the-upgrade",class:"doc-heading doc-h3",onClick:l=>p(h)("performing-the-upgrade")},"Performing the upgrade",8,["onClick"]),e("p",null,[o("The old "),e("code",{class:"doc-token"},"index.js"),o(" and "),e("code",{class:"doc-token"},"extension.js"),o(" have been replaced by the superior SSR middleware files. It would be a good idea to "),e(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-middleware"},{default:n(()=>[o("read about the SSR middleware")]),_:1}),o(" before diving in further.")]),e("p",null,"So here we go:"),e("ol",null,[e("li",null,[o("We recommend that you save the content of your current "),e("code",{class:"doc-token"},"src-ssr"),o(" folder somewhere else.")]),e("li",null,[o("Remove and add back the Quasar SSR mode ("),e("code",{class:"doc-token"},"$ quasar mode remove ssr"),o(", "),e("code",{class:"doc-token"},"$quasar mode add ssr"),o(").")]),e("li",null,"Declare the middleware files under quasar.config file > ssr > middlewares: []. The array should look like this:")]),e(p(b),null,{default:n(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token literal-property property"},"middlewares"),e("span",{class:"token operator"},":"),o(),e("span",{class:"token punctuation"},"["),o(`
  ctx`),e("span",{class:"token punctuation"},"."),o("prod "),e("span",{class:"token operator"},"?"),o(),e("span",{class:"token string"},"'compression'"),o(),e("span",{class:"token operator"},":"),o(),e("span",{class:"token string"},"''"),e("span",{class:"token punctuation"},","),o(`
  `),e("span",{class:"token string"},"'render'"),o(),e("span",{class:"token comment"},"// should always keep this one as last one"),o(`
`),e("span",{class:"token punctuation"},"]")])]),e(k)]),_:1}),e("ol",{start:"4"},[e("li",null,"You will then have to port the old logic by using the SSR middleware files, which should be really easy (since you’ll end up copy-pasting most of the old code into the middleware files)."),e("li",null,[o("Review quasar.config file > ssr properties. Most of the old props have been removed and replaced by "),e(i,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr#quasar-config-js"},{default:n(()=>[o("new ones")]),_:1}),o(".")])]),e("p",null,[o("Also remember that the files that you create in the "),e("code",{class:"doc-token"},"src-ssr/middlewares"),o(" folder need to also be declared under quasar.config file > ssr > middlewares. This is because their order matters, just like how the order of applying any Expressjs middleware matters too. You can use the "),e("code",{class:"doc-token"},"$ quasar new ssrmiddleware <name>"),o(" command to speed things up.")]),e("p",null,[o("Always keep the original "),e("code",{class:"doc-token"},"render"),o(" middleware as last one in the list.")]),e("h3",{id:"tips",class:"doc-heading doc-h3",onClick:l=>p(h)("tips")},"Tips",8,["onClick"]),e("ul",null,[e("li",null,[o("You might want to check out the "),e(i,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr"},{default:n(()=>[o("new configuration")]),_:1}),o(" properties available through quasar.config file > ssr.")]),e("li",null,[o("You might want to check out the "),e(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-context"},{default:n(()=>[o("ssrContext")]),_:1}),o(" page which describes in detail what properties you can use from it.")]),e("li",null,[o("You might want to check out the "),e(i,{to:"/quasar-cli-webpack/developing-ssr/ssr-production-export"},{default:n(()=>[o("SSR Production Export")]),_:1}),o(" page which describes in detail what the production-export.js/ts can do for you.")])])]}),_:1},x))}}},$=v.setup;v.setup=(S,w)=>{const m=T();return(m.modules||(m.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-ssr/ssr-upgrade-guide.md"),$?$(S,w):void 0};const F=C(v,[["__file","ssr-upgrade-guide.md"]]);export{F as default};
