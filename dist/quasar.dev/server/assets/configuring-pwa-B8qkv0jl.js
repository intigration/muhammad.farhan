import{resolveComponent as M,mergeProps as C,withCtx as l,createTextVNode as a,unref as c,createVNode as n,useSSRContext as S}from"vue";import{ssrRenderComponent as p}from"vue/server-renderer";import{c as f}from"./page-utils-C-QWsEHe.js";import{D as P,a as m}from"./DocPage-DKr-0pQn.js";import{D as v}from"./DocTree-Kz2iQlb5.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as u}from"./CopyButton-l3ndfN49.js";import{_ as A}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const w={__name:"configuring-pwa",__ssrInlineRender:!0,setup(d){const h=[{name:"The quasar.config file",category:"Quasar CLI (with Vite)",path:"/quasar-cli-vite/quasar-config-file"}],$=[{id:"service-worker",title:"2. Service Worker"},{id:"quasar-config-file",title:"3. quasar.config file"},{id:"adding-your-own-meta-tags-in-index-html",title:"4. Adding your own meta tags in index.html"},{id:"picking-workbox-mode",title:"5. Picking Workbox mode"},{id:"generatesw",title:"5.1. generateSW",sub:!0},{id:"injectmanifest",title:"5.2. InjectManifest",sub:!0},{id:"configuring-manifest-file",title:"6. Configuring Manifest File"},{id:"pwa-checklist",title:"7. PWA Checklist"},{id:"reload-and-update-automatically",title:"8. Reload & Update Automatically"},{id:"filename-hashes-quirk",title:"9. Filename hashes quirk"}],y={tree:{l:"src-pwa",c:[{l:"register-service-worker.js",e:"(or .ts) UI code *managing* service worker"},{l:"manifest.json",e:"Your PWA manifest file"},{l:"custom-service-worker.js",e:"(or .ts) Optional custom service worker file (injectManifest mode ONLY)"}]}};return(T,q,W,j)=>{const b=M("q-badge");q(p(P,C({title:"Configuring PWA",desc:"(@quasar/app-vite) How to manage your Progressive Web Apps with Quasar CLI.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/developing-pwa/configuring-pwa",toc:$,related:h},j),{default:l((R,o,k,s)=>{if(o)o(`<h2 id="service-worker" class="doc-heading doc-h2"${s}>Service Worker</h2><p${s}>Adding PWA mode to a Quasar project means a new folder will be created: <code class="doc-token"${s}>/src-pwa</code>, which contains PWA specific files:</p>`),o(p(v,{def:y.tree},null,k,s)),o(`<p${s}>You can freely edit these files. Notice a few things:</p><ol${s}><li${s}><code class="doc-token"${s}>register-service-worker.[js|ts]</code> is automatically imported into your app (like any other /src file). It registers the service worker (created by Workbox or your custom one, depending on workbox plugin mode – quasar.config file &gt; pwa &gt; workboxPluginMode) and you can listen for Service Worker’s events. You can use ES6 code.</li><li${s}><code class="doc-token"${s}>custom-service-worker.[js|ts]</code> will be your service worker file ONLY if workbox plugin mode is set to “injectManifest” (quasar.config file &gt; pwa &gt; workboxMode: ‘injectManifest’). Otherwise, Quasar and Workbox will create a service-worker file for you.</li><li${s}>It makes sense to run `),o(p(m,{to:"https://developers.google.com/web/tools/lighthouse/"},{default:l((i,e,r,t)=>{if(e)e("Lighthouse");else return[a("Lighthouse")]}),_:1},k,s)),o(` tests on production builds only.</li></ol><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>Read more on <code class="doc-token"${s}>register-service-worker.[js|ts]</code> and how to interact with the Service Worker on `),o(p(m,{to:"/quasar-cli-vite/developing-pwa/handling-service-worker"},{default:l((i,e,r,t)=>{if(e)e("Handling Service Worker");else return[a("Handling Service Worker")]}),_:1},k,s)),o(` documentation page.</p></div><h2 id="quasar-config-file" class="doc-heading doc-h2"${s}>quasar.config file</h2><p${s}>This is the place where you can configure Workbox behavior and also tweak your manifest.json.</p>`),o(p(c(g),null,{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>workboxMode</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;generateSW&#39;</span><span class="token punctuation"${t}>,</span> <span class="token comment"${t}>// or &#39;injectManifest&#39;</span>
  <span class="token literal-property property"${t}>injectPwaMetaTags</span><span class="token operator"${t}>:</span> <span class="token boolean"${t}>true</span><span class="token punctuation"${t}>,</span> <span class="token comment"${t}>// boolean | (() =&gt; string)</span>
  <span class="token literal-property property"${t}>swFilename</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;sw.js&#39;</span><span class="token punctuation"${t}>,</span> <span class="token comment"${t}>// should be .js (as it&#39;s the distribution file, not the input file)</span>
  <span class="token literal-property property"${t}>manifestFilename</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;manifest.json&#39;</span><span class="token punctuation"${t}>,</span>
  <span class="token literal-property property"${t}>useCredentialsForManifestTag</span><span class="token operator"${t}>:</span> <span class="token boolean"${t}>false</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendGenerateSWOptions</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>cfg</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span><span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendInjectManifestOptions</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>cfg</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span><span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendManifestJson</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>json</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span><span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendPWACustomSWConf</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>esbuildConf</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span><span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span>

<span class="token literal-property property"${t}>sourceFiles</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>pwaRegisterServiceWorker</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;src-pwa/register-service-worker&#39;</span><span class="token punctuation"${t}>,</span>
  <span class="token literal-property property"${t}>pwaServiceWorker</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;src-pwa/custom-service-worker&#39;</span><span class="token punctuation"${t}>,</span>
  <span class="token literal-property property"${t}>pwaManifestFile</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;src-pwa/manifest.json&#39;</span><span class="token punctuation"${t}>,</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'generateSW'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// or 'injectManifest'"),a(`
  `),n("span",{class:"token literal-property property"},"injectPwaMetaTags"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// boolean | (() => string)"),a(`
  `),n("span",{class:"token literal-property property"},"swFilename"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'sw.js'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// should be .js (as it's the distribution file, not the input file)"),a(`
  `),n("span",{class:"token literal-property property"},"manifestFilename"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'manifest.json'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"useCredentialsForManifestTag"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendInjectManifestOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendManifestJson"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"json"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendPWACustomSWConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"esbuildConf"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token literal-property property"},"sourceFiles"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"pwaRegisterServiceWorker"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/register-service-worker'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"pwaServiceWorker"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/custom-service-worker'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"pwaManifestFile"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/manifest.json'"),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<p${s}>Should you want to tamper with the Vite config for UI in /src:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}>module<span class="token punctuation"${t}>.</span><span class="token function-variable function"${t}>exports</span> <span class="token operator"${t}>=</span> <span class="token keyword"${t}>function</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>ctx</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
  <span class="token keyword"${t}>return</span> <span class="token punctuation"${t}>{</span>
    <span class="token literal-property property"${t}>build</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
      <span class="token function"${t}>extendViteConf</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>viteConf</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
        <span class="token keyword"${t}>if</span> <span class="token punctuation"${t}>(</span>ctx<span class="token punctuation"${t}>.</span>mode<span class="token punctuation"${t}>.</span>pwa<span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
          <span class="token comment"${t}>// do something with ViteConf</span>
        <span class="token punctuation"${t}>}</span>
      <span class="token punctuation"${t}>}</span>
    <span class="token punctuation"${t}>}</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[a("module"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token function"},"extendViteConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"viteConf"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("ctx"),n("span",{class:"token punctuation"},"."),a("mode"),n("span",{class:"token punctuation"},"."),a("pwa"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
          `),n("span",{class:"token comment"},"// do something with ViteConf"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<p${s}>More information: `),o(p(m,{to:"https://developers.google.com/web/tools/workbox"},{default:l((i,e,r,t)=>{if(e)e("Workbox");else return[a("Workbox")]}),_:1},k,s)),o(`.</p><h2 id="adding-your-own-meta-tags-in-index-html" class="doc-heading doc-h2"${s}>Adding your own meta tags in index.html</h2><p${s}>Quasar CLI adds (dynamically) some PWA oriented meta tags into your index.html. Should you wish to customize the tags, first disable this behavior in the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>injectPwaMetaTags</span><span class="token operator"${t}>:</span> <span class="token boolean"${t}>false</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"injectPwaMetaTags"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<p${s}>Then, edit your <code class="doc-token"${s}>/index.html</code> file. The following are the actual meta tags that Quasar CLI injects dynamically:</p>`),o(p(c(g),null,{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>head</span><span class="token punctuation"${t}>&gt;</span></span>

  &lt;% if (ctx.mode.pwa) { %&gt;
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>theme-color<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>&lt;%= pwaManifest.theme_color %&gt;<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>link</span> <span class="token attr-name"${t}>rel</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>mask-icon<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>href</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/safari-pinned-tab.svg<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>color</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>&lt;%= pwaManifest.theme_color %&gt;<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-mobile-web-app-capable<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>yes<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-mobile-web-app-status-bar-style<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>default<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>msapplication-TileImage<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/ms-icon-144x144.png<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>msapplication-TileColor<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>#000000<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>meta</span> <span class="token attr-name"${t}>name</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-mobile-web-app-title<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>content</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>&lt;%= pwaManifest.name %&gt;<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>link</span> <span class="token attr-name"${t}>rel</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-touch-icon<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>href</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/apple-icon-120x120.png<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>link</span> <span class="token attr-name"${t}>rel</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-touch-icon<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>sizes</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>152x152<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>href</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/apple-icon-152x152.png<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>link</span> <span class="token attr-name"${t}>rel</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-touch-icon<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>sizes</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>167x167<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>href</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/apple-icon-167x167.png<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
    <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>link</span> <span class="token attr-name"${t}>rel</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>apple-touch-icon<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>sizes</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>180x180<span class="token punctuation"${t}>&quot;</span></span> <span class="token attr-name"${t}>href</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>icons/apple-icon-180x180.png<span class="token punctuation"${t}>&quot;</span></span><span class="token punctuation"${t}>&gt;</span></span>
  &lt;% } %&gt;

<span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;/</span>head</span><span class="token punctuation"${t}>&gt;</span></span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`

  <% if (ctx.mode.pwa) { %>
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("theme-color"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.theme_color %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("mask-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/safari-pinned-tab.svg"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"color"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.theme_color %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-capable"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("yes"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-status-bar-style"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("default"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("msapplication-TileImage"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/ms-icon-144x144.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("msapplication-TileColor"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("#000000"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-title"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.name %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-120x120.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("152x152"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-152x152.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("167x167"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-167x167.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("180x180"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-180x180.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  <% } %>

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("head")]),n("span",{class:"token punctuation"},">")])])]),n(u)]}),_:1},k,s)),o(`<p${s}>Notice that you have access to your PWA manifest through <code class="doc-token"${s}>pwaManifest</code> above.</p><p${s}>Alternatively, you can assign a function to injectPwaMetaTags like below:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token function"${t}>injectPwaMetaTags</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token keyword"${t}>return</span> <span class="token template-string"${t}><span class="token template-punctuation string"${t}>\`</span><span class="token string"${t}>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot;&gt;</span><span class="token template-punctuation string"${t}>\`</span></span>
      <span class="token operator"${t}>+</span> <span class="token template-string"${t}><span class="token template-punctuation string"${t}>\`</span><span class="token string"${t}>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;default&quot;&gt;</span><span class="token template-punctuation string"${t}>\`</span></span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"injectPwaMetaTags"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},'<meta name="apple-mobile-web-app-capable" content="yes">'),n("span",{class:"token template-punctuation string"},"`")]),a(`
      `),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},'<meta name="apple-mobile-web-app-status-bar-style" content="default">'),n("span",{class:"token template-punctuation string"},"`")]),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<h2 id="picking-workbox-mode" class="doc-heading doc-h2"${s}>Picking Workbox mode</h2><p${s}>There are two Workbox operating modes: <strong${s}>generateSW</strong> (default) and <strong${s}>injectManifest</strong>.</p><p${s}>Setting the mode that you want to use is done through the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>workboxMode</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;generateSW&#39;</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendGenerateSWOptions</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>cfg</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// configure workbox on generateSW</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span>

<span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>workboxMode</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;injectManifest&#39;</span><span class="token punctuation"${t}>,</span>
  <span class="token function"${t}>extendInjectManifestOptions</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>cfg</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// configure workbox on injectManifest</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'generateSW'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// configure workbox on generateSW"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'injectManifest'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendInjectManifestOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// configure workbox on injectManifest"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<h3 id="generatesw" class="doc-heading doc-h3"${s}>generateSW</h3><p${s}>When to use generateSW:</p><ul${s}><li${s}>You want to precache files.</li><li${s}>You have simple runtime configuration needs (e.g. the configuration allows you to define routes and strategies).</li></ul><p${s}>When NOT to use generateSW:</p><ul${s}><li${s}>You want to use other Service Worker features (i.e. Web Push).</li><li${s}>You want to import additional scripts or add additional logic.</li></ul><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>Please check the available workboxOptions for this mode on `),o(p(m,{to:"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.generateSW"},{default:l((i,e,r,t)=>{if(e)e("Workbox website");else return[a("Workbox website")]}),_:1},k,s)),o(`.</p></div><h3 id="injectmanifest" class="doc-heading doc-h3"${s}>InjectManifest</h3><p${s}>When to use InjectManifest:</p><ul${s}><li${s}>You want more control over your service worker.</li><li${s}>You want to precache files.</li><li${s}>You have more complex needs in terms of routing.</li><li${s}>You would like to use your service worker with other APIs (e.g. Web Push).</li></ul><p${s}>When NOT to use InjectManifest:</p><ul${s}><li${s}>You want the easiest path to adding a service worker to your site.</li></ul><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIPS</p><ul${s}><li${s}>If you want to use this mode, you will have to write the service worker (<code class="doc-token"${s}>/src-pwa/custom-service-worker.[js|ts]</code>) file by yourself.</li><li${s}>Please check the available workboxOptions for this mode on `),o(p(m,{to:"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.injectManifest"},{default:l((i,e,r,t)=>{if(e)e("Workbox website");else return[a("Workbox website")]}),_:1},k,s)),o(`.</li></ul></div><p${s}>The following snippet is the default code for a custom service worker (<code class="doc-token"${s}>/src-pwa/custom-service-worker.[js|ts]</code>) which mimics the behavior of <code class="doc-token"${s}>generateSW</code> mode:</p>`),o(p(c(g),null,{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>/*
 * This file (which will be your service worker)
 * is picked up by the build system ONLY if
 * quasar.config file &gt; pwa &gt; workboxMode is set to &quot;injectManifest&quot;
 */</span>

<span class="token keyword"${t}>import</span> <span class="token punctuation"${t}>{</span> clientsClaim <span class="token punctuation"${t}>}</span> <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;workbox-core&#39;</span>
<span class="token keyword"${t}>import</span> <span class="token punctuation"${t}>{</span> precacheAndRoute<span class="token punctuation"${t}>,</span> cleanupOutdatedCaches<span class="token punctuation"${t}>,</span> createHandlerBoundToURL <span class="token punctuation"${t}>}</span> <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;workbox-precaching&#39;</span>
<span class="token keyword"${t}>import</span> <span class="token punctuation"${t}>{</span> registerRoute<span class="token punctuation"${t}>,</span> NavigationRoute <span class="token punctuation"${t}>}</span> <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;workbox-routing&#39;</span>

self<span class="token punctuation"${t}>.</span><span class="token function"${t}>skipWaiting</span><span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span>
<span class="token function"${t}>clientsClaim</span><span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span>

<span class="token comment"${t}>// Use with precache injection</span>
<span class="token function"${t}>precacheAndRoute</span><span class="token punctuation"${t}>(</span>self<span class="token punctuation"${t}>.</span>__WB_MANIFEST<span class="token punctuation"${t}>)</span>

<span class="token function"${t}>cleanupOutdatedCaches</span><span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span>

<span class="token comment"${t}>// Non-SSR fallback to index.html</span>
<span class="token comment"${t}>// Production SSR fallback to offline.html (except for dev)</span>
<span class="token keyword"${t}>if</span> <span class="token punctuation"${t}>(</span>process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>MODE</span> <span class="token operator"${t}>!==</span> <span class="token string"${t}>&#39;ssr&#39;</span> <span class="token operator"${t}>||</span> process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>PROD</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
  <span class="token function"${t}>registerRoute</span><span class="token punctuation"${t}>(</span>
    <span class="token keyword"${t}>new</span> <span class="token class-name"${t}>NavigationRoute</span><span class="token punctuation"${t}>(</span>
      <span class="token function"${t}>createHandlerBoundToURL</span><span class="token punctuation"${t}>(</span>process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>PWA_FALLBACK_HTML</span><span class="token punctuation"${t}>)</span><span class="token punctuation"${t}>,</span>
      <span class="token punctuation"${t}>{</span> <span class="token literal-property property"${t}>denylist</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>[</span><span class="token regex"${t}><span class="token regex-delimiter"${t}>/</span><span class="token regex-source language-regex"${t}>sw\\.js$</span><span class="token regex-delimiter"${t}>/</span></span><span class="token punctuation"${t}>,</span> <span class="token regex"${t}><span class="token regex-delimiter"${t}>/</span><span class="token regex-source language-regex"${t}>workbox-(.)*\\.js$</span><span class="token regex-delimiter"${t}>/</span></span><span class="token punctuation"${t}>]</span> <span class="token punctuation"${t}>}</span>
    <span class="token punctuation"${t}>)</span>
  <span class="token punctuation"${t}>)</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},`/*
 * This file (which will be your service worker)
 * is picked up by the build system ONLY if
 * quasar.config file > pwa > workboxMode is set to "injectManifest"
 */`),a(`

`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" clientsClaim "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-core'"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" precacheAndRoute"),n("span",{class:"token punctuation"},","),a(" cleanupOutdatedCaches"),n("span",{class:"token punctuation"},","),a(" createHandlerBoundToURL "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-precaching'"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" registerRoute"),n("span",{class:"token punctuation"},","),a(" NavigationRoute "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-routing'"),a(`

self`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"skipWaiting"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token function"},"clientsClaim"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// Use with precache injection"),a(`
`),n("span",{class:"token function"},"precacheAndRoute"),n("span",{class:"token punctuation"},"("),a("self"),n("span",{class:"token punctuation"},"."),a("__WB_MANIFEST"),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token function"},"cleanupOutdatedCaches"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// Non-SSR fallback to index.html"),a(`
`),n("span",{class:"token comment"},"// Production SSR fallback to offline.html (except for dev)"),a(`
`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"!=="),a(),n("span",{class:"token string"},"'ssr'"),a(),n("span",{class:"token operator"},"||"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PROD"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"registerRoute"),n("span",{class:"token punctuation"},"("),a(`
    `),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"NavigationRoute"),n("span",{class:"token punctuation"},"("),a(`
      `),n("span",{class:"token function"},"createHandlerBoundToURL"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PWA_FALLBACK_HTML"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token literal-property property"},"denylist"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"sw\\.js$"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"workbox-(.)*\\.js$"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<h2 id="configuring-manifest-file" class="doc-heading doc-h2"${s}>Configuring Manifest File</h2><p${s}>The Manifest file is located at <code class="doc-token"${s}>/src-pwa/manifest.json</code>. You can freely edit it.</p><p${s}>Should you need to change it dynamically at build time, you can do so by editing the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token function"${t}>extendManifestJson</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>json</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// tamper with the json</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"extendManifestJson"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"json"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// tamper with the json"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<p${s}>Please read about the `),o(p(m,{to:"https://developer.mozilla.org/en-US/docs/Web/Manifest"},{default:l((i,e,r,t)=>{if(e)e("manifest config");else return[a("manifest config")]}),_:1},k,s)),o(` before diving in.</p><div class="doc-note doc-note--warning"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>Note that you don’t need to edit your index.html file (generated from <code class="doc-token"${s}>/index.html</code>) to link to the manifest file. Quasar CLI takes care of embedding the right things for you.</p></div><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>If your PWA is behind basic auth or requires an Authorization header, set quasar.config file &gt; pwa &gt; useCredentialsForManifestTag to <code class="doc-token"${s}>true</code> to include <code class="doc-token"${s}>crossorigin=&quot;use-credentials&quot;</code> on the manifest.json meta tag.</p></div><h2 id="pwa-checklist" class="doc-heading doc-h2"${s}>PWA Checklist</h2><p${s}>More info: `),o(p(m,{to:"https://web.dev/pwa-checklist/"},{default:l((i,e,r,t)=>{if(e)e("PWA Checklist");else return[a("PWA Checklist")]}),_:1},k,s)),o(`</p><div class="doc-note doc-note--danger"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>Do not run `),o(p(m,{to:"https://developers.google.com/web/tools/lighthouse/"},{default:l((i,e,r,t)=>{if(e)e("Lighthouse");else return[a("Lighthouse")]}),_:1},k,s)),o(" on your development build because at this stage the code is intentionally not optimized and contains embedded source maps (among many other things). See the "),o(p(m,{to:"/quasar-cli-vite/testing-and-auditing"},{default:l((i,e,r,t)=>{if(e)e("Testing and Auditing");else return[a("Testing and Auditing")]}),_:1},k,s)),o(` section of these docs for more information.</p></div><h2 id="reload-and-update-automatically" class="doc-heading doc-h2"${s}>Reload &amp; Update Automatically</h2><p${s}>For those who don’t want to manually reload the page when the service worker is updated <strong${s}>and are using the default generateSW workbox mode</strong>, Quasar CLI has configured Workbox to activate it at once. Should you need to disable this behavior:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>pwa</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token function"${t}>extendGenerateSWOptions</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>cfg</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    cfg<span class="token punctuation"${t}>.</span>skipWaiting <span class="token operator"${t}>=</span> <span class="token boolean"${t}>false</span>
    cfg<span class="token punctuation"${t}>.</span>clientsClaim <span class="token operator"${t}>=</span> <span class="token boolean"${t}>false</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    cfg`),n("span",{class:"token punctuation"},"."),a("skipWaiting "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"false"),a(`
    cfg`),n("span",{class:"token punctuation"},"."),a("clientsClaim "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"false"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<h2 id="filename-hashes-quirk" class="doc-heading doc-h2"${s}>Filename hashes quirk `),o(p(b,{label:"@quasar/app-vite v1.1+"},null,k,s)),o(`</h2><p${s}>Due to how Rollup builds the assets (through Vite), when you change any of your script source files (.js) this will also change the hash part of (almost) ALL .js files (ex: <code class="doc-token"${s}>454d87bd</code> in <code class="doc-token"${s}>assets/index.454d87bd.js</code>). The revision number of all assets will get changed in your service worker file and this means that when PWA updates it will re-download ALL your assets again. What a waste of bandwidth and such a longer time to get the PWA updated!</p><p${s}>By default, Vite builds all filenames <strong${s}>with the hash part</strong>. However, should you want your filenames to NOT contain the hash part, you need to edit the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),o(p(c(g),{title:"/quasar.config file"},{default:l((i,e,r,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>build</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>useFilenameHashes</span><span class="token operator"${t}>:</span> <span class="token boolean"${t}>false</span> <span class="token comment"${t}>// true by default</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(u,null,null,r,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"useFilenameHashes"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),a(),n("span",{class:"token comment"},"// true by default"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]}),_:1},k,s)),o(`<p${s}>When filename hashes are disabled it would be wise to also make sure that your webserver has cache set accordingly (as low as possible) to ensure consistent resource delivery to your clients that can’t use the PWA functionality.</p>`);else return[n("h2",{id:"service-worker",class:"doc-heading doc-h2",onClick:i=>c(f)("service-worker")},"Service Worker",8,["onClick"]),n("p",null,[a("Adding PWA mode to a Quasar project means a new folder will be created: "),n("code",{class:"doc-token"},"/src-pwa"),a(", which contains PWA specific files:")]),n(v,{def:y.tree},null,8,["def"]),n("p",null,"You can freely edit these files. Notice a few things:"),n("ol",null,[n("li",null,[n("code",{class:"doc-token"},"register-service-worker.[js|ts]"),a(" is automatically imported into your app (like any other /src file). It registers the service worker (created by Workbox or your custom one, depending on workbox plugin mode – quasar.config file > pwa > workboxPluginMode) and you can listen for Service Worker’s events. You can use ES6 code.")]),n("li",null,[n("code",{class:"doc-token"},"custom-service-worker.[js|ts]"),a(" will be your service worker file ONLY if workbox plugin mode is set to “injectManifest” (quasar.config file > pwa > workboxMode: ‘injectManifest’). Otherwise, Quasar and Workbox will create a service-worker file for you.")]),n("li",null,[a("It makes sense to run "),n(m,{to:"https://developers.google.com/web/tools/lighthouse/"},{default:l(()=>[a("Lighthouse")]),_:1}),a(" tests on production builds only.")])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("Read more on "),n("code",{class:"doc-token"},"register-service-worker.[js|ts]"),a(" and how to interact with the Service Worker on "),n(m,{to:"/quasar-cli-vite/developing-pwa/handling-service-worker"},{default:l(()=>[a("Handling Service Worker")]),_:1}),a(" documentation page.")])]),n("h2",{id:"quasar-config-file",class:"doc-heading doc-h2",onClick:i=>c(f)("quasar-config-file")},"quasar.config file",8,["onClick"]),n("p",null,"This is the place where you can configure Workbox behavior and also tweak your manifest.json."),n(c(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'generateSW'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// or 'injectManifest'"),a(`
  `),n("span",{class:"token literal-property property"},"injectPwaMetaTags"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// boolean | (() => string)"),a(`
  `),n("span",{class:"token literal-property property"},"swFilename"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'sw.js'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token comment"},"// should be .js (as it's the distribution file, not the input file)"),a(`
  `),n("span",{class:"token literal-property property"},"manifestFilename"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'manifest.json'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"useCredentialsForManifestTag"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendInjectManifestOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendManifestJson"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"json"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendPWACustomSWConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"esbuildConf"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token literal-property property"},"sourceFiles"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"pwaRegisterServiceWorker"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/register-service-worker'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"pwaServiceWorker"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/custom-service-worker'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token literal-property property"},"pwaManifestFile"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'src-pwa/manifest.json'"),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("p",null,"Should you want to tamper with the Vite config for UI in /src:"),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("module"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token function"},"extendViteConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"viteConf"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("ctx"),n("span",{class:"token punctuation"},"."),a("mode"),n("span",{class:"token punctuation"},"."),a("pwa"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
          `),n("span",{class:"token comment"},"// do something with ViteConf"),a(`
        `),n("span",{class:"token punctuation"},"}"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("p",null,[a("More information: "),n(m,{to:"https://developers.google.com/web/tools/workbox"},{default:l(()=>[a("Workbox")]),_:1}),a(".")]),n("h2",{id:"adding-your-own-meta-tags-in-index-html",class:"doc-heading doc-h2",onClick:i=>c(f)("adding-your-own-meta-tags-in-index-html")},"Adding your own meta tags in index.html",8,["onClick"]),n("p",null,[a("Quasar CLI adds (dynamically) some PWA oriented meta tags into your index.html. Should you wish to customize the tags, first disable this behavior in the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"injectPwaMetaTags"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("p",null,[a("Then, edit your "),n("code",{class:"doc-token"},"/index.html"),a(" file. The following are the actual meta tags that Quasar CLI injects dynamically:")]),n(c(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`

  <% if (ctx.mode.pwa) { %>
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("theme-color"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.theme_color %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("mask-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/safari-pinned-tab.svg"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"color"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.theme_color %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-capable"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("yes"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-status-bar-style"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("default"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("msapplication-TileImage"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/ms-icon-144x144.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("msapplication-TileColor"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("#000000"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("meta")]),a(),n("span",{class:"token attr-name"},"name"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-mobile-web-app-title"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"content"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("<%= pwaManifest.name %>"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-120x120.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("152x152"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-152x152.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("167x167"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-167x167.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("apple-touch-icon"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"sizes"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("180x180"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("icons/apple-icon-180x180.png"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  <% } %>

`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("head")]),n("span",{class:"token punctuation"},">")])])]),n(u)]),_:1}),n("p",null,[a("Notice that you have access to your PWA manifest through "),n("code",{class:"doc-token"},"pwaManifest"),a(" above.")]),n("p",null,"Alternatively, you can assign a function to injectPwaMetaTags like below:"),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"injectPwaMetaTags"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},'<meta name="apple-mobile-web-app-capable" content="yes">'),n("span",{class:"token template-punctuation string"},"`")]),a(`
      `),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},'<meta name="apple-mobile-web-app-status-bar-style" content="default">'),n("span",{class:"token template-punctuation string"},"`")]),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("h2",{id:"picking-workbox-mode",class:"doc-heading doc-h2",onClick:i=>c(f)("picking-workbox-mode")},"Picking Workbox mode",8,["onClick"]),n("p",null,[a("There are two Workbox operating modes: "),n("strong",null,"generateSW"),a(" (default) and "),n("strong",null,"injectManifest"),a(".")]),n("p",null,[a("Setting the mode that you want to use is done through the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'generateSW'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// configure workbox on generateSW"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"workboxMode"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'injectManifest'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token function"},"extendInjectManifestOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// configure workbox on injectManifest"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("h3",{id:"generatesw",class:"doc-heading doc-h3",onClick:i=>c(f)("generatesw")},"generateSW",8,["onClick"]),n("p",null,"When to use generateSW:"),n("ul",null,[n("li",null,"You want to precache files."),n("li",null,"You have simple runtime configuration needs (e.g. the configuration allows you to define routes and strategies).")]),n("p",null,"When NOT to use generateSW:"),n("ul",null,[n("li",null,"You want to use other Service Worker features (i.e. Web Push)."),n("li",null,"You want to import additional scripts or add additional logic.")]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("Please check the available workboxOptions for this mode on "),n(m,{to:"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.generateSW"},{default:l(()=>[a("Workbox website")]),_:1}),a(".")])]),n("h3",{id:"injectmanifest",class:"doc-heading doc-h3",onClick:i=>c(f)("injectmanifest")},"InjectManifest",8,["onClick"]),n("p",null,"When to use InjectManifest:"),n("ul",null,[n("li",null,"You want more control over your service worker."),n("li",null,"You want to precache files."),n("li",null,"You have more complex needs in terms of routing."),n("li",null,"You would like to use your service worker with other APIs (e.g. Web Push).")]),n("p",null,"When NOT to use InjectManifest:"),n("ul",null,[n("li",null,"You want the easiest path to adding a service worker to your site.")]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIPS"),n("ul",null,[n("li",null,[a("If you want to use this mode, you will have to write the service worker ("),n("code",{class:"doc-token"},"/src-pwa/custom-service-worker.[js|ts]"),a(") file by yourself.")]),n("li",null,[a("Please check the available workboxOptions for this mode on "),n(m,{to:"https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.injectManifest"},{default:l(()=>[a("Workbox website")]),_:1}),a(".")])])]),n("p",null,[a("The following snippet is the default code for a custom service worker ("),n("code",{class:"doc-token"},"/src-pwa/custom-service-worker.[js|ts]"),a(") which mimics the behavior of "),n("code",{class:"doc-token"},"generateSW"),a(" mode:")]),n(c(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},`/*
 * This file (which will be your service worker)
 * is picked up by the build system ONLY if
 * quasar.config file > pwa > workboxMode is set to "injectManifest"
 */`),a(`

`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" clientsClaim "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-core'"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" precacheAndRoute"),n("span",{class:"token punctuation"},","),a(" cleanupOutdatedCaches"),n("span",{class:"token punctuation"},","),a(" createHandlerBoundToURL "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-precaching'"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" registerRoute"),n("span",{class:"token punctuation"},","),a(" NavigationRoute "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'workbox-routing'"),a(`

self`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"skipWaiting"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token function"},"clientsClaim"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// Use with precache injection"),a(`
`),n("span",{class:"token function"},"precacheAndRoute"),n("span",{class:"token punctuation"},"("),a("self"),n("span",{class:"token punctuation"},"."),a("__WB_MANIFEST"),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token function"},"cleanupOutdatedCaches"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// Non-SSR fallback to index.html"),a(`
`),n("span",{class:"token comment"},"// Production SSR fallback to offline.html (except for dev)"),a(`
`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"!=="),a(),n("span",{class:"token string"},"'ssr'"),a(),n("span",{class:"token operator"},"||"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PROD"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"registerRoute"),n("span",{class:"token punctuation"},"("),a(`
    `),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"NavigationRoute"),n("span",{class:"token punctuation"},"("),a(`
      `),n("span",{class:"token function"},"createHandlerBoundToURL"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PWA_FALLBACK_HTML"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token literal-property property"},"denylist"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"sw\\.js$"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"workbox-(.)*\\.js$"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("h2",{id:"configuring-manifest-file",class:"doc-heading doc-h2",onClick:i=>c(f)("configuring-manifest-file")},"Configuring Manifest File",8,["onClick"]),n("p",null,[a("The Manifest file is located at "),n("code",{class:"doc-token"},"/src-pwa/manifest.json"),a(". You can freely edit it.")]),n("p",null,[a("Should you need to change it dynamically at build time, you can do so by editing the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"extendManifestJson"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"json"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// tamper with the json"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("p",null,[a("Please read about the "),n(m,{to:"https://developer.mozilla.org/en-US/docs/Web/Manifest"},{default:l(()=>[a("manifest config")]),_:1}),a(" before diving in.")]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[a("Note that you don’t need to edit your index.html file (generated from "),n("code",{class:"doc-token"},"/index.html"),a(") to link to the manifest file. Quasar CLI takes care of embedding the right things for you.")])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("If your PWA is behind basic auth or requires an Authorization header, set quasar.config file > pwa > useCredentialsForManifestTag to "),n("code",{class:"doc-token"},"true"),a(" to include "),n("code",{class:"doc-token"},'crossorigin="use-credentials"'),a(" on the manifest.json meta tag.")])]),n("h2",{id:"pwa-checklist",class:"doc-heading doc-h2",onClick:i=>c(f)("pwa-checklist")},"PWA Checklist",8,["onClick"]),n("p",null,[a("More info: "),n(m,{to:"https://web.dev/pwa-checklist/"},{default:l(()=>[a("PWA Checklist")]),_:1})]),n("div",{class:"doc-note doc-note--danger"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[a("Do not run "),n(m,{to:"https://developers.google.com/web/tools/lighthouse/"},{default:l(()=>[a("Lighthouse")]),_:1}),a(" on your development build because at this stage the code is intentionally not optimized and contains embedded source maps (among many other things). See the "),n(m,{to:"/quasar-cli-vite/testing-and-auditing"},{default:l(()=>[a("Testing and Auditing")]),_:1}),a(" section of these docs for more information.")])]),n("h2",{id:"reload-and-update-automatically",class:"doc-heading doc-h2",onClick:i=>c(f)("reload-and-update-automatically")},"Reload & Update Automatically",8,["onClick"]),n("p",null,[a("For those who don’t want to manually reload the page when the service worker is updated "),n("strong",null,"and are using the default generateSW workbox mode"),a(", Quasar CLI has configured Workbox to activate it at once. Should you need to disable this behavior:")]),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"pwa"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function"},"extendGenerateSWOptions"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"cfg"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    cfg`),n("span",{class:"token punctuation"},"."),a("skipWaiting "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"false"),a(`
    cfg`),n("span",{class:"token punctuation"},"."),a("clientsClaim "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token boolean"},"false"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("h2",{id:"filename-hashes-quirk",class:"doc-heading doc-h2",onClick:i=>c(f)("filename-hashes-quirk")},[a("Filename hashes quirk "),n(b,{label:"@quasar/app-vite v1.1+"})],8,["onClick"]),n("p",null,[a("Due to how Rollup builds the assets (through Vite), when you change any of your script source files (.js) this will also change the hash part of (almost) ALL .js files (ex: "),n("code",{class:"doc-token"},"454d87bd"),a(" in "),n("code",{class:"doc-token"},"assets/index.454d87bd.js"),a("). The revision number of all assets will get changed in your service worker file and this means that when PWA updates it will re-download ALL your assets again. What a waste of bandwidth and such a longer time to get the PWA updated!")]),n("p",null,[a("By default, Vite builds all filenames "),n("strong",null,"with the hash part"),a(". However, should you want your filenames to NOT contain the hash part, you need to edit the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(c(g),{title:"/quasar.config file"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"useFilenameHashes"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"false"),a(),n("span",{class:"token comment"},"// true by default"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(u)]),_:1}),n("p",null,"When filename hashes are disabled it would be wise to also make sure that your webserver has cache set accordingly (as low as possible) to ensure consistent resource delivery to your clients that can’t use the PWA functionality.")]}),_:1},W))}}},x=w.setup;w.setup=(d,h)=>{const $=S();return($.modules||($.modules=new Set)).add("src/pages/quasar-cli-vite/developing-pwa/configuring-pwa.md"),x?x(d,h):void 0};const K=A(w,[["__file","configuring-pwa.md"]]);export{K as default};
