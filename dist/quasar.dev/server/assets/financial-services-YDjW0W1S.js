import{provide as q,resolveComponent as P,mergeProps as Q,withCtx as l,createTextVNode as n,unref as u,createVNode as a,useSSRContext as C}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as m}from"./page-utils-C-QWsEHe.js";import{D as F,a as r}from"./DocPage-DKr-0pQn.js";import{D as $}from"./DocExample-BcaABDtE.js";import{D as v}from"./DocApi-Df9ryd6x.js";import{D as w}from"./DocPrerender-DPOnWPFO.js";import{C as h}from"./CopyButton-l3ndfN49.js";import{_ as L}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"financial-services",__ssrInlineRender:!0,setup(y){q("_q_ex",{name:"QAjaxBar"});const d=[{name:"Loading",category:"Quasar Plugins",path:"/quasar-plugins/loading"},{name:"Loading Bar",category:"Quasar Plugins",path:"/quasar-plugins/loading-bar"},{name:"Ajax Requests",category:"Quasar CLI (with Vite)",path:"/quasar-cli-vite/ajax-requests"},{name:"Ajax Requests",category:"Quasar CLI (with Webpack)",path:"/quasar-cli-webpack/ajax-requests"}],g=[{id:"qajaxbar-api",title:"2. QAjaxBar API",deep:!0},{id:"usage",title:"3. Usage"},{id:"basic",title:"3.1. Basic",sub:!0},{id:"ajax-filter",title:"3.2. Ajax filter",sub:!0},{id:"tips",title:"4. Tips"}];return(R,j,A,B)=>{const x=P("q-badge");j(i(F,Q({title:"Ajax Bar",desc:"The QAjaxBar Vue component displays a loading bar whenever an Ajax call is in progress.",heading:"","edit-link":"vue-components/financial-services",toc:g,related:d},B),{default:l((T,e,c,s)=>{if(e)e(`<p${s}>In most mobile apps and even some desktop apps, you will most likely have some API communication to a server via an `),e(i(r,{to:"https://en.wikipedia.org/wiki/Ajax_(programming)"},{default:l((p,o,k,t)=>{if(o)o("Ajax call");else return[n("Ajax call")]}),_:1},c,s)),e(`. Since these calls can take more than a second or two, it is good UX to offer the user feedback, when such an API call is being made. Which is where QAjaxBar comes into helping you out.</p><p${s}>QAjaxBar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well.</p><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>If youâ€™d like <strong${s}>a simpler and more convenient way</strong> to offer an Ajax Bar to your users, have a look at the `),e(i(r,{to:"/quasar-plugins/loading-bar"},{default:l((p,o,k,t)=>{if(o)o("Loading Bar Plugin");else return[n("Loading Bar Plugin")]}),_:1},c,s)),e(`, which is actually <strong${s}>the recommended way</strong>.</p></div>`),e(i(v,{file:"QAjaxBar"},null,c,s)),e(`<h2 id="usage" class="doc-heading doc-h2"${s}>Usage</h2><p${s}>The QAjaxBar component captures Ajax calls automatically (unless told not to).</p><p${s}>The example below triggers events manually for demonstrating purposes only. This one is set to appear at bottom (multiple positions available!) of the page, with a 10px size (default is different) and uses a custom color.</p><h3 id="basic" class="doc-heading doc-h3"${s}>Basic</h3>`),e(i($,{title:"Basic",file:"Basic"},null,c,s)),e(`<p${s}>Please check out the API section for all properties that you can use.</p><h3 id="ajax-filter" class="doc-heading doc-h3"${s}>Ajax filter `),e(i(x,{label:"v2.4.5+"},null,c,s)),e(`</h3><p${s}>Should you want QAjaxBar to trigger only for some URLs (and not for all, like in the default behavior), then you can use the <code class="doc-token"${s}>hijackFilter</code> property:</p>`),e(i(u(w),null,{default:l((p,o,k,t)=>{if(o)o(`<pre class="doc-code"${t}><code${t}><span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>template</span><span class="token punctuation"${t}>&gt;</span></span>
  <span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>q-ajax-bar</span> <span class="token attr-name"${t}>:hijack-filter</span><span class="token attr-value"${t}><span class="token punctuation attr-equals"${t}>=</span><span class="token punctuation"${t}>&quot;</span>myFilterFn<span class="token punctuation"${t}>&quot;</span></span> <span class="token punctuation"${t}>/&gt;</span></span>
<span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;/</span>template</span><span class="token punctuation"${t}>&gt;</span></span>

<span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>script</span><span class="token punctuation"${t}>&gt;</span></span><span class="token script"${t}><span class="token language-javascript"${t}>
<span class="token keyword"${t}>export</span> <span class="token keyword"${t}>default</span> <span class="token punctuation"${t}>{</span>
  <span class="token function"${t}>setup</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token keyword"${t}>return</span> <span class="token punctuation"${t}>{</span>
      <span class="token function"${t}>myFilterFn</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>url</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
        <span class="token comment"${t}>// example (only https://my-service.com/* should trigger)</span>
        <span class="token keyword"${t}>return</span> <span class="token regex"${t}><span class="token regex-delimiter"${t}>/</span><span class="token regex-source language-regex"${t}>^https:\\/\\/my-service\\.com</span><span class="token regex-delimiter"${t}>/</span></span><span class="token punctuation"${t}>.</span><span class="token function"${t}>test</span><span class="token punctuation"${t}>(</span>url<span class="token punctuation"${t}>)</span>
      <span class="token punctuation"${t}>}</span>
    <span class="token punctuation"${t}>}</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span>
</span></span><span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;/</span>script</span><span class="token punctuation"${t}>&gt;</span></span></code></pre>`),o(i(h,null,null,k,t));else return[a("pre",{class:"doc-code"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("template")]),a("span",{class:"token punctuation"},">")]),n(`
  `),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("q-ajax-bar")]),n(),a("span",{class:"token attr-name"},":hijack-filter"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),n("myFilterFn"),a("span",{class:"token punctuation"},'"')]),n(),a("span",{class:"token punctuation"},"/>")]),n(`
`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("template")]),a("span",{class:"token punctuation"},">")]),n(`

`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("script")]),a("span",{class:"token punctuation"},">")]),a("span",{class:"token script"},[a("span",{class:"token language-javascript"},[n(`
`),a("span",{class:"token keyword"},"export"),n(),a("span",{class:"token keyword"},"default"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token function"},"setup"),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"{"),n(`
      `),a("span",{class:"token function"},"myFilterFn"),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"url"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token comment"},"// example (only https://my-service.com/* should trigger)"),n(`
        `),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token regex"},[a("span",{class:"token regex-delimiter"},"/"),a("span",{class:"token regex-source language-regex"},"^https:\\/\\/my-service\\.com"),a("span",{class:"token regex-delimiter"},"/")]),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"test"),a("span",{class:"token punctuation"},"("),n("url"),a("span",{class:"token punctuation"},")"),n(`
      `),a("span",{class:"token punctuation"},"}"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
  `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("script")]),a("span",{class:"token punctuation"},">")])])]),a(h)]}),_:1},c,s)),e(`<h2 id="tips" class="doc-heading doc-h2"${s}>Tips</h2><ul${s}><li${s}>If multiple events are captured by Ajax Bar simultaneously, <code class="doc-token"${s}>@start</code> and <code class="doc-token"${s}>@stop</code> will still be triggered only once: when bar starts showing up and when it becomes hidden.</li><li${s}>Each Ajax call makes a <code class="doc-token"${s}>start()</code> call when it is triggered. When it ends, it calls <code class="doc-token"${s}>stop()</code>. So yes, if you also manually trigger QAjaxBar you must call <code class="doc-token"${s}>start()</code> each time a new event is starting and <code class="doc-token"${s}>stop()</code> each time an event finished. QAjaxBar knows to handle multiple events simultaneously.</li><li${s}>The automatic capture is designed to function exclusively with libraries utilizing `),e(i(r,{to:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"},{default:l((p,o,k,t)=>{if(o)o("XMLHttpRequest (XHR)");else return[n("XMLHttpRequest (XHR)")]}),_:1},c,s)),e(". Consequently, if you opt for the native browser "),e(i(r,{to:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},{default:l((p,o,k,t)=>{if(o)o("Fetch API");else return[n("Fetch API")]}),_:1},c,s)),e(", it wonâ€™t initiate the loading bar automatically.</li></ul>");else return[a("p",null,[n("In most mobile apps and even some desktop apps, you will most likely have some API communication to a server via an "),a(r,{to:"https://en.wikipedia.org/wiki/Ajax_(programming)"},{default:l(()=>[n("Ajax call")]),_:1}),n(". Since these calls can take more than a second or two, it is good UX to offer the user feedback, when such an API call is being made. Which is where QAjaxBar comes into helping you out.")]),a("p",null,"QAjaxBar is a component which displays a loading bar (like Youtube) whenever an Ajax call (regardless of Ajax library used) is in progress. It can be manually triggered as well."),a("div",{class:"doc-note doc-note--tip"},[a("p",{class:"doc-note__title"},"TIP"),a("p",null,[n("If youâ€™d like "),a("strong",null,"a simpler and more convenient way"),n(" to offer an Ajax Bar to your users, have a look at the "),a(r,{to:"/quasar-plugins/loading-bar"},{default:l(()=>[n("Loading Bar Plugin")]),_:1}),n(", which is actually "),a("strong",null,"the recommended way"),n(".")])]),a(v,{file:"QAjaxBar"}),a("h2",{id:"usage",class:"doc-heading doc-h2",onClick:p=>u(m)("usage")},"Usage",8,["onClick"]),a("p",null,"The QAjaxBar component captures Ajax calls automatically (unless told not to)."),a("p",null,"The example below triggers events manually for demonstrating purposes only. This one is set to appear at bottom (multiple positions available!) of the page, with a 10px size (default is different) and uses a custom color."),a("h3",{id:"basic",class:"doc-heading doc-h3",onClick:p=>u(m)("basic")},"Basic",8,["onClick"]),a($,{title:"Basic",file:"Basic"}),a("p",null,"Please check out the API section for all properties that you can use."),a("h3",{id:"ajax-filter",class:"doc-heading doc-h3",onClick:p=>u(m)("ajax-filter")},[n("Ajax filter "),a(x,{label:"v2.4.5+"})],8,["onClick"]),a("p",null,[n("Should you want QAjaxBar to trigger only for some URLs (and not for all, like in the default behavior), then you can use the "),a("code",{class:"doc-token"},"hijackFilter"),n(" property:")]),a(u(w),null,{default:l(()=>[a("pre",{class:"doc-code"},[a("code",null,[a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("template")]),a("span",{class:"token punctuation"},">")]),n(`
  `),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("q-ajax-bar")]),n(),a("span",{class:"token attr-name"},":hijack-filter"),a("span",{class:"token attr-value"},[a("span",{class:"token punctuation attr-equals"},"="),a("span",{class:"token punctuation"},'"'),n("myFilterFn"),a("span",{class:"token punctuation"},'"')]),n(),a("span",{class:"token punctuation"},"/>")]),n(`
`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("template")]),a("span",{class:"token punctuation"},">")]),n(`

`),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"<"),n("script")]),a("span",{class:"token punctuation"},">")]),a("span",{class:"token script"},[a("span",{class:"token language-javascript"},[n(`
`),a("span",{class:"token keyword"},"export"),n(),a("span",{class:"token keyword"},"default"),n(),a("span",{class:"token punctuation"},"{"),n(`
  `),a("span",{class:"token function"},"setup"),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
    `),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token punctuation"},"{"),n(`
      `),a("span",{class:"token function"},"myFilterFn"),n(),a("span",{class:"token punctuation"},"("),a("span",{class:"token parameter"},"url"),a("span",{class:"token punctuation"},")"),n(),a("span",{class:"token punctuation"},"{"),n(`
        `),a("span",{class:"token comment"},"// example (only https://my-service.com/* should trigger)"),n(`
        `),a("span",{class:"token keyword"},"return"),n(),a("span",{class:"token regex"},[a("span",{class:"token regex-delimiter"},"/"),a("span",{class:"token regex-source language-regex"},"^https:\\/\\/my-service\\.com"),a("span",{class:"token regex-delimiter"},"/")]),a("span",{class:"token punctuation"},"."),a("span",{class:"token function"},"test"),a("span",{class:"token punctuation"},"("),n("url"),a("span",{class:"token punctuation"},")"),n(`
      `),a("span",{class:"token punctuation"},"}"),n(`
    `),a("span",{class:"token punctuation"},"}"),n(`
  `),a("span",{class:"token punctuation"},"}"),n(`
`),a("span",{class:"token punctuation"},"}"),n(`
`)])]),a("span",{class:"token tag"},[a("span",{class:"token tag"},[a("span",{class:"token punctuation"},"</"),n("script")]),a("span",{class:"token punctuation"},">")])])]),a(h)]),_:1}),a("h2",{id:"tips",class:"doc-heading doc-h2",onClick:p=>u(m)("tips")},"Tips",8,["onClick"]),a("ul",null,[a("li",null,[n("If multiple events are captured by Ajax Bar simultaneously, "),a("code",{class:"doc-token"},"@start"),n(" and "),a("code",{class:"doc-token"},"@stop"),n(" will still be triggered only once: when bar starts showing up and when it becomes hidden.")]),a("li",null,[n("Each Ajax call makes a "),a("code",{class:"doc-token"},"start()"),n(" call when it is triggered. When it ends, it calls "),a("code",{class:"doc-token"},"stop()"),n(". So yes, if you also manually trigger QAjaxBar you must call "),a("code",{class:"doc-token"},"start()"),n(" each time a new event is starting and "),a("code",{class:"doc-token"},"stop()"),n(" each time an event finished. QAjaxBar knows to handle multiple events simultaneously.")]),a("li",null,[n("The automatic capture is designed to function exclusively with libraries utilizing "),a(r,{to:"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest"},{default:l(()=>[n("XMLHttpRequest (XHR)")]),_:1}),n(". Consequently, if you opt for the native browser "),a(r,{to:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},{default:l(()=>[n("Fetch API")]),_:1}),n(", it wonâ€™t initiate the loading bar automatically.")])])]}),_:1},A))}}},b=f.setup;f.setup=(y,d)=>{const g=C();return(g.modules||(g.modules=new Set)).add("src/pages/vue-components/financial-services.md"),b?b(y,d):void 0};const ta=L(f,[["__file","financial-services.md"]]);export{ta as default};
