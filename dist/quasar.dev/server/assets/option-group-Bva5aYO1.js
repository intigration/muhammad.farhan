import{provide as C,resolveComponent as w,mergeProps as $,withCtx as x,createVNode as o,unref as s,createTextVNode as a,useSSRContext as D}from"vue";import{ssrRenderComponent as n}from"vue/server-renderer";import{c as d}from"./page-utils-C-QWsEHe.js";import{D as y}from"./DocPage-DKr-0pQn.js";import{D as i}from"./DocExample-BcaABDtE.js";import{D as m}from"./DocApi-Df9ryd6x.js";import{_ as Q}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"option-group",__ssrInlineRender:!0,setup(g){C("_q_ex",{name:"QOptionGroup"});const h=[{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Checkbox",category:"Form Components",path:"/vue-components/checkbox"},{name:"Toggle",category:"Form Components",path:"/vue-components/toggle"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],r=[{id:"qoptiongroup-api",title:"2. QOptionGroup API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standard",title:"3.1. Standard",sub:!0},{id:"with-qcheckbox-or-qtoggle",title:"3.2. With QCheckbox or QToggle",sub:!0},{id:"using-label-slots",title:"3.3. Using label slots",sub:!0},{id:"with-labels-on-left-side",title:"3.4. With labels on left side",sub:!0},{id:"inline",title:"3.5. Inline",sub:!0},{id:"dense",title:"3.6. Dense",sub:!0},{id:"disable",title:"3.7. Disable",sub:!0},{id:"disable-certain-options",title:"3.8. Disable Certain Options",sub:!0},{id:"force-dark-mode",title:"3.9. Force dark mode",sub:!0},{id:"native-form-submit",title:"3.10. Native form submit",sub:!0}];return(T,p,k,v)=>{const b=w("q-badge");p(n(y,$({title:"Option Group",desc:"The QOptionGroup Vue component allows you better control for grouping binary form input components like checkboxes, radios or toggles.",heading:"","edit-link":"vue-components/option-group",toc:r,related:h},v),{default:x((N,t,l,e)=>{if(t)t(`<p${e}>The QOptionGroup component is a helper component that allows you better control for grouping binary (on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good use for this component is for offering a set of options or settings to turn on and off.</p>`),t(n(m,{file:"QOptionGroup"},null,l,e)),t(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="standard" class="doc-heading doc-h3"${e}>Standard</h3>`),t(n(i,{title:"Standard",file:"Standard"},null,l,e)),t(`<h3 id="with-qcheckbox-or-qtoggle" class="doc-heading doc-h3"${e}>With QCheckbox or QToggle</h3>`),t(n(i,{title:"With checkboxes",file:"Checkbox"},null,l,e)),t(`<div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>The model for checkboxes/toggles must be an array.</p></div>`),t(n(i,{title:"With toggles",file:"Toggle"},null,l,e)),t(`<h3 id="using-label-slots" class="doc-heading doc-h3"${e}>Using label slots `),t(n(b,{label:"v2.2+"},null,l,e)),t(`</h3><p${e}>There are two types of slots. A generic one (<code class="doc-token"${e}>label</code>) which applies to all options, unless a more specific index-based one is used (<code class="doc-token"${e}>label-N</code> where N is the 0-based index of the option). Both types of slots receive the respective option as parameter.</p><p${e}>Notice how we use the specific label slot for first option (option at index 0) and we also add a QTooltip.</p>`),t(n(i,{title:"Label slots",file:"LabelSlots"},null,l,e)),t(`<h3 id="with-labels-on-left-side" class="doc-heading doc-h3"${e}>With labels on left side</h3>`),t(n(i,{title:"With option labels on the left side",file:"Label"},null,l,e)),t(`<h3 id="inline" class="doc-heading doc-h3"${e}>Inline</h3>`),t(n(i,{title:"Inline",file:"Inline"},null,l,e)),t(`<h3 id="dense" class="doc-heading doc-h3"${e}>Dense</h3>`),t(n(i,{title:"Dense and inline",file:"DenseInline"},null,l,e)),t(`<h3 id="disable" class="doc-heading doc-h3"${e}>Disable</h3>`),t(n(i,{title:"Disabled",file:"Disable"},null,l,e)),t(`<div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>The objects within the <code class="doc-token"${e}>options</code> array can hold any of the props found in QToggle, QCheckbox or QRadio for instance <code class="doc-token"${e}>disable</code> or <code class="doc-token"${e}>leftLabel</code>. See below for an example.</p></div><h3 id="disable-certain-options" class="doc-heading doc-h3"${e}>Disable Certain Options</h3>`),t(n(i,{title:"Disable Certain Options",file:"DisableCertainOptions"},null,l,e)),t(`<h3 id="force-dark-mode" class="doc-heading doc-h3"${e}>Force dark mode</h3>`),t(n(i,{title:"Force dark mode",file:"Dark"},null,l,e)),t(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QOptionGroup, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):</p>`),t(n(i,{title:"Native form",file:"NativeForm"},null,l,e));else return[o("p",null,"The QOptionGroup component is a helper component that allows you better control for grouping binary (on or off, true or false, 1 or 0) form input components like checkboxes, radios or toggles. A good use for this component is for offering a set of options or settings to turn on and off."),o(m,{file:"QOptionGroup"}),o("h2",{id:"usage",class:"doc-heading doc-h2",onClick:c=>s(d)("usage")},"Usage",8,["onClick"]),o("h3",{id:"standard",class:"doc-heading doc-h3",onClick:c=>s(d)("standard")},"Standard",8,["onClick"]),o(i,{title:"Standard",file:"Standard"}),o("h3",{id:"with-qcheckbox-or-qtoggle",class:"doc-heading doc-h3",onClick:c=>s(d)("with-qcheckbox-or-qtoggle")},"With QCheckbox or QToggle",8,["onClick"]),o(i,{title:"With checkboxes",file:"Checkbox"}),o("div",{class:"doc-note doc-note--warning"},[o("p",{class:"doc-note__title"},"WARNING"),o("p",null,"The model for checkboxes/toggles must be an array.")]),o(i,{title:"With toggles",file:"Toggle"}),o("h3",{id:"using-label-slots",class:"doc-heading doc-h3",onClick:c=>s(d)("using-label-slots")},[a("Using label slots "),o(b,{label:"v2.2+"})],8,["onClick"]),o("p",null,[a("There are two types of slots. A generic one ("),o("code",{class:"doc-token"},"label"),a(") which applies to all options, unless a more specific index-based one is used ("),o("code",{class:"doc-token"},"label-N"),a(" where N is the 0-based index of the option). Both types of slots receive the respective option as parameter.")]),o("p",null,"Notice how we use the specific label slot for first option (option at index 0) and we also add a QTooltip."),o(i,{title:"Label slots",file:"LabelSlots"}),o("h3",{id:"with-labels-on-left-side",class:"doc-heading doc-h3",onClick:c=>s(d)("with-labels-on-left-side")},"With labels on left side",8,["onClick"]),o(i,{title:"With option labels on the left side",file:"Label"}),o("h3",{id:"inline",class:"doc-heading doc-h3",onClick:c=>s(d)("inline")},"Inline",8,["onClick"]),o(i,{title:"Inline",file:"Inline"}),o("h3",{id:"dense",class:"doc-heading doc-h3",onClick:c=>s(d)("dense")},"Dense",8,["onClick"]),o(i,{title:"Dense and inline",file:"DenseInline"}),o("h3",{id:"disable",class:"doc-heading doc-h3",onClick:c=>s(d)("disable")},"Disable",8,["onClick"]),o(i,{title:"Disabled",file:"Disable"}),o("div",{class:"doc-note doc-note--tip"},[o("p",{class:"doc-note__title"},"TIP"),o("p",null,[a("The objects within the "),o("code",{class:"doc-token"},"options"),a(" array can hold any of the props found in QToggle, QCheckbox or QRadio for instance "),o("code",{class:"doc-token"},"disable"),a(" or "),o("code",{class:"doc-token"},"leftLabel"),a(". See below for an example.")])]),o("h3",{id:"disable-certain-options",class:"doc-heading doc-h3",onClick:c=>s(d)("disable-certain-options")},"Disable Certain Options",8,["onClick"]),o(i,{title:"Disable Certain Options",file:"DisableCertainOptions"}),o("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:c=>s(d)("force-dark-mode")},"Force dark mode",8,["onClick"]),o(i,{title:"Force dark mode",file:"Dark"}),o("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:c=>s(d)("native-form-submit")},"Native form submit",8,["onClick"]),o("p",null,[a("When dealing with a native form which has an "),o("code",{class:"doc-token"},"action"),a(" and a "),o("code",{class:"doc-token"},"method"),a(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),o("code",{class:"doc-token"},"name"),a(" property on QOptionGroup, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")]),o(i,{title:"Native form",file:"NativeForm"})]}),_:1},k))}}},u=f.setup;f.setup=(g,h)=>{const r=D();return(r.modules||(r.modules=new Set)).add("src/pages/vue-components/option-group.md"),u?u(g,h):void 0};const X=Q(f,[["__file","option-group.md"]]);export{X as default};
