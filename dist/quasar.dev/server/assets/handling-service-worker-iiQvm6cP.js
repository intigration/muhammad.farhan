import{mergeProps as q,withCtx as p,createTextVNode as t,unref as u,createVNode as n,useSSRContext as C}from"vue";import{ssrRenderComponent as c}from"vue/server-renderer";import{c as m}from"./page-utils-C-QWsEHe.js";import{D as T,a as k}from"./DocPage-DKr-0pQn.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as l}from"./CopyButton-l3ndfN49.js";import{_ as x}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const y={__name:"handling-service-worker",__ssrInlineRender:!0,setup(w){const f=[{id:"interacting-with-service-worker",title:"2. Interacting with Service Worker"},{id:"ssl-certificate",title:"3. SSL certificate"},{id:"important-hosting-configuration",title:"4. Important Hosting Configuration"}];return($,d,b,S)=>{d(c(T,q({title:"Handling Service Worker",desc:"(@quasar/app-webpack) How to configure the service worker in a Quasar Progressive Web App.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-pwa/handling-service-worker",toc:f},S),{default:p((E,e,h,a)=>{if(e)e(`<p${a}>Here you’ll learn how to interact with the Service Worker from within your website/app space. Remember, <strong${a}>service workers MUST be served over HTTPS</strong>.</p><p${a}>It’s important to note that the Service Worker (which gets automatically generated by Workbox – or you’ve configured Quasar CLI to use your custom one) runs in a separate thread. You can however interact with it from app-space from within <code class="doc-token"${a}>/src-pwa/register-service-worker.js</code> file.</p><h2 id="interacting-with-service-worker" class="doc-heading doc-h2"${a}>Interacting with Service Worker</h2><p${a}>Notice the `),e(c(k,{to:"https://github.com/yyx990803/register-service-worker"},{default:p((i,o,r,s)=>{if(o)o("register-service-worker");else return[t("register-service-worker")]}),_:1},h,a)),e(" npm package, which comes out of the box along with Quasar CLI (so don’t install it yourself).</p>"),e(c(u(g),{title:"/src-pwa/register-service-worker.js file"},{default:p((i,o,r,s)=>{if(o)o(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> register <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;register-service-worker&#39;</span>

<span class="token function"${s}>register</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>SERVICE_WORKER_FILE</span><span class="token punctuation"${s}>,</span> <span class="token punctuation"${s}>{</span>
  <span class="token function"${s}>ready</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>registration</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;Service worker is active.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>registered</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>registration</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;Service worker has been registered.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>cached</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>registration</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;Content has been cached for offline use.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>updatefound</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>registration</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;New content is downloading.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>updated</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>registration</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;New content is available; please refresh.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>offline</span> <span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;No internet connection found. App is running in offline mode.&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>

  <span class="token function"${s}>error</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>error</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    console<span class="token punctuation"${s}>.</span><span class="token function"${s}>error</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;Error during service worker registration:&#39;</span><span class="token punctuation"${s}>,</span> error<span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span></code></pre>`),o(c(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),t(),n("span",{class:"token punctuation"},"{"),t(" register "),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"from"),t(),n("span",{class:"token string"},"'register-service-worker'"),t(`

`),n("span",{class:"token function"},"register"),n("span",{class:"token punctuation"},"("),t("process"),n("span",{class:"token punctuation"},"."),t("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"SERVICE_WORKER_FILE"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token function"},"ready"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker is active.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"registered"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker has been registered.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"cached"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Content has been cached for offline use.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updatefound"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is downloading.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updated"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is available; please refresh.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"offline"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'No internet connection found. App is running in offline mode.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"error"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"error"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Error during service worker registration:'"),n("span",{class:"token punctuation"},","),t(" error"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]}),_:1},h,a)),e(`<div class="doc-note doc-note--tip"${a}><p class="doc-note__title"${a}>TIP</p><p${a}>This file is automatically bundled into your website/app by Quasar CLI because it is considered as part of app-space <code class="doc-token"${a}>/src</code>. What this means is that you can use ES6, import other files etc.</p></div><h2 id="ssl-certificate" class="doc-heading doc-h2"${a}>SSL certificate</h2><p${a}>You may notice in some dev environments, that Workbox will not load your service workers during <code class="doc-token"${a}>quasar dev</code> if you are not using HTTPS to serve - even on localhost. You will see that there are two scripts that can’t load. The Chrome browser console is relatively tight-lipped about this, but Firefox tells you what is going on. The three options you have are:</p><ul${a}><li${a}>set quasar.config file &gt; devServer &gt; <code class="doc-token"${a}>https: true</code></li><li${a}>setup a loopback from localhost to 127.0.0.1 (but this is not without security implications)</li><li${a}>serve your localhost over `),e(c(k,{to:"https://github.com/robbie-cahill/tunnelmole-client"},{default:p((i,o,r,s)=>{if(o)o("tunnelmole");else return[t("tunnelmole")]}),_:1},h,a)),e(", "),e(c(k,{to:"https://localhost.run/"},{default:p((i,o,r,s)=>{if(o)o("localhost.run");else return[t("localhost.run")]}),_:1},h,a)),e(" or "),e(c(k,{to:"https://ngrok.com/"},{default:p((i,o,r,s)=>{if(o)o("ngrok");else return[t("ngrok")]}),_:1},h,a)),e(` and use the https address provided by them.</li></ul><p${a}>Here is a tunnelmole example (install it first with <code class="doc-token"${a}>yarn global add tunnelmole</code> or <code class="doc-token"${a}>npm i -g tunnelmole</code>):</p>`),e(c(u(g),null,{default:p((i,o,r,s)=>{if(o)o(`<pre class="doc-code"${s}><code${s}>$ tmole <span class="token number"${s}>80</span>
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80

<span class="token comment"${s}># ...and use the HTTPS url shown in the output</span></code></pre>`),o(c(l,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[t("$ tmole "),n("span",{class:"token number"},"80"),t(`
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80

`),n("span",{class:"token comment"},"# ...and use the HTTPS url shown in the output")])]),n(l,{lang:"bash"})]}),_:1},h,a)),e(`<p${a}>When you set <code class="doc-token"${a}>devServer &gt; https: true</code> in your <code class="doc-token"${a}>/quasar.config</code> file, Quasar will auto-generate a SSL certificate for you. However, if you want to create one yourself for your localhost, then check out this blog post by `),e(c(k,{to:"https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/"},{default:p((i,o,r,s)=>{if(o)o("Filippo");else return[t("Filippo")]}),_:1},h,a)),e(`. Then your <code class="doc-token"${a}>quasar.config file &gt; devServer &gt; https</code> should look like this:</p>`),e(c(u(g),{title:"/quasar.config file"},{default:p((i,o,r,s)=>{if(o)o(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>devServer</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>server</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>type</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;https&#39;</span><span class="token punctuation"${s}>,</span> <span class="token comment"${s}>// NECESSARY</span>

    <span class="token literal-property property"${s}>options</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
      <span class="token comment"${s}>// Use ABSOLUTE paths or path.join(__dirname, &#39;root/relative/path&#39;)</span>
      <span class="token literal-property property"${s}>key</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/path/to/server.key&quot;</span><span class="token punctuation"${s}>,</span>
      <span class="token literal-property property"${s}>pfx</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/path/to/server.pfx&quot;</span><span class="token punctuation"${s}>,</span>
      <span class="token literal-property property"${s}>cert</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/path/to/server.crt&quot;</span><span class="token punctuation"${s}>,</span>
      <span class="token literal-property property"${s}>ca</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/path/to/ca.pem&quot;</span><span class="token punctuation"${s}>,</span>
      <span class="token literal-property property"${s}>passphrase</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;webpack-dev-server&#39;</span> <span class="token comment"${s}>// do you need it?</span>
    <span class="token punctuation"${s}>}</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),o(c(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"devServer"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token literal-property property"},"server"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token literal-property property"},"type"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'https'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token comment"},"// NECESSARY"),t(`

    `),n("span",{class:"token literal-property property"},"options"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
      `),n("span",{class:"token comment"},"// Use ABSOLUTE paths or path.join(__dirname, 'root/relative/path')"),t(`
      `),n("span",{class:"token literal-property property"},"key"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.key"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"pfx"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.pfx"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"cert"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.crt"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"ca"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/ca.pem"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"passphrase"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'webpack-dev-server'"),t(),n("span",{class:"token comment"},"// do you need it?"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])]),n(l)]}),_:1},h,a)),e(`<h2 id="important-hosting-configuration" class="doc-heading doc-h2"${a}>Important Hosting Configuration</h2><p${a}>It’s important that you do not allow browsers to cache the <code class="doc-token"${a}>service-worker.js</code> file. Because otherwise updates to this file or to your app might slip through the cracks for browsers that load the service-worker from cache.</p><p${a}>This is why you must always make sure to add <code class="doc-token"${a}>&quot;Cache-Control&quot;: &quot;no-cache&quot;</code> to the headers of <code class="doc-token"${a}>service-worker.js</code> file via your hosting service.</p><p${a}>As an example how this is done for Google Firebase, you would add the following to the <code class="doc-token"${a}>firebase.json</code> configuration:</p>`),e(c(u(g),null,{default:p((i,o,r,s)=>{if(o)o(`<pre class="doc-code"${s}><code${s}><span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>&quot;hosting&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token property"${s}>&quot;headers&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
      <span class="token punctuation"${s}>{</span> <span class="token property"${s}>&quot;source&quot;</span><span class="token operator"${s}>:</span><span class="token string"${s}>&quot;/service-worker.js&quot;</span><span class="token punctuation"${s}>,</span> <span class="token property"${s}>&quot;headers&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span><span class="token punctuation"${s}>{</span><span class="token property"${s}>&quot;key&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;Cache-Control&quot;</span><span class="token punctuation"${s}>,</span> <span class="token property"${s}>&quot;value&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;no-cache&quot;</span><span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>]</span> <span class="token punctuation"${s}>}</span>
    <span class="token punctuation"${s}>]</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),o(c(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token property"},'"hosting"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),t(`
      `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),n("span",{class:"token string"},'"/service-worker.js"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"no-cache"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),t(`
    `),n("span",{class:"token punctuation"},"]"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])]),n(l)]}),_:1},h,a));else return[n("p",null,[t("Here you’ll learn how to interact with the Service Worker from within your website/app space. Remember, "),n("strong",null,"service workers MUST be served over HTTPS"),t(".")]),n("p",null,[t("It’s important to note that the Service Worker (which gets automatically generated by Workbox – or you’ve configured Quasar CLI to use your custom one) runs in a separate thread. You can however interact with it from app-space from within "),n("code",{class:"doc-token"},"/src-pwa/register-service-worker.js"),t(" file.")]),n("h2",{id:"interacting-with-service-worker",class:"doc-heading doc-h2",onClick:i=>u(m)("interacting-with-service-worker")},"Interacting with Service Worker",8,["onClick"]),n("p",null,[t("Notice the "),n(k,{to:"https://github.com/yyx990803/register-service-worker"},{default:p(()=>[t("register-service-worker")]),_:1}),t(" npm package, which comes out of the box along with Quasar CLI (so don’t install it yourself).")]),n(u(g),{title:"/src-pwa/register-service-worker.js file"},{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),t(),n("span",{class:"token punctuation"},"{"),t(" register "),n("span",{class:"token punctuation"},"}"),t(),n("span",{class:"token keyword"},"from"),t(),n("span",{class:"token string"},"'register-service-worker'"),t(`

`),n("span",{class:"token function"},"register"),n("span",{class:"token punctuation"},"("),t("process"),n("span",{class:"token punctuation"},"."),t("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"SERVICE_WORKER_FILE"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token function"},"ready"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker is active.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"registered"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Service worker has been registered.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"cached"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Content has been cached for offline use.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updatefound"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is downloading.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"updated"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"registration"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'New content is available; please refresh.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"offline"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'No internet connection found. App is running in offline mode.'"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),t(`

  `),n("span",{class:"token function"},"error"),t(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"error"),n("span",{class:"token punctuation"},")"),t(),n("span",{class:"token punctuation"},"{"),t(`
    console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"error"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Error during service worker registration:'"),n("span",{class:"token punctuation"},","),t(" error"),n("span",{class:"token punctuation"},")"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]),_:1}),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[t("This file is automatically bundled into your website/app by Quasar CLI because it is considered as part of app-space "),n("code",{class:"doc-token"},"/src"),t(". What this means is that you can use ES6, import other files etc.")])]),n("h2",{id:"ssl-certificate",class:"doc-heading doc-h2",onClick:i=>u(m)("ssl-certificate")},"SSL certificate",8,["onClick"]),n("p",null,[t("You may notice in some dev environments, that Workbox will not load your service workers during "),n("code",{class:"doc-token"},"quasar dev"),t(" if you are not using HTTPS to serve - even on localhost. You will see that there are two scripts that can’t load. The Chrome browser console is relatively tight-lipped about this, but Firefox tells you what is going on. The three options you have are:")]),n("ul",null,[n("li",null,[t("set quasar.config file > devServer > "),n("code",{class:"doc-token"},"https: true")]),n("li",null,"setup a loopback from localhost to 127.0.0.1 (but this is not without security implications)"),n("li",null,[t("serve your localhost over "),n(k,{to:"https://github.com/robbie-cahill/tunnelmole-client"},{default:p(()=>[t("tunnelmole")]),_:1}),t(", "),n(k,{to:"https://localhost.run/"},{default:p(()=>[t("localhost.run")]),_:1}),t(" or "),n(k,{to:"https://ngrok.com/"},{default:p(()=>[t("ngrok")]),_:1}),t(" and use the https address provided by them.")])]),n("p",null,[t("Here is a tunnelmole example (install it first with "),n("code",{class:"doc-token"},"yarn global add tunnelmole"),t(" or "),n("code",{class:"doc-token"},"npm i -g tunnelmole"),t("):")]),n(u(g),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[t("$ tmole "),n("span",{class:"token number"},"80"),t(`
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80

`),n("span",{class:"token comment"},"# ...and use the HTTPS url shown in the output")])]),n(l,{lang:"bash"})]),_:1}),n("p",null,[t("When you set "),n("code",{class:"doc-token"},"devServer > https: true"),t(" in your "),n("code",{class:"doc-token"},"/quasar.config"),t(" file, Quasar will auto-generate a SSL certificate for you. However, if you want to create one yourself for your localhost, then check out this blog post by "),n(k,{to:"https://blog.filippo.io/mkcert-valid-https-certificates-for-localhost/"},{default:p(()=>[t("Filippo")]),_:1}),t(". Then your "),n("code",{class:"doc-token"},"quasar.config file > devServer > https"),t(" should look like this:")]),n(u(g),{title:"/quasar.config file"},{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"devServer"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token literal-property property"},"server"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token literal-property property"},"type"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'https'"),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token comment"},"// NECESSARY"),t(`

    `),n("span",{class:"token literal-property property"},"options"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
      `),n("span",{class:"token comment"},"// Use ABSOLUTE paths or path.join(__dirname, 'root/relative/path')"),t(`
      `),n("span",{class:"token literal-property property"},"key"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.key"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"pfx"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.pfx"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"cert"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/server.crt"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"ca"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"/path/to/ca.pem"'),n("span",{class:"token punctuation"},","),t(`
      `),n("span",{class:"token literal-property property"},"passphrase"),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},"'webpack-dev-server'"),t(),n("span",{class:"token comment"},"// do you need it?"),t(`
    `),n("span",{class:"token punctuation"},"}"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])]),n(l)]),_:1}),n("h2",{id:"important-hosting-configuration",class:"doc-heading doc-h2",onClick:i=>u(m)("important-hosting-configuration")},"Important Hosting Configuration",8,["onClick"]),n("p",null,[t("It’s important that you do not allow browsers to cache the "),n("code",{class:"doc-token"},"service-worker.js"),t(" file. Because otherwise updates to this file or to your app might slip through the cracks for browsers that load the service-worker from cache.")]),n("p",null,[t("This is why you must always make sure to add "),n("code",{class:"doc-token"},'"Cache-Control": "no-cache"'),t(" to the headers of "),n("code",{class:"doc-token"},"service-worker.js"),t(" file via your hosting service.")]),n("p",null,[t("As an example how this is done for Google Firebase, you would add the following to the "),n("code",{class:"doc-token"},"firebase.json"),t(" configuration:")]),n(u(g),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),t(`
  `),n("span",{class:"token property"},'"hosting"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"{"),t(`
    `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),t(`
      `),n("span",{class:"token punctuation"},"{"),t(),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),n("span",{class:"token string"},'"/service-worker.js"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"{"),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),t(),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),t(),n("span",{class:"token string"},'"no-cache"'),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},"]"),t(),n("span",{class:"token punctuation"},"}"),t(`
    `),n("span",{class:"token punctuation"},"]"),t(`
  `),n("span",{class:"token punctuation"},"}"),t(`
`),n("span",{class:"token punctuation"},"}")])]),n(l)]),_:1})]}),_:1},b))}}},v=y.setup;y.setup=(w,f)=>{const $=C();return($.modules||($.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-pwa/handling-service-worker.md"),v?v(w,f):void 0};const D=x(y,[["__file","handling-service-worker.md"]]);export{D as default};
