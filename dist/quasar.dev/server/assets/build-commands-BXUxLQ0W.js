import{mergeProps as x,withCtx as i,unref as r,createVNode as a,createTextVNode as e,useSSRContext as C}from"vue";import{ssrRenderComponent as p,ssrRenderStyle as k}from"vue/server-renderer";import{c as h}from"./page-utils-C-QWsEHe.js";import{D as S}from"./DocPage-DKr-0pQn.js";import{D as c}from"./DocPrerender-DPOnWPFO.js";import{C as t}from"./CopyButton-l3ndfN49.js";import{_ as D}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const g={__name:"build-commands",__ssrInlineRender:!0,setup($){const v=[{id:"developing",title:"2. Developing"},{id:"enabling-ios-modern-build",title:"2.1. Enabling iOS modern build",sub:!0},{id:"building-for-production",title:"3. Building for Production"}];return(b,y,w,q)=>{y(p(S,x({title:"Mobile App Build Commands",desc:"(@quasar/app-webpack) The Quasar CLI list of commands when developing or building a hybrid mobile app with Cordova.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-cordova-apps/build-commands",toc:v},q),{default:i((P,l,m,s)=>{if(l)l(`<p${s}>Before we dive in, make sure you got the Cordova CLI installed.</p>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ <span class="token function"${n}>npm</span> <span class="token function"${n}>install</span> <span class="token parameter variable"${n}>-g</span> cordova</code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ "),a("span",{class:"token function"},"npm"),e(),a("span",{class:"token function"},"install"),e(),a("span",{class:"token parameter variable"},"-g"),e(" cordova")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<h2 id="developing" class="doc-heading doc-h2"${s}>Developing</h2>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar dev <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># ..or the explicit form:</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> cordova <span class="token parameter variable"${n}>-T</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># ..or the longer form:</span>
$ quasar dev <span class="token parameter variable"${n}>--mode</span> cordova <span class="token parameter variable"${n}>--target</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># using a specific emulator (--emulator, -e)</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> ios <span class="token parameter variable"${n}>-e</span> iPhone-7
<span class="token comment"${n}># or</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> ios <span class="token parameter variable"${n}>-e</span> iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2

<span class="token comment"${n}># passing extra parameters and/or options to</span>
<span class="token comment"${n}># underlying &quot;cordova&quot; executable:</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> ios -- some params <span class="token parameter variable"${n}>--and</span> options <span class="token parameter variable"${n}>--here</span>
<span class="token comment"${n}># when on Windows and using Powershell:</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> ios <span class="token string"${n}>&#39;--&#39;</span> some params <span class="token parameter variable"${n}>--and</span> options <span class="token parameter variable"${n}>--here</span></code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar dev "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the explicit form:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" cordova "),a("span",{class:"token parameter variable"},"-T"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"--mode"),e(" cordova "),a("span",{class:"token parameter variable"},"--target"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# using a specific emulator (--emulator, -e)"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token parameter variable"},"-e"),e(` iPhone-7
`),a("span",{class:"token comment"},"# or"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token parameter variable"},"-e"),e(` iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2

`),a("span",{class:"token comment"},"# passing extra parameters and/or options to"),e(`
`),a("span",{class:"token comment"},'# underlying "cordova" executable:'),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios -- some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here"),e(`
`),a("span",{class:"token comment"},"# when on Windows and using Powershell:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token string"},"'--'"),e(" some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<p${s}>However, if you wish to open the IDE (Android Studio / Xcode) and from there to manually select the emulator (or multiple ones simultaneously!) to run the dev app on it/them (or to run the dev app on a real mobile/tablet device):</p>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar dev <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> <span class="token parameter variable"${n}>--ide</span></code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar dev "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--ide")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<div class="doc-note doc-note--warning"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>In Android Studio, you will be greeted with a message recommending to upgrade the Gradle version. <strong${s}>DO NOT UPGRADE GRADLE</strong> as it will break the Cordova project. Same goes for any other requested upgrades.</p><img src="https://cdn.quasar.dev/img/gradle-upgrade-notice.png" alt="Gradle upgrade" class="q-my-md rounded-borders" style="${k({"max-width":"350px"})}"${s}><p${s}>If you encounter any IDE errors then click on File &gt; Invalidate caches and restart.</p><img src="https://cdn.quasar.dev/img/gradle-invalidate-cache.png" alt="Gradle upgrade" class="q-mt-md rounded-borders" style="${k({"max-width":"350px"})}"${s}></div><p${s}>In order for you to be able to develop on a device emulator or directly on a phone (with Hot Module Reload included), Quasar CLI follows these steps:</p><ol${s}><li${s}>Detects your machine’s external IP address. If there are multiple such IPs detected, then it asks you to choose one. If you’ll be using a mobile phone to develop then choose the IP address of your machine that’s pingable from the phone/tablet.</li><li${s}>It starts up a development server on your machine.</li><li${s}>It temporarily changes the <code class="doc-token"${s}>&lt;content/&gt;</code> tag in <code class="doc-token"${s}>/src-cordova/config.xml</code> to point to the IP previously detected. This allows the app to connect to the development server.</li><li${s}>It defers to Cordova CLI to build a native app with the temporarily changed config.xml.</li><li${s}>Cordova CLI checks if a mobile phone / tablet is connected to your development machine. If it is, it installs the development app on it. If none is found, then it boots up an emulator and runs the development app.</li><li${s}>Finally, it reverts the temporary changes made to <code class="doc-token"${s}>/src-cordova/config.xml</code>.</li></ol><div class="doc-note doc-note--danger"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>If developing on a mobile phone/tablet, it is very important that the external IP address of your build machine is accessible from the phone/tablet, otherwise you’ll get a development app with white screen only. Also check your machine’s firewall to allow connections to the development chosen port.</p></div><h3 id="enabling-ios-modern-build" class="doc-heading doc-h3"${s}>Enabling iOS modern build</h3><p${s}>By default, Xcode modern build for iOS is disabled due to Cordova issues. However, if you know what you are doing and you want to enable it, do so from the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}><span class="token literal-property property"${n}>cordova</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token literal-property property"${n}>noIosLegacyBuildFlag</span><span class="token operator"${n}>:</span> <span class="token boolean"${n}>true</span>
<span class="token punctuation"${n}>}</span></code></pre>`),o(p(t,null,null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[a("span",{class:"token literal-property property"},"cordova"),a("span",{class:"token operator"},":"),e(),a("span",{class:"token punctuation"},"{"),e(`
  `),a("span",{class:"token literal-property property"},"noIosLegacyBuildFlag"),a("span",{class:"token operator"},":"),e(),a("span",{class:"token boolean"},"true"),e(`
`),a("span",{class:"token punctuation"},"}")])]),a(t)]}),_:1},m,s)),l(`<p${s}>The above applies also if you want to specify the build type in your “build.json”.</p><h2 id="building-for-production" class="doc-heading doc-h2"${s}>Building for Production</h2>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>android<span class="token operator"${n}>|</span>ios<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># ..or the explicit form:</span>
$ quasar build <span class="token parameter variable"${n}>-m</span> cordova <span class="token parameter variable"${n}>-T</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># ..or the longer form:</span>
$ quasar build <span class="token parameter variable"${n}>--mode</span> cordova <span class="token parameter variable"${n}>--target</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span>

<span class="token comment"${n}># this skips .app or .apk creation and just fills in /src-cordova/www</span>
$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> --skip-pkg

<span class="token comment"${n}># passing extra parameters and/or options to</span>
<span class="token comment"${n}># underlying &quot;cordova&quot; executable:</span>
$ quasar build <span class="token parameter variable"${n}>-m</span> ios -- some params <span class="token parameter variable"${n}>--and</span> options <span class="token parameter variable"${n}>--here</span></code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("android"),a("span",{class:"token operator"},"|"),e("ios"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the explicit form:"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(" cordova "),a("span",{class:"token parameter variable"},"-T"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form:"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"--mode"),e(" cordova "),a("span",{class:"token parameter variable"},"--target"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# this skips .app or .apk creation and just fills in /src-cordova/www"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(` --skip-pkg

`),a("span",{class:"token comment"},"# passing extra parameters and/or options to"),e(`
`),a("span",{class:"token comment"},'# underlying "cordova" executable:'),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(" ios -- some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<ul${s}><li${s}><p${s}>These commands parse and build your <code class="doc-token"${s}>/src</code> folder then overwrite <code class="doc-token"${s}>/src-cordova/www</code> then defer to Cordova CLI to trigger the actual native app creation.</p></li><li${s}><p${s}>Built packages will be located in <code class="doc-token"${s}>/dist/cordova</code> unless configured otherwise.</p></li><li${s}><p${s}>If you wish to skip the Cordova CLI packaging step and only fill <code class="doc-token"${s}>/src-cordova/www</code> folder:</p></li></ul>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> --skip-pkg</code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(" --skip-pkg")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<ul${s}><li${s}>Should you wish to manually build the final assets using the IDE (Android Studio / Xcode) instead of doing a terminal build, then:</li></ul>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> <span class="token parameter variable"${n}>--ide</span></code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--ide")])]),a(t,{lang:"bash"})]}),_:1},m,s)),l(`<div class="doc-note doc-note--warning"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>In Android Studio, you will be greeted with a message recommending to upgrade the Gradle version. <strong${s}>DO NOT UPGRADE GRADLE</strong> as it will break the Cordova project. Same goes for any other requested upgrades.</p><img src="https://cdn.quasar.dev/img/gradle-upgrade-notice.png" alt="Gradle upgrade" class="q-my-md rounded-borders" style="${k({"max-width":"350px"})}"${s}><p${s}>If you encounter any IDE errors then click on File &gt; Invalidate caches and restart.</p><img src="https://cdn.quasar.dev/img/gradle-invalidate-cache.png" alt="Gradle upgrade" class="q-mt-md rounded-borders" style="${k({"max-width":"350px"})}"${s}></div><p${s}>If you want a production build with debugging enabled for the UI code:</p>`),l(p(r(c),null,{default:i((u,o,d,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}>$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> <span class="token parameter variable"${n}>-d</span>

<span class="token comment"${n}># ..or the longer form</span>
$ quasar build <span class="token parameter variable"${n}>-m</span> <span class="token punctuation"${n}>[</span>ios<span class="token operator"${n}>|</span>android<span class="token punctuation"${n}>]</span> <span class="token parameter variable"${n}>--debug</span></code></pre>`),o(p(t,{lang:"bash"},null,d,n));else return[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"-d"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--debug")])]),a(t,{lang:"bash"})]}),_:1},m,s));else return[a("p",null,"Before we dive in, make sure you got the Cordova CLI installed."),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ "),a("span",{class:"token function"},"npm"),e(),a("span",{class:"token function"},"install"),e(),a("span",{class:"token parameter variable"},"-g"),e(" cordova")])]),a(t,{lang:"bash"})]),_:1}),a("h2",{id:"developing",class:"doc-heading doc-h2",onClick:u=>r(h)("developing")},"Developing",8,["onClick"]),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar dev "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the explicit form:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" cordova "),a("span",{class:"token parameter variable"},"-T"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"--mode"),e(" cordova "),a("span",{class:"token parameter variable"},"--target"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# using a specific emulator (--emulator, -e)"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token parameter variable"},"-e"),e(` iPhone-7
`),a("span",{class:"token comment"},"# or"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token parameter variable"},"-e"),e(` iPhone-X,com.apple.CoreSimulator.SimRuntime.iOS-12-2

`),a("span",{class:"token comment"},"# passing extra parameters and/or options to"),e(`
`),a("span",{class:"token comment"},'# underlying "cordova" executable:'),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios -- some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here"),e(`
`),a("span",{class:"token comment"},"# when on Windows and using Powershell:"),e(`
$ quasar dev `),a("span",{class:"token parameter variable"},"-m"),e(" ios "),a("span",{class:"token string"},"'--'"),e(" some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here")])]),a(t,{lang:"bash"})]),_:1}),a("p",null,"However, if you wish to open the IDE (Android Studio / Xcode) and from there to manually select the emulator (or multiple ones simultaneously!) to run the dev app on it/them (or to run the dev app on a real mobile/tablet device):"),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar dev "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--ide")])]),a(t,{lang:"bash"})]),_:1}),a("div",{class:"doc-note doc-note--warning"},[a("p",{class:"doc-note__title"},"WARNING"),a("p",null,[e("In Android Studio, you will be greeted with a message recommending to upgrade the Gradle version. "),a("strong",null,"DO NOT UPGRADE GRADLE"),e(" as it will break the Cordova project. Same goes for any other requested upgrades.")]),a("img",{src:"https://cdn.quasar.dev/img/gradle-upgrade-notice.png",alt:"Gradle upgrade",class:"q-my-md rounded-borders",style:{"max-width":"350px"}}),a("p",null,"If you encounter any IDE errors then click on File > Invalidate caches and restart."),a("img",{src:"https://cdn.quasar.dev/img/gradle-invalidate-cache.png",alt:"Gradle upgrade",class:"q-mt-md rounded-borders",style:{"max-width":"350px"}})]),a("p",null,"In order for you to be able to develop on a device emulator or directly on a phone (with Hot Module Reload included), Quasar CLI follows these steps:"),a("ol",null,[a("li",null,"Detects your machine’s external IP address. If there are multiple such IPs detected, then it asks you to choose one. If you’ll be using a mobile phone to develop then choose the IP address of your machine that’s pingable from the phone/tablet."),a("li",null,"It starts up a development server on your machine."),a("li",null,[e("It temporarily changes the "),a("code",{class:"doc-token"},"<content/>"),e(" tag in "),a("code",{class:"doc-token"},"/src-cordova/config.xml"),e(" to point to the IP previously detected. This allows the app to connect to the development server.")]),a("li",null,"It defers to Cordova CLI to build a native app with the temporarily changed config.xml."),a("li",null,"Cordova CLI checks if a mobile phone / tablet is connected to your development machine. If it is, it installs the development app on it. If none is found, then it boots up an emulator and runs the development app."),a("li",null,[e("Finally, it reverts the temporary changes made to "),a("code",{class:"doc-token"},"/src-cordova/config.xml"),e(".")])]),a("div",{class:"doc-note doc-note--danger"},[a("p",{class:"doc-note__title"},"WARNING"),a("p",null,"If developing on a mobile phone/tablet, it is very important that the external IP address of your build machine is accessible from the phone/tablet, otherwise you’ll get a development app with white screen only. Also check your machine’s firewall to allow connections to the development chosen port.")]),a("h3",{id:"enabling-ios-modern-build",class:"doc-heading doc-h3",onClick:u=>r(h)("enabling-ios-modern-build")},"Enabling iOS modern build",8,["onClick"]),a("p",null,[e("By default, Xcode modern build for iOS is disabled due to Cordova issues. However, if you know what you are doing and you want to enable it, do so from the "),a("code",{class:"doc-token"},"/quasar.config"),e(" file:")]),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[a("span",{class:"token literal-property property"},"cordova"),a("span",{class:"token operator"},":"),e(),a("span",{class:"token punctuation"},"{"),e(`
  `),a("span",{class:"token literal-property property"},"noIosLegacyBuildFlag"),a("span",{class:"token operator"},":"),e(),a("span",{class:"token boolean"},"true"),e(`
`),a("span",{class:"token punctuation"},"}")])]),a(t)]),_:1}),a("p",null,"The above applies also if you want to specify the build type in your “build.json”."),a("h2",{id:"building-for-production",class:"doc-heading doc-h2",onClick:u=>r(h)("building-for-production")},"Building for Production",8,["onClick"]),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("android"),a("span",{class:"token operator"},"|"),e("ios"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the explicit form:"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(" cordova "),a("span",{class:"token parameter variable"},"-T"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form:"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"--mode"),e(" cordova "),a("span",{class:"token parameter variable"},"--target"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(`

`),a("span",{class:"token comment"},"# this skips .app or .apk creation and just fills in /src-cordova/www"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(` --skip-pkg

`),a("span",{class:"token comment"},"# passing extra parameters and/or options to"),e(`
`),a("span",{class:"token comment"},'# underlying "cordova" executable:'),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(" ios -- some params "),a("span",{class:"token parameter variable"},"--and"),e(" options "),a("span",{class:"token parameter variable"},"--here")])]),a(t,{lang:"bash"})]),_:1}),a("ul",null,[a("li",null,[a("p",null,[e("These commands parse and build your "),a("code",{class:"doc-token"},"/src"),e(" folder then overwrite "),a("code",{class:"doc-token"},"/src-cordova/www"),e(" then defer to Cordova CLI to trigger the actual native app creation.")])]),a("li",null,[a("p",null,[e("Built packages will be located in "),a("code",{class:"doc-token"},"/dist/cordova"),e(" unless configured otherwise.")])]),a("li",null,[a("p",null,[e("If you wish to skip the Cordova CLI packaging step and only fill "),a("code",{class:"doc-token"},"/src-cordova/www"),e(" folder:")])])]),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(" --skip-pkg")])]),a(t,{lang:"bash"})]),_:1}),a("ul",null,[a("li",null,"Should you wish to manually build the final assets using the IDE (Android Studio / Xcode) instead of doing a terminal build, then:")]),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--ide")])]),a(t,{lang:"bash"})]),_:1}),a("div",{class:"doc-note doc-note--warning"},[a("p",{class:"doc-note__title"},"WARNING"),a("p",null,[e("In Android Studio, you will be greeted with a message recommending to upgrade the Gradle version. "),a("strong",null,"DO NOT UPGRADE GRADLE"),e(" as it will break the Cordova project. Same goes for any other requested upgrades.")]),a("img",{src:"https://cdn.quasar.dev/img/gradle-upgrade-notice.png",alt:"Gradle upgrade",class:"q-my-md rounded-borders",style:{"max-width":"350px"}}),a("p",null,"If you encounter any IDE errors then click on File > Invalidate caches and restart."),a("img",{src:"https://cdn.quasar.dev/img/gradle-invalidate-cache.png",alt:"Gradle upgrade",class:"q-mt-md rounded-borders",style:{"max-width":"350px"}})]),a("p",null,"If you want a production build with debugging enabled for the UI code:"),a(r(c),null,{default:i(()=>[a("pre",{class:"doc-code"},[a("code",null,[e("$ quasar build "),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"-d"),e(`

`),a("span",{class:"token comment"},"# ..or the longer form"),e(`
$ quasar build `),a("span",{class:"token parameter variable"},"-m"),e(),a("span",{class:"token punctuation"},"["),e("ios"),a("span",{class:"token operator"},"|"),e("android"),a("span",{class:"token punctuation"},"]"),e(),a("span",{class:"token parameter variable"},"--debug")])]),a(t,{lang:"bash"})]),_:1})]}),_:1},w))}}},f=g.setup;g.setup=($,v)=>{const b=C();return(b.modules||(b.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-cordova-apps/build-commands.md"),f?f($,v):void 0};const U=D(g,[["__file","build-commands.md"]]);export{U as default};
