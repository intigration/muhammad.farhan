import{mergeProps as W,withCtx as o,unref as c,createVNode as e,createTextVNode as a,useSSRContext as q}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import"quasar";import{D as P,a as v}from"./DocPage-DKr-0pQn.js";import{D as y}from"./DocTree-Kz2iQlb5.js";import{D as u}from"./DocPrerender-DPOnWPFO.js";import{C as l}from"./CopyButton-l3ndfN49.js";import{_ as j}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const w={__name:"preparation",__ssrInlineRender:!0,setup(g){const m=[{name:"The quasar.config file",category:"Quasar CLI (with Vite)",path:"/quasar-cli-vite/quasar-config-file"}],d={tree:{l:"src-pwa",c:[{l:"register-service-worker.js",e:"(or .ts) UI code *managing* service worker"},{l:"manifest.json",e:"Your PWA manifest file"},{l:"custom-service-worker.js",e:"(or .ts) Optional custom service worker file (injectManifest mode ONLY)"}]}};return(S,h,b,A)=>{h(i(P,W({title:"Preparation for PWA",desc:"(@quasar/app-vite) How to add PWA mode with Quasar CLI.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/developing-pwa/preparation",related:m},A),{default:o((C,r,f,s)=>{if(r)r(`<p${s}>We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p><p${s}>In order to build a PWA, we first need to add the PWA mode to our Quasar project:</p>`),r(i(c(u),null,{default:o((k,t,p,n)=>{if(t)t(`<pre class="doc-code"${n}><code${n}>$ quasar mode <span class="token function"${n}>add</span> pwa</code></pre>`),t(i(l,{lang:"bash"},null,p,n));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" pwa")])]),e(l,{lang:"bash"})]}),_:1},f,s)),r(`<p${s}>If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:</p>`),r(i(c(u),null,{default:o((k,t,p,n)=>{if(t)t(`<pre class="doc-code"${n}><code${n}>$ quasar dev <span class="token parameter variable"${n}>-m</span> pwa</code></pre>`),t(i(l,{lang:"bash"},null,p,n));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" pwa")])]),e(l,{lang:"bash"})]}),_:1},f,s)),r(`<p${s}>This will add PWA mode automatically, if it is missing.</p><p${s}>A new folder will appear in your project folder (which is explained in detail on the `),r(i(v,{to:"/quasar-cli-vite/developing-pwa/configuring-pwa"},{default:o((k,t,p,n)=>{if(t)t("Configuring PWA");else return[a("Configuring PWA")]}),_:1},f,s)),r(" page):</p>"),r(i(y,{def:d.tree},null,f,s)),r(`<p${s}>All the files above are going to be detailed in the next pages, but the high overview is:</p><ul${s}><li${s}>The <code class="doc-token"${s}>register-service-worker.[js|ts]</code> file is part of the UI code and communicates with the service worker.</li><li${s}>The <code class="doc-token"${s}>manifest.json</code> is the PWA manifest file.</li><li${s}>When using InjectManifest, you can write your own custom service worker (<code class="doc-token"${s}>custom-service-worker.[js|ts]</code>).</li></ul><p${s}>Should you want to use different filenames, you can do so by editing the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),r(i(c(u),{title:"/quasar.config file"},{default:o((k,t,p,n)=>{if(t)t(`<pre class="doc-code"${n}><code${n}><span class="token literal-property property"${n}>sourceFiles</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token literal-property property"${n}>pwaRegisterServiceWorker</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;src-pwa/register-service-worker&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>pwaServiceWorker</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;src-pwa/custom-service-worker&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>pwaManifestFile</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;src-pwa/manifest.json&#39;</span><span class="token punctuation"${n}>,</span>
<span class="token punctuation"${n}>}</span></code></pre>`),t(i(l,null,null,p,n));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token literal-property property"},"sourceFiles"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token punctuation"},"{"),a(`
  `),e("span",{class:"token literal-property property"},"pwaRegisterServiceWorker"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/register-service-worker'"),e("span",{class:"token punctuation"},","),a(`
  `),e("span",{class:"token literal-property property"},"pwaServiceWorker"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/custom-service-worker'"),e("span",{class:"token punctuation"},","),a(`
  `),e("span",{class:"token literal-property property"},"pwaManifestFile"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/manifest.json'"),e("span",{class:"token punctuation"},","),a(`
`),e("span",{class:"token punctuation"},"}")])]),e(l)]}),_:1},f,s));else return[e("p",null,"We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands."),e("p",null,"In order to build a PWA, we first need to add the PWA mode to our Quasar project:"),e(c(u),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" pwa")])]),e(l,{lang:"bash"})]),_:1}),e("p",null,"If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:"),e(c(u),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" pwa")])]),e(l,{lang:"bash"})]),_:1}),e("p",null,"This will add PWA mode automatically, if it is missing."),e("p",null,[a("A new folder will appear in your project folder (which is explained in detail on the "),e(v,{to:"/quasar-cli-vite/developing-pwa/configuring-pwa"},{default:o(()=>[a("Configuring PWA")]),_:1}),a(" page):")]),e(y,{def:d.tree},null,8,["def"]),e("p",null,"All the files above are going to be detailed in the next pages, but the high overview is:"),e("ul",null,[e("li",null,[a("The "),e("code",{class:"doc-token"},"register-service-worker.[js|ts]"),a(" file is part of the UI code and communicates with the service worker.")]),e("li",null,[a("The "),e("code",{class:"doc-token"},"manifest.json"),a(" is the PWA manifest file.")]),e("li",null,[a("When using InjectManifest, you can write your own custom service worker ("),e("code",{class:"doc-token"},"custom-service-worker.[js|ts]"),a(").")])]),e("p",null,[a("Should you want to use different filenames, you can do so by editing the "),e("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),e(c(u),{title:"/quasar.config file"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token literal-property property"},"sourceFiles"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token punctuation"},"{"),a(`
  `),e("span",{class:"token literal-property property"},"pwaRegisterServiceWorker"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/register-service-worker'"),e("span",{class:"token punctuation"},","),a(`
  `),e("span",{class:"token literal-property property"},"pwaServiceWorker"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/custom-service-worker'"),e("span",{class:"token punctuation"},","),a(`
  `),e("span",{class:"token literal-property property"},"pwaManifestFile"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token string"},"'src-pwa/manifest.json'"),e("span",{class:"token punctuation"},","),a(`
`),e("span",{class:"token punctuation"},"}")])]),e(l)]),_:1})]}),_:1},b))}}},$=w.setup;w.setup=(g,m)=>{const d=q();return(d.modules||(d.modules=new Set)).add("src/pages/quasar-cli-vite/developing-pwa/preparation.md"),$?$(g,m):void 0};const B=j(w,[["__file","preparation.md"]]);export{B as default};
