import{resolveComponent as C,mergeProps as x,withCtx as a,createTextVNode as t,unref as p,createVNode as e,useSSRContext as P}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c as g}from"./page-utils-C-QWsEHe.js";import{D as R,a as c}from"./DocPage-DKr-0pQn.js";import{D as f}from"./DocPrerender-DPOnWPFO.js";import{C as h}from"./CopyButton-l3ndfN49.js";import{_ as T}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const k={__name:"deploying",__ssrInlineRender:!0,setup(v){const y=[{id:"serverless",title:"2. Serverless"},{id:"the-distributables-folder",title:"3. The Distributables Folder"},{id:"enhancing-performance",title:"4. Enhancing Performance"},{id:"deploying-with-cleavr",title:"5. Deploying with Cleavr"}];return(b,$,S,q)=>{const m=C("q-badge");$(l(R,x({title:"Deploying SSR",desc:"(@quasar/app-webpack) How to publish a Quasar server-side rendered app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-ssr/deploying",toc:y},q),{default:a((j,r,d,s)=>{if(r)r(`<p${s}>When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this is not the case with an SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from <code class="doc-token"${s}>/src-ssr</code>.</p><p${s}>By default, the SSR distributables use `),r(l(c,{to:"https://expressjs.com/"},{default:a((i,o,u,n)=>{if(o)o("Express");else return[t("Express")]}),_:1},d,s)),r(`, but you can replace it with your webserver of choice.</p><h2 id="serverless" class="doc-heading doc-h2"${s}>Serverless `),r(l(m,{label:"@quasar/app-webpack v3.2+"},null,d,s)),r(`</h2><p${s}>If you are deploying to a Serverless service, then please read about `),r(l(c,{to:"/quasar-cli-webpack/developing-ssr/ssr-production-export"},{default:a((i,o,u,n)=>{if(o)o("SSR Production Export");else return[t("SSR Production Export")]}),_:1},d,s)),r(` on how to prepare for it.</p><h2 id="the-distributables-folder" class="doc-heading doc-h2"${s}>The Distributables Folder</h2><p${s}>After building your app on SSR mode (<code class="doc-token"${s}>$ quasar build -m ssr</code>) the folder that gets generated contains a standalone webserver tweaked for serving with SSR.</p><p${s}>You’ll notice that it contains a <code class="doc-token"${s}>package.json</code> file of its own. It has an npm script defined, called “start”:</p>`),r(l(p(f),null,{default:a((i,o,u,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}><span class="token string-property property"${n}>&quot;scripts&quot;</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token string-property property"${n}>&quot;start&quot;</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&quot;node index.js&quot;</span>
<span class="token punctuation"${n}>}</span></code></pre>`),o(l(h,null,null,u,n));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token string-property property"},'"scripts"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),t(`
  `),e("span",{class:"token string-property property"},'"start"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"node index.js"'),t(`
`),e("span",{class:"token punctuation"},"}")])]),e(h)]}),_:1},d,s)),r(`<p${s}>So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run <code class="doc-token"${s}>$ yarn start</code>. This boots up the webserver and starts listening for connections.</p><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>The distributables folder generated after building your app is standalone. It does NOT require the rest of your project folder to work and it does NOT depend on <code class="doc-token"${s}>@quasar/cli</code> being installed.</p></div><h2 id="enhancing-performance" class="doc-heading doc-h2"${s}>Enhancing Performance</h2><p${s}>By default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: `),r(l(c,{to:"http://pm2.keymetrics.io/"},{default:a((i,o,u,n)=>{if(o)o("PM2");else return[t("PM2")]}),_:1},d,s)),r(`.</p><p${s}>After installing PM2 on your server, your npm start script can look like this instead:</p>`),r(l(p(f),null,{default:a((i,o,u,n)=>{if(o)o(`<pre class="doc-code"${n}><code${n}><span class="token string-property property"${n}>&quot;scripts&quot;</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token string-property property"${n}>&quot;start&quot;</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&quot;pm2 start index.js&quot;</span>
<span class="token punctuation"${n}>}</span></code></pre>`),o(l(h,null,null,u,n));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token string-property property"},'"scripts"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),t(`
  `),e("span",{class:"token string-property property"},'"start"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"pm2 start index.js"'),t(`
`),e("span",{class:"token punctuation"},"}")])]),e(h)]}),_:1},d,s)),r(`<h2 id="deploying-with-cleavr" class="doc-heading doc-h2"${s}>Deploying with Cleavr</h2><p${s}>You can use `),r(l(c,{to:"https://cleavr.io"},{default:a((i,o,u,n)=>{if(o)o("Cleavr");else return[t("Cleavr")]}),_:1},d,s)),r(` to deploy Quasar SSR apps to several popular VPS providers. Cleavr will automatically set up PM2 with cluster mode enabled for your app.</p><p${s}>Add a new <strong${s}>NodeJS SSR</strong> site to Cleavr and then configure the web app settings with the following:</p><ul${s}><li${s}><strong${s}>Entry point:</strong> index.js</li><li${s}><strong${s}>Build command:</strong> npx quasar build --mode ssr</li><li${s}><strong${s}>Artifact path:</strong> dist/ssr</li></ul>`);else return[e("p",null,[t("When deploying as a SPA or PWA, the distributables folder that gets generated by Quasar CLI can be served by a static webserver. However, this is not the case with an SSR (Server-side Render) build. Your distributables, in this case, contain your production webserver too – which can be tweaked from "),e("code",{class:"doc-token"},"/src-ssr"),t(".")]),e("p",null,[t("By default, the SSR distributables use "),e(c,{to:"https://expressjs.com/"},{default:a(()=>[t("Express")]),_:1}),t(", but you can replace it with your webserver of choice.")]),e("h2",{id:"serverless",class:"doc-heading doc-h2",onClick:i=>p(g)("serverless")},[t("Serverless "),e(m,{label:"@quasar/app-webpack v3.2+"})],8,["onClick"]),e("p",null,[t("If you are deploying to a Serverless service, then please read about "),e(c,{to:"/quasar-cli-webpack/developing-ssr/ssr-production-export"},{default:a(()=>[t("SSR Production Export")]),_:1}),t(" on how to prepare for it.")]),e("h2",{id:"the-distributables-folder",class:"doc-heading doc-h2",onClick:i=>p(g)("the-distributables-folder")},"The Distributables Folder",8,["onClick"]),e("p",null,[t("After building your app on SSR mode ("),e("code",{class:"doc-token"},"$ quasar build -m ssr"),t(") the folder that gets generated contains a standalone webserver tweaked for serving with SSR.")]),e("p",null,[t("You’ll notice that it contains a "),e("code",{class:"doc-token"},"package.json"),t(" file of its own. It has an npm script defined, called “start”:")]),e(p(f),null,{default:a(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token string-property property"},'"scripts"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),t(`
  `),e("span",{class:"token string-property property"},'"start"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"node index.js"'),t(`
`),e("span",{class:"token punctuation"},"}")])]),e(h)]),_:1}),e("p",null,[t("So what you need to do when deploying is to copy this distributables folder on your server, yarn/npm install the dependencies inside it, then run "),e("code",{class:"doc-token"},"$ yarn start"),t(". This boots up the webserver and starts listening for connections.")]),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("The distributables folder generated after building your app is standalone. It does NOT require the rest of your project folder to work and it does NOT depend on "),e("code",{class:"doc-token"},"@quasar/cli"),t(" being installed.")])]),e("h2",{id:"enhancing-performance",class:"doc-heading doc-h2",onClick:i=>p(g)("enhancing-performance")},"Enhancing Performance",8,["onClick"]),e("p",null,[t("By default, the webserver runs on only one of the available server’s cores. What you could do is make it use all cores. There is a solution for this: "),e(c,{to:"http://pm2.keymetrics.io/"},{default:a(()=>[t("PM2")]),_:1}),t(".")]),e("p",null,"After installing PM2 on your server, your npm start script can look like this instead:"),e(p(f),null,{default:a(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token string-property property"},'"scripts"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token punctuation"},"{"),t(`
  `),e("span",{class:"token string-property property"},'"start"'),e("span",{class:"token operator"},":"),t(),e("span",{class:"token string"},'"pm2 start index.js"'),t(`
`),e("span",{class:"token punctuation"},"}")])]),e(h)]),_:1}),e("h2",{id:"deploying-with-cleavr",class:"doc-heading doc-h2",onClick:i=>p(g)("deploying-with-cleavr")},"Deploying with Cleavr",8,["onClick"]),e("p",null,[t("You can use "),e(c,{to:"https://cleavr.io"},{default:a(()=>[t("Cleavr")]),_:1}),t(" to deploy Quasar SSR apps to several popular VPS providers. Cleavr will automatically set up PM2 with cluster mode enabled for your app.")]),e("p",null,[t("Add a new "),e("strong",null,"NodeJS SSR"),t(" site to Cleavr and then configure the web app settings with the following:")]),e("ul",null,[e("li",null,[e("strong",null,"Entry point:"),t(" index.js")]),e("li",null,[e("strong",null,"Build command:"),t(" npx quasar build --mode ssr")]),e("li",null,[e("strong",null,"Artifact path:"),t(" dist/ssr")])])]}),_:1},S))}}},w=k.setup;k.setup=(v,y)=>{const b=P();return(b.modules||(b.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-ssr/deploying.md"),w?w(v,y):void 0};const J=T(k,[["__file","deploying.md"]]);export{J as default};
