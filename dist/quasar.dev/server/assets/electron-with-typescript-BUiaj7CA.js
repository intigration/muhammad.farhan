import{mergeProps as w,withCtx as c,createTextVNode as o,createVNode as t,useSSRContext as b}from"vue";import{ssrRenderComponent as a}from"vue/server-renderer";import"quasar";import{D as T,a as l}from"./DocPage-DKr-0pQn.js";import{_ as $}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const s={__name:"electron-with-typescript",__ssrInlineRender:!0,setup(p){return(d,i,k,m)=>{i(a(T,w({title:"Electron with Typescript",desc:"(@quasar/app-webpack) How to use Typescript with Electron in Quasar",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-electron-apps/electron-with-typescript"},m),{default:c((S,n,u,e)=>{if(n)n(`<p${e}>In order to support Electron with Typescript, you will need to:</p><ol${e}><li${e}>Make sure that your project is `),n(a(l,{to:"/quasar-cli-webpack/supporting-ts"},{default:c((g,r,y,h)=>{if(r)r("configured with Typescript");else return[o("configured with Typescript")]}),_:1},u,e)),n(`.</li><li${e}>Then rename the extension for your files in /src-electron from <code class="doc-token"${e}>.js</code> to <code class="doc-token"${e}>.ts</code> and make the necessary TS code changes.</li></ol><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}><code class="doc-token"${e}>electron-packager</code> and <code class="doc-token"${e}>electron-builder</code> export their configuration types from their own packages. Since autocomplete into the <code class="doc-token"${e}>/quasar.config</code> file relies on those types, properties <code class="doc-token"${e}>electron.packager</code> and <code class="doc-token"${e}>electron.builder</code> will be fully typed only after the respective package is installed. You can force the installation of the selected bundler (depending on your <code class="doc-token"${e}>electron.bundler</code> option) by running a build command in Electron mode: <code class="doc-token"${e}>quasar build -m electron</code></p></div><p${e}>More info: `),n(a(l,{to:"/quasar-cli-webpack/supporting-ts"},{default:c((g,r,y,h)=>{if(r)r("Supporting TS");else return[o("Supporting TS")]}),_:1},u,e)),n("</p>");else return[t("p",null,"In order to support Electron with Typescript, you will need to:"),t("ol",null,[t("li",null,[o("Make sure that your project is "),t(l,{to:"/quasar-cli-webpack/supporting-ts"},{default:c(()=>[o("configured with Typescript")]),_:1}),o(".")]),t("li",null,[o("Then rename the extension for your files in /src-electron from "),t("code",{class:"doc-token"},".js"),o(" to "),t("code",{class:"doc-token"},".ts"),o(" and make the necessary TS code changes.")])]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[t("code",{class:"doc-token"},"electron-packager"),o(" and "),t("code",{class:"doc-token"},"electron-builder"),o(" export their configuration types from their own packages. Since autocomplete into the "),t("code",{class:"doc-token"},"/quasar.config"),o(" file relies on those types, properties "),t("code",{class:"doc-token"},"electron.packager"),o(" and "),t("code",{class:"doc-token"},"electron.builder"),o(" will be fully typed only after the respective package is installed. You can force the installation of the selected bundler (depending on your "),t("code",{class:"doc-token"},"electron.bundler"),o(" option) by running a build command in Electron mode: "),t("code",{class:"doc-token"},"quasar build -m electron")])]),t("p",null,[o("More info: "),t(l,{to:"/quasar-cli-webpack/supporting-ts"},{default:c(()=>[o("Supporting TS")]),_:1})])]}),_:1},k))}}},f=s.setup;s.setup=(p,d)=>{const i=b();return(i.modules||(i.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-electron-apps/electron-with-typescript.md"),f?f(p,d):void 0};const L=$(s,[["__file","electron-with-typescript.md"]]);export{L as default};
