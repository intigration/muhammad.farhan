import{resolveComponent as V,mergeProps as L,withCtx as o,unref as d,createVNode as e,createTextVNode as a,useSSRContext as P}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as w}from"./page-utils-C-QWsEHe.js";import{D as E,a as k}from"./DocPage-DKr-0pQn.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as r}from"./CopyButton-l3ndfN49.js";import{_ as M}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const b={__name:"convert-to-quasar-cli-with-vite",__ssrInlineRender:!0,setup(C){const $=[{id:"step-1-create-a-quasar-cli-with-vite-project-folder-",title:"1.1. Step 1: Create a Quasar CLI with Vite project folder:",sub:!0},{id:"step-2-copy-folders-from-original-folder",title:"1.2. Step 2: Copy folders from original folder",sub:!0},{id:"step-3-explicitly-specify-extensions-on-all-your-import-statements",title:"1.3. Step 3: Explicitly specify extensions on all your import statements",sub:!0},{id:"step-4-check-the-new-quasar-config-file",title:"1.4. Step 4: Check the new quasar.config file",sub:!0},{id:"step-5-browser-compatibility",title:"1.5. Step 5: Browser compatibility",sub:!0},{id:"step-6-ssr-related",title:"1.6. Step 6: SSR related",sub:!0},{id:"step-7-pwa-related",title:"1.7. Step 7: PWA related",sub:!0},{id:"step-8-bex-related",title:"1.8. Step 8: BEX related",sub:!0},{id:"step-9-and-were-done",title:"1.9. Step 9: And we’re done",sub:!0}];return(v,Q,S,A)=>{const h=V("q-tab-panel");Q(i(E,L({title:"Convert project to Quasar CLI with Vite",desc:"(@quasar/app-vite) How to convert a Quasar CLI with Webpack project to a Quasar CLI with Vite one.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/convert-to-quasar-cli-with-vite",toc:$},A),{default:o((j,l,f,n)=>{if(l)l(`<p${n}>This page will guide you on how to convert a Quasar CLI with Webpack (<code class="doc-token"${n}>@quasar/app-webpack</code> - formerly known as <code class="doc-token"${n}>@quasar/app</code>) project into a Quasar CLI with Vite one (<code class="doc-token"${n}>@quasar/app-vite</code>).</p><h3 id="step-1-create-a-quasar-cli-with-vite-project-folder-" class="doc-heading doc-h3"${n}>Step 1: Create a Quasar CLI with Vite project folder:</h3>`),l(i(d(g),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:o((c,s,p,t)=>{if(s)s(i(h,{class:"q-pa-none",name:"Yarn"},{default:o((q,m,y,u)=>{if(m)m(`<pre class="doc-code"${u}><code${u}>$ <span class="token function"${u}>yarn</span> create quasar
<span class="token comment"${u}># then pick &quot;App with Quasar CLI&quot;, &quot;Quasar v2&quot;, &quot;Quasar App CLI with Vite&quot;</span></code></pre>`),m(i(r,{lang:"bash"},null,y,u));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"yarn"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]}),_:1},p,t)),s(i(h,{class:"q-pa-none",name:"NPM"},{default:o((q,m,y,u)=>{if(m)m(`<pre class="doc-code"${u}><code${u}>$ <span class="token function"${u}>npm</span> init quasar
<span class="token comment"${u}># then pick &quot;App with Quasar CLI&quot;, &quot;Quasar v2&quot;, &quot;Quasar App CLI with Vite&quot;</span></code></pre>`),m(i(r,{lang:"bash"},null,y,u));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"npm"),a(` init quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]}),_:1},p,t)),s(i(h,{class:"q-pa-none",name:"PNPM"},{default:o((q,m,y,u)=>{if(m)m(`<pre class="doc-code"${u}><code${u}><span class="token comment"${u}># experimental support</span>
$ <span class="token function"${u}>pnpm</span> create quasar
<span class="token comment"${u}># then pick &quot;App with Quasar CLI&quot;, &quot;Quasar v2&quot;, &quot;Quasar App CLI with Vite&quot;</span></code></pre>`),m(i(r,{lang:"bash"},null,y,u));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ `),e("span",{class:"token function"},"pnpm"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]}),_:1},p,t)),s(i(h,{class:"q-pa-none",name:"Bun"},{default:o((q,m,y,u)=>{if(m)m(`<pre class="doc-code"${u}><code${u}><span class="token comment"${u}># experimental support</span>
$ bun create quasar
<span class="token comment"${u}># then pick &quot;App with Quasar CLI&quot;, &quot;Quasar v2&quot;, &quot;Quasar App CLI with Vite&quot;</span></code></pre>`),m(i(r,{lang:"bash"},null,y,u));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ bun create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]}),_:1},p,t));else return[e(h,{class:"q-pa-none",name:"Yarn"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"yarn"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"NPM"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"npm"),a(` init quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"PNPM"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ `),e("span",{class:"token function"},"pnpm"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"Bun"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ bun create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1})]}),_:1},f,n)),l(`<p${n}>There are significant changes to the root files so it’s easier to generate a new project folder rather than explaining each of the many changes.</p><h3 id="step-2-copy-folders-from-original-folder" class="doc-heading doc-h3"${n}>Step 2: Copy folders from original folder</h3><p${n}>From your original project folder, copy these as they are:</p><ul${n}><li${n}>/src (with small caveat; see next steps)</li><li${n}>/src-cordova</li><li${n}>/src-capacitor</li><li${n}>/src-electron</li><li${n}>/src-pwa (with small caveat; see next steps)</li><li${n}>/src-ssr (with small caveat; see next steps)</li><li${n}><s${n}>/src-bex</s> <strong${n}>Nope. Don’t!</strong></li></ul><p${n}>Move <code class="doc-token"${n}>/src/index.template.html</code> to <code class="doc-token"${n}>/index.html</code>. And make the following change:</p>`),l(i(d(g),null,{default:o((c,s,p,t)=>{if(s)s(`<pre class="doc-code"${t}><code${t}><span class="token deleted-sign deleted"${t}><span class="token prefix deleted"${t}>-</span><span class="token line"${t}> &lt;!-- DO NOT touch the following DIV --&gt;
</span><span class="token prefix deleted"${t}>-</span><span class="token line"${t}> &lt;div id=&quot;q-app&quot;&gt;&lt;/div&gt;
</span></span><span class="token inserted-sign inserted"${t}><span class="token prefix inserted"${t}>+</span><span class="token line"${t}> &lt;!-- quasar:entry-point --&gt;</span></span></code></pre>`),s(i(r,null,null,p,t));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token deleted-sign deleted"},[e("span",{class:"token prefix deleted"},"-"),e("span",{class:"token line"},` <!-- DO NOT touch the following DIV -->
`),e("span",{class:"token prefix deleted"},"-"),e("span",{class:"token line"},` <div id="q-app"></div>
`)]),e("span",{class:"token inserted-sign inserted"},[e("span",{class:"token prefix inserted"},"+"),e("span",{class:"token line"}," <!-- quasar:entry-point -->")])])]),e(r)]}),_:1},f,n)),l(`<p${n}>Also, edit <code class="doc-token"${n}>/src/router/index.js</code>:</p>`),l(i(d(g),null,{default:o((c,s,p,t)=>{if(s)s(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// old way</span>
<span class="token literal-property property"${t}>history</span><span class="token operator"${t}>:</span> <span class="token function"${t}>createHistory</span><span class="token punctuation"${t}>(</span>process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>MODE</span> <span class="token operator"${t}>===</span> <span class="token string"${t}>&#39;ssr&#39;</span> <span class="token operator"${t}>?</span> <span class="token keyword"${t}>void</span> <span class="token number"${t}>0</span> <span class="token operator"${t}>:</span> process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>VUE_ROUTER_BASE</span><span class="token punctuation"${t}>)</span>

<span class="token comment"${t}>// new way</span>
<span class="token literal-property property"${t}>history</span><span class="token operator"${t}>:</span> <span class="token function"${t}>createHistory</span><span class="token punctuation"${t}>(</span>process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>VUE_ROUTER_BASE</span><span class="token punctuation"${t}>)</span></code></pre>`),s(i(r,null,null,p,t));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"// old way"),a(`
`),e("span",{class:"token literal-property property"},"history"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token function"},"createHistory"),e("span",{class:"token punctuation"},"("),a("process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"MODE"),a(),e("span",{class:"token operator"},"==="),a(),e("span",{class:"token string"},"'ssr'"),a(),e("span",{class:"token operator"},"?"),a(),e("span",{class:"token keyword"},"void"),a(),e("span",{class:"token number"},"0"),a(),e("span",{class:"token operator"},":"),a(" process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"VUE_ROUTER_BASE"),e("span",{class:"token punctuation"},")"),a(`

`),e("span",{class:"token comment"},"// new way"),a(`
`),e("span",{class:"token literal-property property"},"history"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token function"},"createHistory"),e("span",{class:"token punctuation"},"("),a("process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"VUE_ROUTER_BASE"),e("span",{class:"token punctuation"},")")])]),e(r)]}),_:1},f,n)),l(`<h3 id="step-3-explicitly-specify-extensions-on-all-your-import-statements" class="doc-heading doc-h3"${n}>Step 3: Explicitly specify extensions on all your import statements</h3><p${n}>Make sure that all your Vue component files (SFC) are imported with their <code class="doc-token"${n}>.vue</code> extension explicitly specified. Omitting the file extension works with Webpack (due to Quasar CLI configured list of extensions for it to try), but not with Vite too.</p>`),l(i(d(g),null,{default:o((c,s,p,t)=>{if(s)s(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// BAD! Will not work:</span>
<span class="token keyword"${t}>import</span> MyComponent <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;./MyComponent&#39;</span>

<span class="token comment"${t}>// GOOD:</span>
<span class="token keyword"${t}>import</span> MyComponent <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;./MyComponent.vue&#39;</span></code></pre>`),s(i(r,null,null,p,t));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"// BAD! Will not work:"),a(`
`),e("span",{class:"token keyword"},"import"),a(" MyComponent "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'./MyComponent'"),a(`

`),e("span",{class:"token comment"},"// GOOD:"),a(`
`),e("span",{class:"token keyword"},"import"),a(" MyComponent "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'./MyComponent.vue'")])]),e(r)]}),_:1},f,n)),l(`<h3 id="step-4-check-the-new-quasar-config-file" class="doc-heading doc-h3"${n}>Step 4: Check the new quasar.config file</h3><p${n}>There are property changes in <code class="doc-token"${n}>build</code>, <code class="doc-token"${n}>devServer</code>, and all Quasar Modes (pwa, ssr, etc). The props are detailed in the `),l(i(k,{to:"/quasar-cli-vite/quasar-config-file"},{default:o((c,s,p,t)=>{if(s)s("quasar.config file");else return[a("quasar.config file")]}),_:1},f,n)),l(` page. You will have to manually port your configuration to the Quasar CLI with Vite architecture.</p><h4 id="typescript-aliases" class="doc-heading doc-h4"${n}>TypeScript Aliases</h4><p${n}>If you are using TypeScript and defined custom path aliases in <code class="doc-token"${n}>tsconfig.json &gt; compilerOptions &gt; paths</code>, they will no longer be processed automatically. See `),l(i(k,{to:"quasar-cli-vite/handling-vite#folder-aliases"},{default:o((c,s,p,t)=>{if(s)s("Folder aliases | Handling Vite");else return[a("Folder aliases | Handling Vite")]}),_:1},f,n)),l(` for available ways to handle this.</p><h3 id="step-5-browser-compatibility" class="doc-heading doc-h3"${n}>Step 5: Browser compatibility</h3><p${n}>A Quasar CLI with Webpack project relies on <code class="doc-token"${n}>/package.json &gt; browserslist</code> to specify which browsers you are targeting. That property no longer has any meaning. Projects managed by Quasar CLI with Vite work completely different and you might want to check the `),l(i(k,{to:"/quasar-cli-vite/browser-compatibility"},{default:o((c,s,p,t)=>{if(s)s("Browser Compatibility");else return[a("Browser Compatibility")]}),_:1},f,n)),l(` page.</p><h3 id="step-6-ssr-related" class="doc-heading doc-h3"${n}>Step 6: SSR related</h3><ul${n}><li${n}>Delete <code class="doc-token"${n}>/src-ssr/directives</code> folder (if you have it) – it no longer serves any purpose; check `),l(i(k,{to:"/quasar-cli-vite/developing-ssr/vue-ssr-directives"},{default:o((c,s,p,t)=>{if(s)s("Vue SSR Directives");else return[a("Vue SSR Directives")]}),_:1},f,n)),l(` page</li><li${n}>Port the <code class="doc-token"${n}>/src-ssr/production-export.js</code> file to <code class="doc-token"${n}>/src-ssr/server.js</code>; Make sure to read about the `),l(i(k,{to:"/quasar-cli-vite/developing-ssr/ssr-webserver"},{default:o((c,s,p,t)=>{if(s)s("SSR Webserver");else return[a("SSR Webserver")]}),_:1},f,n)),l(` first</li></ul><p${n}>More info: `),l(i(k,{to:"/quasar-cli-vite/developing-ssr/configuring-ssr"},{default:o((c,s,p,t)=>{if(s)s("Configuring SSR");else return[a("Configuring SSR")]}),_:1},f,n)),l(`</p><h3 id="step-7-pwa-related" class="doc-heading doc-h3"${n}>Step 7: PWA related</h3><ul${n}><li${n}><strong${n}>VERY important: BEFORE porting your files over, run command <code class="doc-token"${n}>quasar mode add pwa</code>. Otherwise all the needed packages will not be added, and your build will fail.</strong></li><li${n}>The default name of the outputted service worker file has changed from <code class="doc-token"${n}>service-worker.js</code> to <code class="doc-token"${n}>sw.js</code>. This can break your update process the first time the new app is loaded. So, if your app is in production, to ensure smooth upgrades from the previous Webpack builds, make sure the name matches the name of your previous service worker file. You can set it through `),l(i(k,{to:"/quasar-cli-vite/developing-pwa/configuring-pwa#quasar-config-file"},{default:o((c,s,p,t)=>{if(s)s("quasar.config file &gt; pwa &gt; swFilename");else return[a("quasar.config file > pwa > swFilename")]}),_:1},f,n)),l(`.</li><li${n}>Quasar CLI with Webpack relies on <code class="doc-token"${n}>quasar.config file &gt; manifest</code> to specify the manifest, but you will need to use <code class="doc-token"${n}>/src-pwa/manifest.json</code> to declare it for Quasar CLI with Vite. After declaring the manifest in <code class="doc-token"${n}>/src-pwa/manifest.json</code>, delete <code class="doc-token"${n}>quasar.config file &gt; manifest</code> section.</li><li${n}>There were also some props in the <code class="doc-token"${n}>quasar.config</code> file that are no longer available. Most notably: <code class="doc-token"${n}>metaVariables</code>, <code class="doc-token"${n}>metaVariablesFn</code>. Simply edit <code class="doc-token"${n}>/index.html</code> and add those tags directly there.</li></ul>`),l(i(d(g),{title:"/index.html"},{default:o((c,s,p,t)=>{if(s)s(`<pre class="doc-code"${t}><code${t}><span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;</span>head</span><span class="token punctuation"${t}>&gt;</span></span>
  &lt;% if (ctx.mode.pwa) { %&gt;
    <span class="token comment"${t}>&lt;!-- Define your custom PWA-related meta/link tags here. --&gt;</span>
  &lt;% } %&gt;
<span class="token tag"${t}><span class="token tag"${t}><span class="token punctuation"${t}>&lt;/</span>head</span><span class="token punctuation"${t}>&gt;</span></span></code></pre>`),s(i(r,null,null,p,t));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),a("head")]),e("span",{class:"token punctuation"},">")]),a(`
  <% if (ctx.mode.pwa) { %>
    `),e("span",{class:"token comment"},"<!-- Define your custom PWA-related meta/link tags here. -->"),a(`
  <% } %>
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),a("head")]),e("span",{class:"token punctuation"},">")])])]),e(r)]}),_:1},f,n)),l(`<p${n}>More info: `),l(i(k,{to:"/quasar-cli-vite/developing-pwa/preparation"},{default:o((c,s,p,t)=>{if(s)s("PWA - Preparation");else return[a("PWA - Preparation")]}),_:1},f,n)),l(`</p><h3 id="step-8-bex-related" class="doc-heading doc-h3"${n}>Step 8: BEX related</h3><p${n}>The BEX mode differs quite a lot. The PWA mode in a Quasar CLI with Vite project supports PWA manifest v3 and multiple content scripts. You will have to manually port over your BEX files to the new architecture, which should be fairly easy though.</p><p${n}>It’s best to <code class="doc-token"${n}>$ quasar mode add bex</code>, pick your preferred PWA manifest version (v2 or v3) and port your BEX.</p><p${n}>More info: `),l(i(k,{to:"/quasar-cli-vite/developing-browser-extensions/preparation#2-understand-the-anatomy-of-src-bex"},{default:o((c,s,p,t)=>{if(s)s("Preparation and folder structure");else return[a("Preparation and folder structure")]}),_:1},f,n)),l(" and "),l(i(k,{to:"/quasar-cli-vite/developing-browser-extensions/configuring-bex"},{default:o((c,s,p,t)=>{if(s)s("Configuring BEX");else return[a("Configuring BEX")]}),_:1},f,n)),l(`.</p><h3 id="step-9-and-were-done" class="doc-heading doc-h3"${n}>Step 9: And we’re done</h3>`),l(i(d(g),null,{default:o((c,s,p,t)=>{if(s)s(`<pre class="doc-code"${t}><code${t}>$ quasar dev
$ quasar build</code></pre>`),s(i(r,{lang:"bash"},null,p,t));else return[e("pre",{class:"doc-code"},[e("code",null,`$ quasar dev
$ quasar build`)]),e(r,{lang:"bash"})]}),_:1},f,n));else return[e("p",null,[a("This page will guide you on how to convert a Quasar CLI with Webpack ("),e("code",{class:"doc-token"},"@quasar/app-webpack"),a(" - formerly known as "),e("code",{class:"doc-token"},"@quasar/app"),a(") project into a Quasar CLI with Vite one ("),e("code",{class:"doc-token"},"@quasar/app-vite"),a(").")]),e("h3",{id:"step-1-create-a-quasar-cli-with-vite-project-folder-",class:"doc-heading doc-h3",onClick:c=>d(w)("step-1-create-a-quasar-cli-with-vite-project-folder-")},"Step 1: Create a Quasar CLI with Vite project folder:",8,["onClick"]),e(d(g),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:o(()=>[e(h,{class:"q-pa-none",name:"Yarn"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"yarn"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"NPM"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ "),e("span",{class:"token function"},"npm"),a(` init quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"PNPM"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ `),e("span",{class:"token function"},"pnpm"),a(` create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1}),e(h,{class:"q-pa-none",name:"Bun"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"# experimental support"),a(`
$ bun create quasar
`),e("span",{class:"token comment"},'# then pick "App with Quasar CLI", "Quasar v2", "Quasar App CLI with Vite"')])]),e(r,{lang:"bash"})]),_:1})]),_:1}),e("p",null,"There are significant changes to the root files so it’s easier to generate a new project folder rather than explaining each of the many changes."),e("h3",{id:"step-2-copy-folders-from-original-folder",class:"doc-heading doc-h3",onClick:c=>d(w)("step-2-copy-folders-from-original-folder")},"Step 2: Copy folders from original folder",8,["onClick"]),e("p",null,"From your original project folder, copy these as they are:"),e("ul",null,[e("li",null,"/src (with small caveat; see next steps)"),e("li",null,"/src-cordova"),e("li",null,"/src-capacitor"),e("li",null,"/src-electron"),e("li",null,"/src-pwa (with small caveat; see next steps)"),e("li",null,"/src-ssr (with small caveat; see next steps)"),e("li",null,[e("s",null,"/src-bex"),a(),e("strong",null,"Nope. Don’t!")])]),e("p",null,[a("Move "),e("code",{class:"doc-token"},"/src/index.template.html"),a(" to "),e("code",{class:"doc-token"},"/index.html"),a(". And make the following change:")]),e(d(g),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token deleted-sign deleted"},[e("span",{class:"token prefix deleted"},"-"),e("span",{class:"token line"},` <!-- DO NOT touch the following DIV -->
`),e("span",{class:"token prefix deleted"},"-"),e("span",{class:"token line"},` <div id="q-app"></div>
`)]),e("span",{class:"token inserted-sign inserted"},[e("span",{class:"token prefix inserted"},"+"),e("span",{class:"token line"}," <!-- quasar:entry-point -->")])])]),e(r)]),_:1}),e("p",null,[a("Also, edit "),e("code",{class:"doc-token"},"/src/router/index.js"),a(":")]),e(d(g),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"// old way"),a(`
`),e("span",{class:"token literal-property property"},"history"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token function"},"createHistory"),e("span",{class:"token punctuation"},"("),a("process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"MODE"),a(),e("span",{class:"token operator"},"==="),a(),e("span",{class:"token string"},"'ssr'"),a(),e("span",{class:"token operator"},"?"),a(),e("span",{class:"token keyword"},"void"),a(),e("span",{class:"token number"},"0"),a(),e("span",{class:"token operator"},":"),a(" process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"VUE_ROUTER_BASE"),e("span",{class:"token punctuation"},")"),a(`

`),e("span",{class:"token comment"},"// new way"),a(`
`),e("span",{class:"token literal-property property"},"history"),e("span",{class:"token operator"},":"),a(),e("span",{class:"token function"},"createHistory"),e("span",{class:"token punctuation"},"("),a("process"),e("span",{class:"token punctuation"},"."),a("env"),e("span",{class:"token punctuation"},"."),e("span",{class:"token constant"},"VUE_ROUTER_BASE"),e("span",{class:"token punctuation"},")")])]),e(r)]),_:1}),e("h3",{id:"step-3-explicitly-specify-extensions-on-all-your-import-statements",class:"doc-heading doc-h3",onClick:c=>d(w)("step-3-explicitly-specify-extensions-on-all-your-import-statements")},"Step 3: Explicitly specify extensions on all your import statements",8,["onClick"]),e("p",null,[a("Make sure that all your Vue component files (SFC) are imported with their "),e("code",{class:"doc-token"},".vue"),a(" extension explicitly specified. Omitting the file extension works with Webpack (due to Quasar CLI configured list of extensions for it to try), but not with Vite too.")]),e(d(g),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token comment"},"// BAD! Will not work:"),a(`
`),e("span",{class:"token keyword"},"import"),a(" MyComponent "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'./MyComponent'"),a(`

`),e("span",{class:"token comment"},"// GOOD:"),a(`
`),e("span",{class:"token keyword"},"import"),a(" MyComponent "),e("span",{class:"token keyword"},"from"),a(),e("span",{class:"token string"},"'./MyComponent.vue'")])]),e(r)]),_:1}),e("h3",{id:"step-4-check-the-new-quasar-config-file",class:"doc-heading doc-h3",onClick:c=>d(w)("step-4-check-the-new-quasar-config-file")},"Step 4: Check the new quasar.config file",8,["onClick"]),e("p",null,[a("There are property changes in "),e("code",{class:"doc-token"},"build"),a(", "),e("code",{class:"doc-token"},"devServer"),a(", and all Quasar Modes (pwa, ssr, etc). The props are detailed in the "),e(k,{to:"/quasar-cli-vite/quasar-config-file"},{default:o(()=>[a("quasar.config file")]),_:1}),a(" page. You will have to manually port your configuration to the Quasar CLI with Vite architecture.")]),e("h4",{id:"typescript-aliases",class:"doc-heading doc-h4",onClick:c=>d(w)("typescript-aliases")},"TypeScript Aliases",8,["onClick"]),e("p",null,[a("If you are using TypeScript and defined custom path aliases in "),e("code",{class:"doc-token"},"tsconfig.json > compilerOptions > paths"),a(", they will no longer be processed automatically. See "),e(k,{to:"quasar-cli-vite/handling-vite#folder-aliases"},{default:o(()=>[a("Folder aliases | Handling Vite")]),_:1}),a(" for available ways to handle this.")]),e("h3",{id:"step-5-browser-compatibility",class:"doc-heading doc-h3",onClick:c=>d(w)("step-5-browser-compatibility")},"Step 5: Browser compatibility",8,["onClick"]),e("p",null,[a("A Quasar CLI with Webpack project relies on "),e("code",{class:"doc-token"},"/package.json > browserslist"),a(" to specify which browsers you are targeting. That property no longer has any meaning. Projects managed by Quasar CLI with Vite work completely different and you might want to check the "),e(k,{to:"/quasar-cli-vite/browser-compatibility"},{default:o(()=>[a("Browser Compatibility")]),_:1}),a(" page.")]),e("h3",{id:"step-6-ssr-related",class:"doc-heading doc-h3",onClick:c=>d(w)("step-6-ssr-related")},"Step 6: SSR related",8,["onClick"]),e("ul",null,[e("li",null,[a("Delete "),e("code",{class:"doc-token"},"/src-ssr/directives"),a(" folder (if you have it) – it no longer serves any purpose; check "),e(k,{to:"/quasar-cli-vite/developing-ssr/vue-ssr-directives"},{default:o(()=>[a("Vue SSR Directives")]),_:1}),a(" page")]),e("li",null,[a("Port the "),e("code",{class:"doc-token"},"/src-ssr/production-export.js"),a(" file to "),e("code",{class:"doc-token"},"/src-ssr/server.js"),a("; Make sure to read about the "),e(k,{to:"/quasar-cli-vite/developing-ssr/ssr-webserver"},{default:o(()=>[a("SSR Webserver")]),_:1}),a(" first")])]),e("p",null,[a("More info: "),e(k,{to:"/quasar-cli-vite/developing-ssr/configuring-ssr"},{default:o(()=>[a("Configuring SSR")]),_:1})]),e("h3",{id:"step-7-pwa-related",class:"doc-heading doc-h3",onClick:c=>d(w)("step-7-pwa-related")},"Step 7: PWA related",8,["onClick"]),e("ul",null,[e("li",null,[e("strong",null,[a("VERY important: BEFORE porting your files over, run command "),e("code",{class:"doc-token"},"quasar mode add pwa"),a(". Otherwise all the needed packages will not be added, and your build will fail.")])]),e("li",null,[a("The default name of the outputted service worker file has changed from "),e("code",{class:"doc-token"},"service-worker.js"),a(" to "),e("code",{class:"doc-token"},"sw.js"),a(". This can break your update process the first time the new app is loaded. So, if your app is in production, to ensure smooth upgrades from the previous Webpack builds, make sure the name matches the name of your previous service worker file. You can set it through "),e(k,{to:"/quasar-cli-vite/developing-pwa/configuring-pwa#quasar-config-file"},{default:o(()=>[a("quasar.config file > pwa > swFilename")]),_:1}),a(".")]),e("li",null,[a("Quasar CLI with Webpack relies on "),e("code",{class:"doc-token"},"quasar.config file > manifest"),a(" to specify the manifest, but you will need to use "),e("code",{class:"doc-token"},"/src-pwa/manifest.json"),a(" to declare it for Quasar CLI with Vite. After declaring the manifest in "),e("code",{class:"doc-token"},"/src-pwa/manifest.json"),a(", delete "),e("code",{class:"doc-token"},"quasar.config file > manifest"),a(" section.")]),e("li",null,[a("There were also some props in the "),e("code",{class:"doc-token"},"quasar.config"),a(" file that are no longer available. Most notably: "),e("code",{class:"doc-token"},"metaVariables"),a(", "),e("code",{class:"doc-token"},"metaVariablesFn"),a(". Simply edit "),e("code",{class:"doc-token"},"/index.html"),a(" and add those tags directly there.")])]),e(d(g),{title:"/index.html"},{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),a("head")]),e("span",{class:"token punctuation"},">")]),a(`
  <% if (ctx.mode.pwa) { %>
    `),e("span",{class:"token comment"},"<!-- Define your custom PWA-related meta/link tags here. -->"),a(`
  <% } %>
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),a("head")]),e("span",{class:"token punctuation"},">")])])]),e(r)]),_:1}),e("p",null,[a("More info: "),e(k,{to:"/quasar-cli-vite/developing-pwa/preparation"},{default:o(()=>[a("PWA - Preparation")]),_:1})]),e("h3",{id:"step-8-bex-related",class:"doc-heading doc-h3",onClick:c=>d(w)("step-8-bex-related")},"Step 8: BEX related",8,["onClick"]),e("p",null,"The BEX mode differs quite a lot. The PWA mode in a Quasar CLI with Vite project supports PWA manifest v3 and multiple content scripts. You will have to manually port over your BEX files to the new architecture, which should be fairly easy though."),e("p",null,[a("It’s best to "),e("code",{class:"doc-token"},"$ quasar mode add bex"),a(", pick your preferred PWA manifest version (v2 or v3) and port your BEX.")]),e("p",null,[a("More info: "),e(k,{to:"/quasar-cli-vite/developing-browser-extensions/preparation#2-understand-the-anatomy-of-src-bex"},{default:o(()=>[a("Preparation and folder structure")]),_:1}),a(" and "),e(k,{to:"/quasar-cli-vite/developing-browser-extensions/configuring-bex"},{default:o(()=>[a("Configuring BEX")]),_:1}),a(".")]),e("h3",{id:"step-9-and-were-done",class:"doc-heading doc-h3",onClick:c=>d(w)("step-9-and-were-done")},"Step 9: And we’re done",8,["onClick"]),e(d(g),null,{default:o(()=>[e("pre",{class:"doc-code"},[e("code",null,`$ quasar dev
$ quasar build`)]),e(r,{lang:"bash"})]),_:1})]}),_:1},S))}}},x=b.setup;b.setup=(C,$)=>{const v=P();return(v.modules||(v.modules=new Set)).add("src/pages/quasar-cli-vite/convert-to-quasar-cli-with-vite.md"),x?x(C,$):void 0};const J=M(b,[["__file","convert-to-quasar-cli-with-vite.md"]]);export{J as default};
