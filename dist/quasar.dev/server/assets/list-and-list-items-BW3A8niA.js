import{provide as y,mergeProps as L,withCtx as r,createTextVNode as e,unref as p,createVNode as t,useSSRContext as C}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as k}from"./page-utils-C-QWsEHe.js";import{D as E,a as m}from"./DocPage-DKr-0pQn.js";import{D as s}from"./DocExample-BcaABDtE.js";import{D as d}from"./DocApi-Df9ryd6x.js";import{D as Q}from"./DocPrerender-DPOnWPFO.js";import{C as v}from"./CopyButton-l3ndfN49.js";import{_ as A}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const $={__name:"list-and-list-items",__ssrInlineRender:!0,setup(b){y("_q_ex",{name:"QItem"});const h=[{name:"Expansion Item",category:"Vue Components",path:"/vue-components/expansion-item"},{name:"Slide Item",category:"Vue Components",path:"/vue-components/slide-item"},{name:"Separator",category:"Vue Components",path:"/vue-components/separator"}],f=[{id:"qlist-api",title:"2. QList API",deep:!0},{id:"qitem-api",title:"3. QItem API",deep:!0},{id:"qitemsection-api",title:"4. QItemSection API",deep:!0},{id:"qitemlabel-api",title:"5. QItemLabel API",deep:!0},{id:"usage",title:"6. Usage"},{id:"basic",title:"6.1. Basic",sub:!0},{id:"qitemsection",title:"6.2. QItemSection",sub:!0},{id:"active-state",title:"6.3. Active state",sub:!0},{id:"qitemlabel",title:"6.4. QItemLabel",sub:!0},{id:"more-involved-examples",title:"6.5. More involved examples",sub:!0},{id:"connecting-to-vue-router",title:"6.6. Connecting to Vue Router",sub:!0}];return(D,w,S,q)=>{w(i(E,L({title:"List and List Items",desc:"How to use the QList, QItem, QItemSection and QItemLabel Vue components.",heading:"","edit-link":"vue-components/list-and-list-items",toc:f,related:h},q),{default:r((R,o,l,n)=>{if(o)o(`<p${n}>The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too.</p><p${n}>Lists can encapsulate Items or Item-like components, for example `),o(i(m,{to:"/vue-components/expansion-item"},{default:r((u,c,g,a)=>{if(c)c("QExpansionItem");else return[e("QExpansionItem")]}),_:1},l,n)),o(" or "),o(i(m,{to:"/vue-components/slide-item"},{default:r((u,c,g,a)=>{if(c)c("QSlideItem");else return[e("QSlideItem")]}),_:1},l,n)),o(". Also "),o(i(m,{to:"/vue-components/separator"},{default:r((u,c,g,a)=>{if(c)c("QSeparator");else return[e("QSeparator")]}),_:1},l,n)),o(` can be used to split up sections, where needed.</p><p${n}>List Items have the following pre-built child components:</p><ul${n}><li${n}><strong${n}>QItemSection</strong> - An item section can have several uses for particular content. They are controlled via the <code class="doc-token"${n}>avatar</code>, <code class="doc-token"${n}>thumbnail</code> and <code class="doc-token"${n}>side</code> props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).</li><li${n}><strong${n}>QItemLabel</strong> - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.</li></ul>`),o(i(d,{file:"QList"},null,l,n)),o(i(d,{file:"QItem"},null,l,n)),o(i(d,{file:"QItemSection"},null,l,n)),o(i(d,{file:"QItemLabel"},null,l,n)),o(`<h2 id="usage" class="doc-heading doc-h2"${n}>Usage</h2><h3 id="basic" class="doc-heading doc-h3"${n}>Basic</h3>`),o(i(s,{title:"Basic",file:"Basic"},null,l,n)),o(i(s,{title:"Force dark mode",file:"Dark"},null,l,n)),o(i(s,{title:"Dense",file:"Dense"},null,l,n)),o(`<h3 id="qitemsection" class="doc-heading doc-h3"${n}>QItemSection</h3>`),o(i(s,{title:"Left avatar/thumbnail QItemSection",file:"AvatarLeft"},null,l,n)),o(i(s,{title:"Right avatar/thumbnail QItemSection",file:"AvatarRight"},null,l,n)),o(`<div class="doc-note doc-note--tip"${n}><p class="doc-note__title"${n}>TIP</p><p${n}>When you have multi-line items, you could use <code class="doc-token"${n}>top</code> property on QItemSection side/avatar to align the sections to top, overriding default middle alignment.</p></div>`),o(i(s,{title:"Side QItemSection",file:"SideSection"},null,l,n)),o(`<h3 id="active-state" class="doc-heading doc-h3"${n}>Active state</h3>`),o(i(s,{title:"Active prop",file:"ActiveState"},null,l,n)),o(`<h3 id="qitemlabel" class="doc-heading doc-h3"${n}>QItemLabel</h3><div class="doc-note doc-note--warning"${n}><p class="doc-note__title"${n}>WARNING</p><p${n}>Notice you can handle label overflow with <code class="doc-token"${n}>lines</code> prop, telling it how many lines it can span. However, this feature uses Webkit specific CSS so won’t work in IE/Edge.</p></div>`),o(i(s,{title:"ItemLabel",file:"ItemLabel"},null,l,n)),o(`<h3 id="more-involved-examples" class="doc-heading doc-h3"${n}>More involved examples</h3>`),o(i(s,{title:"Contact list",file:"ExampleContacts"},null,l,n)),o(i(s,{title:"Settings",file:"ExampleSettings"},null,l,n)),o(i(s,{title:"Emails",file:"ExampleEmails"},null,l,n)),o(i(s,{title:"Folder listing",file:"ExampleFolders"},null,l,n)),o(`<p${n}>For demoing purposes in the example below, we’re using the <code class="doc-token"${n}>active</code> prop instead of QItem’s router props (<code class="doc-token"${n}>to</code>, <code class="doc-token"${n}>exact</code>). UMD doesn’t have Vue Router so you wouldn’t be able to play with it in Codepen/jsFiddle.</p>`),o(i(s,{title:"Menu",file:"ExampleMenu"},null,l,n)),o(`<div class="doc-note doc-note--tip"${n}><p class="doc-note__title"${n}>TIP</p><p${n}>For more complex menus, consider also using `),o(i(m,{to:"/vue-components/expansion-item"},{default:r((u,c,g,a)=>{if(c)c("QExpansionItem");else return[e("QExpansionItem")]}),_:1},l,n)),o(`.</p></div><h3 id="connecting-to-vue-router" class="doc-heading doc-h3"${n}>Connecting to Vue Router</h3><p${n}>You can use QItems together with Vue Router through <code class="doc-token"${n}>&lt;router-link&gt;</code> properties bound to it. These allow for listening to the current app route and also triggering a route when clicked/tapped.</p>`),o(i(p(Q),null,{default:r((u,c,g,a)=>{if(c)c(`<pre class="doc-code"${a}><code${a}><span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>q-item</span> <span class="token attr-name"${a}>to</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>/inbox<span class="token punctuation"${a}>&quot;</span></span> <span class="token attr-name"${a}>exact</span><span class="token punctuation"${a}>&gt;</span></span>
  <span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>q-item-section</span> <span class="token attr-name"${a}>avatar</span><span class="token punctuation"${a}>&gt;</span></span>
    <span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>q-icon</span> <span class="token attr-name"${a}>name</span><span class="token attr-value"${a}><span class="token punctuation attr-equals"${a}>=</span><span class="token punctuation"${a}>&quot;</span>inbox<span class="token punctuation"${a}>&quot;</span></span> <span class="token punctuation"${a}>/&gt;</span></span>
  <span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>q-item-section</span><span class="token punctuation"${a}>&gt;</span></span>

  <span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;</span>q-item-section</span><span class="token punctuation"${a}>&gt;</span></span>
    Inbox
  <span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>q-item-section</span><span class="token punctuation"${a}>&gt;</span></span>
<span class="token tag"${a}><span class="token tag"${a}><span class="token punctuation"${a}>&lt;/</span>q-item</span><span class="token punctuation"${a}>&gt;</span></span></code></pre>`),c(i(v,null,null,g,a));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item")]),e(),t("span",{class:"token attr-name"},"to"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("/inbox"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token attr-name"},"exact"),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item-section")]),e(),t("span",{class:"token attr-name"},"avatar"),t("span",{class:"token punctuation"},">")]),e(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-icon")]),e(),t("span",{class:"token attr-name"},"name"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("inbox"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token punctuation"},"/>")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`

  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`
    Inbox
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item")]),t("span",{class:"token punctuation"},">")])])]),t(v)]}),_:1},l,n)),o(`<p${n}>You can also delay, cancel or redirect navigation, as seen below. For a more in-depth description of the <code class="doc-token"${n}>@click</code> event being used below, please refer to QItem API card at the top of the page.</p>`),o(i(s,{title:"Links with delayed, cancelled or redirected navigation (v2.9+)",file:"LinksWithGo","no-edit":""},null,l,n));else return[t("p",null,"The QList and QItem are a group of components which can work together to present multiple line items vertically as a single continuous element. They are best suited for displaying similar data types as rows of information, such as a contact list, a playlist or menu. Each row is called an Item. QItem can also be used outside of a QList too."),t("p",null,[e("Lists can encapsulate Items or Item-like components, for example "),t(m,{to:"/vue-components/expansion-item"},{default:r(()=>[e("QExpansionItem")]),_:1}),e(" or "),t(m,{to:"/vue-components/slide-item"},{default:r(()=>[e("QSlideItem")]),_:1}),e(". Also "),t(m,{to:"/vue-components/separator"},{default:r(()=>[e("QSeparator")]),_:1}),e(" can be used to split up sections, where needed.")]),t("p",null,"List Items have the following pre-built child components:"),t("ul",null,[t("li",null,[t("strong",null,"QItemSection"),e(" - An item section can have several uses for particular content. They are controlled via the "),t("code",{class:"doc-token"},"avatar"),e(", "),t("code",{class:"doc-token"},"thumbnail"),e(" and "),t("code",{class:"doc-token"},"side"),e(" props. With no props, it will render the main section of your QItem (which spans to the fullest of available space).")]),t("li",null,[t("strong",null,"QItemLabel"),e(" - An item label is useful for predefined text content type within a QItemSection, or for header-like content of the QList itself.")])]),t(d,{file:"QList"}),t(d,{file:"QItem"}),t(d,{file:"QItemSection"}),t(d,{file:"QItemLabel"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:u=>p(k)("usage")},"Usage",8,["onClick"]),t("h3",{id:"basic",class:"doc-heading doc-h3",onClick:u=>p(k)("basic")},"Basic",8,["onClick"]),t(s,{title:"Basic",file:"Basic"}),t(s,{title:"Force dark mode",file:"Dark"}),t(s,{title:"Dense",file:"Dense"}),t("h3",{id:"qitemsection",class:"doc-heading doc-h3",onClick:u=>p(k)("qitemsection")},"QItemSection",8,["onClick"]),t(s,{title:"Left avatar/thumbnail QItemSection",file:"AvatarLeft"}),t(s,{title:"Right avatar/thumbnail QItemSection",file:"AvatarRight"}),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[e("When you have multi-line items, you could use "),t("code",{class:"doc-token"},"top"),e(" property on QItemSection side/avatar to align the sections to top, overriding default middle alignment.")])]),t(s,{title:"Side QItemSection",file:"SideSection"}),t("h3",{id:"active-state",class:"doc-heading doc-h3",onClick:u=>p(k)("active-state")},"Active state",8,["onClick"]),t(s,{title:"Active prop",file:"ActiveState"}),t("h3",{id:"qitemlabel",class:"doc-heading doc-h3",onClick:u=>p(k)("qitemlabel")},"QItemLabel",8,["onClick"]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[e("Notice you can handle label overflow with "),t("code",{class:"doc-token"},"lines"),e(" prop, telling it how many lines it can span. However, this feature uses Webkit specific CSS so won’t work in IE/Edge.")])]),t(s,{title:"ItemLabel",file:"ItemLabel"}),t("h3",{id:"more-involved-examples",class:"doc-heading doc-h3",onClick:u=>p(k)("more-involved-examples")},"More involved examples",8,["onClick"]),t(s,{title:"Contact list",file:"ExampleContacts"}),t(s,{title:"Settings",file:"ExampleSettings"}),t(s,{title:"Emails",file:"ExampleEmails"}),t(s,{title:"Folder listing",file:"ExampleFolders"}),t("p",null,[e("For demoing purposes in the example below, we’re using the "),t("code",{class:"doc-token"},"active"),e(" prop instead of QItem’s router props ("),t("code",{class:"doc-token"},"to"),e(", "),t("code",{class:"doc-token"},"exact"),e("). UMD doesn’t have Vue Router so you wouldn’t be able to play with it in Codepen/jsFiddle.")]),t(s,{title:"Menu",file:"ExampleMenu"}),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[e("For more complex menus, consider also using "),t(m,{to:"/vue-components/expansion-item"},{default:r(()=>[e("QExpansionItem")]),_:1}),e(".")])]),t("h3",{id:"connecting-to-vue-router",class:"doc-heading doc-h3",onClick:u=>p(k)("connecting-to-vue-router")},"Connecting to Vue Router",8,["onClick"]),t("p",null,[e("You can use QItems together with Vue Router through "),t("code",{class:"doc-token"},"<router-link>"),e(" properties bound to it. These allow for listening to the current app route and also triggering a route when clicked/tapped.")]),t(p(Q),null,{default:r(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item")]),e(),t("span",{class:"token attr-name"},"to"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("/inbox"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token attr-name"},"exact"),t("span",{class:"token punctuation"},">")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item-section")]),e(),t("span",{class:"token attr-name"},"avatar"),t("span",{class:"token punctuation"},">")]),e(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-icon")]),e(),t("span",{class:"token attr-name"},"name"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("inbox"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token punctuation"},"/>")]),e(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`

  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`
    Inbox
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item-section")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("q-item")]),t("span",{class:"token punctuation"},">")])])]),t(v)]),_:1}),t("p",null,[e("You can also delay, cancel or redirect navigation, as seen below. For a more in-depth description of the "),t("code",{class:"doc-token"},"@click"),e(" event being used below, please refer to QItem API card at the top of the page.")]),t(s,{title:"Links with delayed, cancelled or redirected navigation (v2.9+)",file:"LinksWithGo","no-edit":""})]}),_:1},S))}}},x=$.setup;$.setup=(b,h)=>{const f=C();return(f.modules||(f.modules=new Set)).add("src/pages/vue-components/list-and-list-items.md"),x?x(b,h):void 0};const tt=A($,[["__file","list-and-list-items.md"]]);export{tt as default};
