import{mergeProps as q,withCtx as i,createTextVNode as a,unref as d,createVNode as n,useSSRContext as D}from"vue";import{ssrRenderComponent as p}from"vue/server-renderer";import"quasar";import{D as C,a as c}from"./DocPage-DKr-0pQn.js";import{D as $}from"./DocTree-Kz2iQlb5.js";import{D as m}from"./DocPrerender-DPOnWPFO.js";import{C as r}from"./CopyButton-l3ndfN49.js";import{_ as j}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const v={__name:"provide-a-directive",__ssrInlineRender:!0,setup(g){const f={tree:{l:".",c:[{l:"package.json"},{l:"src",c:[{l:"boot",e:"folder to contain boot code",c:[{l:"register-my-directive.js",e:"boot file for directive"}]},{l:"directive",e:"folder to contain directive",c:[{l:"MyDirective.js",e:"directive file"}]},{l:"index.js",e:"Described in Index API"}]}]}};return(h,y,b,x)=>{y(p(C,q({title:"Providing a directive",desc:"Tips and tricks on how to provide a Vue directive to the host app of a Quasar App Extension.",heading:"","edit-link":"app-extensions/tips-and-tricks/provide-a-directive"},x),{default:i((Q,o,u,s)=>{if(o)o(`<p${s}>This guide is for when you want to create a new directive and provide it through an App Extension, which will inject it into the hosting app.</p><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>To create an App Extension project folder, please first read the `),o(p(c,{to:"/app-extensions/development-guide/introduction"},{default:i((k,e,l,t)=>{if(e)e("Development Guide &gt; Introduction");else return[a("Development Guide > Introduction")]}),_:1},u,s)),o(`.</p></div><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>Full Example</p><p${s}>To see an example of what we will build, head over to `),o(p(c,{to:"https://github.com/quasarframework/app-extension-examples/tree/v2/my-directive"},{default:i((k,e,l,t)=>{if(e)e("MyDirective full example");else return[a("MyDirective full example")]}),_:1},u,s)),o(`, which is a GitHub repo with this App Extension.</p></div><p${s}>Create a folder structure to keep your code modularized and organized. For instance, for a directive, create a structure that looks like this:</p>`),o(p($,{def:f.tree},null,u,s)),o(`<p${s}>Now, you need to handle registering your Vue directive. You do this with the <code class="doc-token"${s}>/index.js</code> file (described in the `),o(p(c,{to:"/app-extensions/development-guide/index-api"},{default:i((k,e,l,t)=>{if(e)e("Index API");else return[a("Index API")]}),_:1},u,s)),o(`) that was created when you set up your new App Extension.</p><p${s}>Letâ€™s break it down.</p>`),o(p(d(m),{title:"File: /index.js"},{default:i((k,e,l,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token keyword"${t}>export</span> <span class="token keyword"${t}>default</span> <span class="token keyword"${t}>function</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>api</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
  <span class="token comment"${t}>// (Optional!)</span>
  <span class="token comment"${t}>// Quasar compatibility check; you may need</span>
  <span class="token comment"${t}>// hard dependencies, as in a minimum version of the &quot;quasar&quot;</span>
  <span class="token comment"${t}>// package or a minimum version of Quasar App CLI</span>
  api<span class="token punctuation"${t}>.</span><span class="token function"${t}>compatibleWith</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;quasar&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;^2.0.0&#39;</span><span class="token punctuation"${t}>)</span>

  <span class="token keyword"${t}>if</span> <span class="token punctuation"${t}>(</span>api<span class="token punctuation"${t}>.</span>hasVite <span class="token operator"${t}>===</span> <span class="token boolean"${t}>true</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    api<span class="token punctuation"${t}>.</span><span class="token function"${t}>compatibleWith</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;@quasar/app-vite&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;^2.0.0-beta.1&#39;</span><span class="token punctuation"${t}>)</span>
  <span class="token punctuation"${t}>}</span>
  <span class="token keyword"${t}>else</span> <span class="token punctuation"${t}>{</span> <span class="token comment"${t}>// api.hasWebpack === true</span>
    api<span class="token punctuation"${t}>.</span><span class="token function"${t}>compatibleWith</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;@quasar/app-webpack&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;^4.0.0-beta.1&#39;</span><span class="token punctuation"${t}>)</span>
  <span class="token punctuation"${t}>}</span>

  <span class="token comment"${t}>// Here we extend the /quasar.config file, so we can add</span>
  <span class="token comment"${t}>// a boot file which registers our new Vue directive;</span>
  <span class="token comment"${t}>// &quot;extendConf&quot; will be defined below (keep reading the tutorial)</span>
  api<span class="token punctuation"${t}>.</span><span class="token function"${t}>extendQuasarConf</span><span class="token punctuation"${t}>(</span>extendConf<span class="token punctuation"${t}>)</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(r,null,null,l,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"api"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// (Optional!)"),a(`
  `),n("span",{class:"token comment"},"// Quasar compatibility check; you may need"),a(`
  `),n("span",{class:"token comment"},'// hard dependencies, as in a minimum version of the "quasar"'),a(`
  `),n("span",{class:"token comment"},"// package or a minimum version of Quasar App CLI"),a(`
  api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'quasar'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^2.0.0'"),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("api"),n("span",{class:"token punctuation"},"."),a("hasVite "),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@quasar/app-vite'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^2.0.0-beta.1'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token comment"},"// api.hasWebpack === true"),a(`
    api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@quasar/app-webpack'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^4.0.0-beta.1'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`

  `),n("span",{class:"token comment"},"// Here we extend the /quasar.config file, so we can add"),a(`
  `),n("span",{class:"token comment"},"// a boot file which registers our new Vue directive;"),a(`
  `),n("span",{class:"token comment"},'// "extendConf" will be defined below (keep reading the tutorial)'),a(`
  api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"extendQuasarConf"),n("span",{class:"token punctuation"},"("),a("extendConf"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]}),_:1},u,s)),o(`<p${s}>The first group does a compatibility check with Quasar (which is optional, but recommended). If your component is using features of Quasar that were available after a certain version, you can make sure that the version of Quasar installed is the correct one.</p><div class="doc-note doc-note--tip"${s}><p class="doc-note__title"${s}>TIP</p><p${s}>Not only can you do a <code class="doc-token"${s}>api.compatibleWith()</code> to check against Quasar packages, but with any other available packages (that you do not supply yourself through your App Extension) as well. Please read `),o(p(c,{to:"/app-extensions/development-guide/introduction#handling-package-dependencies"},{default:i((k,e,l,t)=>{if(e)e("Handling package dependencies");else return[a("Handling package dependencies")]}),_:1},u,s)),o(` section from the App Extension Development Guide &gt; Introduction page for more information.</p></div><p${s}>The second group tells Quasar to call our custom function when the <code class="doc-token"${s}>extendQuasarConf</code> CLI life-cycle hook is called. It would look something like this:</p>`),o(p(d(m),{title:"File: /index.js"},{default:i((k,e,l,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token keyword"${t}>function</span> <span class="token function"${t}>extendConf</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}>conf<span class="token punctuation"${t}>,</span> api</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
  <span class="token comment"${t}>// make sure my-directive boot file is registered</span>
  conf<span class="token punctuation"${t}>.</span>boot<span class="token punctuation"${t}>.</span><span class="token function"${t}>push</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;~quasar-app-extension-my-directive/src/boot/register-my-directive.js&#39;</span><span class="token punctuation"${t}>)</span>

  <span class="token comment"${t}>// @quasar/app-vite does not need this</span>
  <span class="token keyword"${t}>if</span> <span class="token punctuation"${t}>(</span>api<span class="token punctuation"${t}>.</span>hasVite <span class="token operator"${t}>!==</span> <span class="token boolean"${t}>true</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// make sure boot &amp; other files get transpiled</span>
    conf<span class="token punctuation"${t}>.</span>build<span class="token punctuation"${t}>.</span>transpileDependencies<span class="token punctuation"${t}>.</span><span class="token function"${t}>push</span><span class="token punctuation"${t}>(</span><span class="token regex"${t}><span class="token regex-delimiter"${t}>/</span><span class="token regex-source language-regex"${t}>quasar-app-extension-my-directive[\\\\/]src</span><span class="token regex-delimiter"${t}>/</span></span><span class="token punctuation"${t}>)</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(r,null,null,l,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"extendConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[a("conf"),n("span",{class:"token punctuation"},","),a(" api")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// make sure my-directive boot file is registered"),a(`
  conf`),n("span",{class:"token punctuation"},"."),a("boot"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'~quasar-app-extension-my-directive/src/boot/register-my-directive.js'"),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token comment"},"// @quasar/app-vite does not need this"),a(`
  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("api"),n("span",{class:"token punctuation"},"."),a("hasVite "),n("span",{class:"token operator"},"!=="),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// make sure boot & other files get transpiled"),a(`
    conf`),n("span",{class:"token punctuation"},"."),a("build"),n("span",{class:"token punctuation"},"."),a("transpileDependencies"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"quasar-app-extension-my-directive[\\\\/]src"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]}),_:1},u,s)),o(`<p${s}>Finally, letâ€™s see how the boot file would look like. Make sure that you read the `),o(p(c,{to:"/quasar-cli-vite/boot-files"},{default:i((k,e,l,t)=>{if(e)e("@quasar/app-vite Boot files");else return[a("@quasar/app-vite Boot files")]}),_:1},u,s)),o(" / "),o(p(c,{to:"/quasar-cli-webpack/boot-files"},{default:i((k,e,l,t)=>{if(e)e("@quasar/app-webpack Boot files");else return[a("@quasar/app-webpack Boot files")]}),_:1},u,s)),o(" documentation and understand what a Boot file is first.</p>"),o(p(d(m),{title:"File: /src/boot/my-directive.js"},{default:i((k,e,l,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token keyword"${t}>import</span> MyDirective <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;../directive/MyDirective.js&#39;</span>

<span class="token comment"${t}>// We globally register our directive with Vue;</span>
<span class="token comment"${t}>// Remember that all directives in Vue will start with &#39;v-&#39;</span>
<span class="token comment"${t}>// but that should not be part of your directive name</span>
<span class="token comment"${t}>// https://vuejs.org/guide/custom-directive.html#custom-directives</span>
<span class="token comment"${t}>// &#39;my-directive&#39; will be used as &#39;v-my-directive&#39;</span>
<span class="token keyword"${t}>export</span> <span class="token keyword"${t}>default</span> <span class="token punctuation"${t}>(</span><span class="token parameter"${t}><span class="token punctuation"${t}>{</span> app <span class="token punctuation"${t}>}</span></span><span class="token punctuation"${t}>)</span> <span class="token operator"${t}>=&gt;</span> <span class="token punctuation"${t}>{</span>
  app<span class="token punctuation"${t}>.</span><span class="token function"${t}>directive</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;my-directive&#39;</span><span class="token punctuation"${t}>,</span> MyDirective<span class="token punctuation"${t}>)</span>
<span class="token punctuation"${t}>}</span></code></pre>`),e(p(r,null,null,l,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(" MyDirective "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'../directive/MyDirective.js'"),a(`

`),n("span",{class:"token comment"},"// We globally register our directive with Vue;"),a(`
`),n("span",{class:"token comment"},"// Remember that all directives in Vue will start with 'v-'"),a(`
`),n("span",{class:"token comment"},"// but that should not be part of your directive name"),a(`
`),n("span",{class:"token comment"},"// https://vuejs.org/guide/custom-directive.html#custom-directives"),a(`
`),n("span",{class:"token comment"},"// 'my-directive' will be used as 'v-my-directive'"),a(`
`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token punctuation"},"{"),a(" app "),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"directive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'my-directive'"),n("span",{class:"token punctuation"},","),a(" MyDirective"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]}),_:1},u,s));else return[n("p",null,"This guide is for when you want to create a new directive and provide it through an App Extension, which will inject it into the hosting app."),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("To create an App Extension project folder, please first read the "),n(c,{to:"/app-extensions/development-guide/introduction"},{default:i(()=>[a("Development Guide > Introduction")]),_:1}),a(".")])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"Full Example"),n("p",null,[a("To see an example of what we will build, head over to "),n(c,{to:"https://github.com/quasarframework/app-extension-examples/tree/v2/my-directive"},{default:i(()=>[a("MyDirective full example")]),_:1}),a(", which is a GitHub repo with this App Extension.")])]),n("p",null,"Create a folder structure to keep your code modularized and organized. For instance, for a directive, create a structure that looks like this:"),n($,{def:f.tree},null,8,["def"]),n("p",null,[a("Now, you need to handle registering your Vue directive. You do this with the "),n("code",{class:"doc-token"},"/index.js"),a(" file (described in the "),n(c,{to:"/app-extensions/development-guide/index-api"},{default:i(()=>[a("Index API")]),_:1}),a(") that was created when you set up your new App Extension.")]),n("p",null,"Letâ€™s break it down."),n(d(m),{title:"File: /index.js"},{default:i(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"api"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// (Optional!)"),a(`
  `),n("span",{class:"token comment"},"// Quasar compatibility check; you may need"),a(`
  `),n("span",{class:"token comment"},'// hard dependencies, as in a minimum version of the "quasar"'),a(`
  `),n("span",{class:"token comment"},"// package or a minimum version of Quasar App CLI"),a(`
  api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'quasar'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^2.0.0'"),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("api"),n("span",{class:"token punctuation"},"."),a("hasVite "),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@quasar/app-vite'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^2.0.0-beta.1'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token comment"},"// api.hasWebpack === true"),a(`
    api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"compatibleWith"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@quasar/app-webpack'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token string"},"'^4.0.0-beta.1'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`

  `),n("span",{class:"token comment"},"// Here we extend the /quasar.config file, so we can add"),a(`
  `),n("span",{class:"token comment"},"// a boot file which registers our new Vue directive;"),a(`
  `),n("span",{class:"token comment"},'// "extendConf" will be defined below (keep reading the tutorial)'),a(`
  api`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"extendQuasarConf"),n("span",{class:"token punctuation"},"("),a("extendConf"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]),_:1}),n("p",null,"The first group does a compatibility check with Quasar (which is optional, but recommended). If your component is using features of Quasar that were available after a certain version, you can make sure that the version of Quasar installed is the correct one."),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("Not only can you do a "),n("code",{class:"doc-token"},"api.compatibleWith()"),a(" to check against Quasar packages, but with any other available packages (that you do not supply yourself through your App Extension) as well. Please read "),n(c,{to:"/app-extensions/development-guide/introduction#handling-package-dependencies"},{default:i(()=>[a("Handling package dependencies")]),_:1}),a(" section from the App Extension Development Guide > Introduction page for more information.")])]),n("p",null,[a("The second group tells Quasar to call our custom function when the "),n("code",{class:"doc-token"},"extendQuasarConf"),a(" CLI life-cycle hook is called. It would look something like this:")]),n(d(m),{title:"File: /index.js"},{default:i(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"extendConf"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[a("conf"),n("span",{class:"token punctuation"},","),a(" api")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// make sure my-directive boot file is registered"),a(`
  conf`),n("span",{class:"token punctuation"},"."),a("boot"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'~quasar-app-extension-my-directive/src/boot/register-my-directive.js'"),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token comment"},"// @quasar/app-vite does not need this"),a(`
  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("api"),n("span",{class:"token punctuation"},"."),a("hasVite "),n("span",{class:"token operator"},"!=="),a(),n("span",{class:"token boolean"},"true"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// make sure boot & other files get transpiled"),a(`
    conf`),n("span",{class:"token punctuation"},"."),a("build"),n("span",{class:"token punctuation"},"."),a("transpileDependencies"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"quasar-app-extension-my-directive[\\\\/]src"),n("span",{class:"token regex-delimiter"},"/")]),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]),_:1}),n("p",null,[a("Finally, letâ€™s see how the boot file would look like. Make sure that you read the "),n(c,{to:"/quasar-cli-vite/boot-files"},{default:i(()=>[a("@quasar/app-vite Boot files")]),_:1}),a(" / "),n(c,{to:"/quasar-cli-webpack/boot-files"},{default:i(()=>[a("@quasar/app-webpack Boot files")]),_:1}),a(" documentation and understand what a Boot file is first.")]),n(d(m),{title:"File: /src/boot/my-directive.js"},{default:i(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(" MyDirective "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'../directive/MyDirective.js'"),a(`

`),n("span",{class:"token comment"},"// We globally register our directive with Vue;"),a(`
`),n("span",{class:"token comment"},"// Remember that all directives in Vue will start with 'v-'"),a(`
`),n("span",{class:"token comment"},"// but that should not be part of your directive name"),a(`
`),n("span",{class:"token comment"},"// https://vuejs.org/guide/custom-directive.html#custom-directives"),a(`
`),n("span",{class:"token comment"},"// 'my-directive' will be used as 'v-my-directive'"),a(`
`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token punctuation"},"{"),a(" app "),n("span",{class:"token punctuation"},"}")]),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"directive"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'my-directive'"),n("span",{class:"token punctuation"},","),a(" MyDirective"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(r)]),_:1})]}),_:1},b))}}},w=v.setup;v.setup=(g,f)=>{const h=D();return(h.modules||(h.modules=new Set)).add("src/pages/app-extensions/tips-and-tricks/provide-a-directive.md"),w?w(g,f):void 0};const z=j(v,[["__file","provide-a-directive.md"]]);export{z as default};
