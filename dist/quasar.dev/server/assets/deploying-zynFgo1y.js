import{resolveComponent as T,mergeProps as j,withCtx as l,unref as u,createVNode as n,createTextVNode as a,useSSRContext as G}from"vue";import{ssrRenderComponent as c}from"vue/server-renderer";import{c as m}from"./page-utils-C-QWsEHe.js";import{D as N,a as $}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocPrerender-DPOnWPFO.js";import{C as o}from"./CopyButton-l3ndfN49.js";import{_ as A}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const q={__name:"deploying",__ssrInlineRender:!0,setup(x){const v=[{id:"general-deployment",title:"2. General deployment"},{id:"important-hosting-configuration",title:"3. Important Hosting Configuration"},{id:"deploying-with-vercel",title:"4. Deploying with Vercel"},{id:"vercel-configuration-tips",title:"4.1. Vercel configuration tips",sub:!0},{id:"deploying-with-heroku",title:"5. Deploying with Heroku"},{id:"deploying-with-surge",title:"6. Deploying with Surge"},{id:"deploying-on-github-pages",title:"7. Deploying on GitHub Pages"},{id:"adding-a-custom-domain-to-github-pages",title:"7.1. Adding a custom domain to GitHub pages",sub:!0},{id:"automated-deployment-to-github-pages-with-push-dir",title:"7.2. Automated deployment to GitHub pages with push-dir",sub:!0}];return(w,P,H,S)=>{const y=T("q-tab-panel");P(c(N,j({title:"Deploying a SPA",desc:"(@quasar/app-webpack) How to publish a Single Page App built by Quasar CLI.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-spa/deploying",toc:v},S),{default:l((D,p,h,e)=>{if(p)p(`<p${e}>There exist many services that allow deploying applications with ease. To list all of them would not be possible so we will focus on the general deployment process and some specifics for common services.</p><p${e}>If your favorite deployment tool is missing feel free to create a pull request on GitHub to add it to the list.</p><h2 id="general-deployment" class="doc-heading doc-h2"${e}>General deployment</h2><p${e}>The first step in deploying your Quasar SPA is always to build a production-ready bundle of your files, which gets rid of development statements and minifies your source.</p><p${e}>To produce such a build use Quasar CLI with the following command:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ quasar build</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,"$ quasar build")]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>This command will build your project in SPA mode and output your production ready bundle to a newly created folder <code class="doc-token"${e}>/dist/spa</code>.</p><p${e}>To serve your production files it is <em${e}>required</em> to use a web server, so to serve over http(s):// protocol. Simply opening the <code class="doc-token"${e}>index.html</code> file from within your browser will not work, since this uses the file:// protocol instead.</p><p${e}>Common choices for web servers are `),p(c($,{to:"https://www.nginx.com/"},{default:l((d,t,r,s)=>{if(t)t("nginx");else return[a("nginx")]}),_:1},h,e)),p(", "),p(c($,{to:"https://caddyserver.com/"},{default:l((d,t,r,s)=>{if(t)t("Caddy");else return[a("Caddy")]}),_:1},h,e)),p(", "),p(c($,{to:"https://httpd.apache.org/"},{default:l((d,t,r,s)=>{if(t)t("Apache");else return[a("Apache")]}),_:1},h,e)),p(", "),p(c($,{to:"https://expressjs.com/"},{default:l((d,t,r,s)=>{if(t)t("Express");else return[a("Express")]}),_:1},h,e)),p(`; but you should be able to use whatever web server you want.</p><p${e}>The web server requires no special setup (unless you built with Vue Router in “history” mode in the <code class="doc-token"${e}>/quasar.config</code> file). The main requirement is to be able to serve static files from a directory, so consult the documentation of your web server on how to set up static file serving.</p><p${e}>An example config for nginx may look like this:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token directive"${s}><span class="token keyword"${s}>server</span></span> <span class="token punctuation"${s}>{</span>
    <span class="token directive"${s}><span class="token keyword"${s}>listen</span> <span class="token number"${s}>80</span> http2</span><span class="token punctuation"${s}>;</span>
    <span class="token directive"${s}><span class="token keyword"${s}>server_name</span> quasar.myapp.com</span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>root</span> /home/user/quasar.myapp.com/public</span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>add_header</span> X-Frame-Options <span class="token string"${s}>&quot;SAMEORIGIN&quot;</span></span><span class="token punctuation"${s}>;</span>
    <span class="token directive"${s}><span class="token keyword"${s}>add_header</span> X-XSS-Protection <span class="token string"${s}>&quot;1; mode=block&quot;</span></span><span class="token punctuation"${s}>;</span>
    <span class="token directive"${s}><span class="token keyword"${s}>add_header</span> X-Content-Type-Options <span class="token string"${s}>&quot;nosniff&quot;</span></span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>index</span> index.html</span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>charset</span> utf-8</span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>location</span> /</span> <span class="token punctuation"${s}>{</span>
        <span class="token directive"${s}><span class="token keyword"${s}>try_files</span> <span class="token variable"${s}>$uri</span> <span class="token variable"${s}>$uri</span>/ /index.html</span><span class="token punctuation"${s}>;</span>
    <span class="token punctuation"${s}>}</span>

    <span class="token directive"${s}><span class="token keyword"${s}>location</span> = /robots.txt</span>  <span class="token punctuation"${s}>{</span> <span class="token directive"${s}><span class="token keyword"${s}>access_log</span> <span class="token boolean"${s}>off</span></span><span class="token punctuation"${s}>;</span> <span class="token directive"${s}><span class="token keyword"${s}>log_not_found</span> <span class="token boolean"${s}>off</span></span><span class="token punctuation"${s}>;</span> <span class="token punctuation"${s}>}</span>

    <span class="token directive"${s}><span class="token keyword"${s}>access_log</span> <span class="token boolean"${s}>off</span></span><span class="token punctuation"${s}>;</span>
    <span class="token directive"${s}><span class="token keyword"${s}>error_log</span>  /var/log/nginx/quasar.myapp.com-error.log error</span><span class="token punctuation"${s}>;</span>

    <span class="token directive"${s}><span class="token keyword"${s}>location</span> ~ /\\.(?!well-known).*</span> <span class="token punctuation"${s}>{</span>
        <span class="token directive"${s}><span class="token keyword"${s}>deny</span> all</span><span class="token punctuation"${s}>;</span>
    <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server")]),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"listen"),a(),n("span",{class:"token number"},"80"),a(" http2")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server_name"),a(" quasar.myapp.com")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"root"),a(" /home/user/quasar.myapp.com/public")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-Frame-Options "),n("span",{class:"token string"},'"SAMEORIGIN"')]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-XSS-Protection "),n("span",{class:"token string"},'"1; mode=block"')]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-Content-Type-Options "),n("span",{class:"token string"},'"nosniff"')]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"index"),a(" index.html")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"charset"),a(" utf-8")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" /")]),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"try_files"),a(),n("span",{class:"token variable"},"$uri"),a(),n("span",{class:"token variable"},"$uri"),a("/ /index.html")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" = /robots.txt")]),a("  "),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"access_log"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"log_not_found"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"access_log"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"error_log"),a("  /var/log/nginx/quasar.myapp.com-error.log error")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" ~ /\\.(?!well-known).*")]),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"deny"),a(" all")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},h,e)),p(`<h2 id="important-hosting-configuration" class="doc-heading doc-h2"${e}>Important Hosting Configuration</h2><p${e}>It’s important that you do not allow browsers to cache the <code class="doc-token"${e}>index.html</code> file. Because otherwise updates to this file or to your app might slip through the cracks for browsers that load the index.html from cache.</p><p${e}>This is why you must always make sure to add <code class="doc-token"${e}>&quot;Cache-Control&quot;: &quot;no-cache&quot;</code> to the headers of the <code class="doc-token"${e}>index.html</code> file via your hosting service.</p><p${e}>As an example how this is done for Google Firebase, you would add the following to the <code class="doc-token"${e}>firebase.json</code> configuration:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>&quot;hosting&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token property"${s}>&quot;headers&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
      <span class="token punctuation"${s}>{</span>
        <span class="token property"${s}>&quot;source&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/**&quot;</span><span class="token punctuation"${s}>,</span>
        <span class="token property"${s}>&quot;headers&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
          <span class="token punctuation"${s}>{</span>
            <span class="token property"${s}>&quot;key&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;Cache-Control&quot;</span><span class="token punctuation"${s}>,</span>
            <span class="token property"${s}>&quot;value&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;no-cache, no-store, must-revalidate&quot;</span>
          <span class="token punctuation"${s}>}</span>
        <span class="token punctuation"${s}>]</span>
      <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>
      <span class="token punctuation"${s}>{</span>
        <span class="token property"${s}>&quot;source&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)&quot;</span><span class="token punctuation"${s}>,</span>
        <span class="token property"${s}>&quot;headers&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
          <span class="token punctuation"${s}>{</span>
            <span class="token property"${s}>&quot;key&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;Cache-Control&quot;</span><span class="token punctuation"${s}>,</span>
            <span class="token property"${s}>&quot;value&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;max-age=604800&quot;</span>
          <span class="token punctuation"${s}>}</span>
        <span class="token punctuation"${s}>]</span>
      <span class="token punctuation"${s}>}</span>
    <span class="token punctuation"${s}>]</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"hosting"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
      `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/**"'),n("span",{class:"token punctuation"},","),a(`
        `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
          `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"no-cache, no-store, must-revalidate"'),a(`
          `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"]"),a(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)"'),n("span",{class:"token punctuation"},","),a(`
        `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
          `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"max-age=604800"'),a(`
          `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"]"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"]"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},h,e)),p(`<h2 id="deploying-with-vercel" class="doc-heading doc-h2"${e}>Deploying with Vercel</h2><p${e}>Deploying your Quasar application with `),p(c($,{to:"https://vercel.com/"},{default:l((d,t,r,s)=>{if(t)t("Vercel");else return[a("Vercel")]}),_:1},h,e)),p(" is really easy. All you have to do is to download the "),p(c($,{to:"https://vercel.com/download#now-cli"},{default:l((d,t,r,s)=>{if(t)t("vercel-cli");else return[a("vercel-cli")]}),_:1},h,e)),p(" and log in by running:</p>"),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ vercel login</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,"$ vercel login")]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>Then proceed to build your Quasar application using the steps described in “General deployment” section.</p><p${e}>After the build is finished, change directory into your deploy root (example: <code class="doc-token"${e}>/dist/spa</code>) and run:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}># from /dist/spa (or your distDir)</span>
$ vercel</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"# from /dist/spa (or your distDir)"),a(`
$ vercel`)])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>The Vercel CLI should now display information regarding your deployment, like the URL. That’s it. You’re done.</p><h3 id="vercel-configuration-tips" class="doc-heading doc-h3"${e}>Vercel configuration tips</h3><p${e}>You should consider adding some additional configurations to your project.</p><ul${e}><li${e}><p${e}>Important: Vercel expects the build results to be in <code class="doc-token"${e}>/public</code> directory, and <em${e}>Quasar</em> has it in <code class="doc-token"${e}>/dist/spa</code> by default, so you will need to override the <code class="doc-token"${e}>Output Directory</code> in your Vercel project. Set it to <code class="doc-token"${e}>dist/spa</code> through the Vercel web ui under your project’s settings &gt; Build &amp; Development Settings.</p></li><li${e}><p${e}>Since Vercel expects the <em${e}>build</em> script to be defined, you may add in <code class="doc-token"${e}>package.json</code> the following scripts:</p></li></ul>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token punctuation"${s}>{</span>
    ..
    <span class="token property"${s}>&quot;scripts&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
      ...
      <span class="token property"${s}>&quot;build&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;quasar build&quot;</span><span class="token punctuation"${s}>,</span>
      <span class="token property"${s}>&quot;deploy&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;vercel&quot;</span>
    <span class="token punctuation"${s}>}</span>
  <span class="token punctuation"${s}>}</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
    ..
    `),n("span",{class:"token property"},'"scripts"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      ...
      `),n("span",{class:"token property"},'"build"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"quasar build"'),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token property"},'"deploy"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"vercel"'),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},h,e)),p(`<ul${e}><li${e}>In order to support SPA routing in the deployed app, consider adding <code class="doc-token"${e}>vercel.json</code> file in your root folder:</li></ul>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>&quot;routes&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
    <span class="token punctuation"${s}>{</span> <span class="token property"${s}>&quot;handle&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;filesystem&quot;</span> <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>,</span>
    <span class="token punctuation"${s}>{</span> <span class="token property"${s}>&quot;src&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/.*&quot;</span><span class="token punctuation"${s}>,</span> <span class="token property"${s}>&quot;dest&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;/index.html&quot;</span> <span class="token punctuation"${s}>}</span>
  <span class="token punctuation"${s}>]</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"routes"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
    `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token property"},'"handle"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"filesystem"'),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token property"},'"src"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/.*"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token property"},'"dest"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/index.html"'),a(),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},h,e)),p(`<h2 id="deploying-with-heroku" class="doc-heading doc-h2"${e}>Deploying with Heroku</h2><p${e}>Unfortunately, Heroku does not support static sites out of the box. But don’t worry, we just need to add an HTTP server to our project so Heroku can serve our Quasar application.</p><p${e}>In this example, we will use `),p(c($,{to:"https://expressjs.com/"},{default:l((d,t,r,s)=>{if(t)t("Express");else return[a("Express")]}),_:1},h,e)),p(` to create a minimal server which Heroku can use.</p><p${e}>First, we need to install the required dependencies to our project:</p>`),p(c(u(k),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l((d,t,r,s)=>{if(t)t(c(y,{class:"q-pa-none",name:"Yarn"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>yarn</span> <span class="token function"${i}>add</span> express serve-static connect-history-api-fallback</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"NPM"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>npm</span> <span class="token function"${i}>install</span> <span class="token parameter variable"${i}>--save</span> express serve-static connect-history-api-fallback</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(),n("span",{class:"token parameter variable"},"--save"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"PNPM"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>pnpm</span> <span class="token function"${i}>add</span> express serve-static connect-history-api-fallback</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"Bun"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ bun <span class="token function"${i}>add</span> express serve-static connect-history-api-fallback</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]}),_:1},r,s));else return[n(y,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(),n("span",{class:"token parameter variable"},"--save"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1})]}),_:1},h,e)),p(`<p${e}>Now that we have installed the required dependencies, we can add our server. Create a file called <code class="doc-token"${e}>server.js</code> in the root directory of your project.</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>const</span>
  express <span class="token operator"${s}>=</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;express&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span>
  serveStatic <span class="token operator"${s}>=</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;serve-static&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span>
  history <span class="token operator"${s}>=</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;connect-history-api-fallback&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span>
  port <span class="token operator"${s}>=</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>PORT</span> <span class="token operator"${s}>||</span> <span class="token number"${s}>5000</span>

<span class="token keyword"${s}>const</span> app <span class="token operator"${s}>=</span> <span class="token function"${s}>express</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>

app<span class="token punctuation"${s}>.</span><span class="token function"${s}>use</span><span class="token punctuation"${s}>(</span><span class="token function"${s}>history</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>)</span>
app<span class="token punctuation"${s}>.</span><span class="token function"${s}>use</span><span class="token punctuation"${s}>(</span><span class="token function"${s}>serveStatic</span><span class="token punctuation"${s}>(</span>__dirname <span class="token operator"${s}>+</span> <span class="token string"${s}>&#39;/dist/spa&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>)</span>
app<span class="token punctuation"${s}>.</span><span class="token function"${s}>listen</span><span class="token punctuation"${s}>(</span>port<span class="token punctuation"${s}>)</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(`
  express `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'express'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  serveStatic `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'serve-static'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  history `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'connect-history-api-fallback'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  port `),n("span",{class:"token operator"},"="),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PORT"),a(),n("span",{class:"token operator"},"||"),a(),n("span",{class:"token number"},"5000"),a(`

`),n("span",{class:"token keyword"},"const"),a(" app "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"express"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"history"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"serveStatic"),n("span",{class:"token punctuation"},"("),a("__dirname "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token string"},"'/dist/spa'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"listen"),n("span",{class:"token punctuation"},"("),a("port"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},h,e)),p(`<p${e}>Heroku assumes a set of npm scripts to be available, so we have to alter our <code class="doc-token"${e}>package.json</code> and add the following under the <code class="doc-token"${e}>script</code> section:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token string-property property"${s}>&quot;build&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;quasar build&quot;</span><span class="token punctuation"${s}>,</span>
<span class="token string-property property"${s}>&quot;start&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;node server.js&quot;</span><span class="token punctuation"${s}>,</span>
<span class="token string-property property"${s}>&quot;heroku-postbuild&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;yarn &amp;&amp; yarn build&quot;</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token string-property property"},'"build"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"quasar build"'),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token string-property property"},'"start"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"node server.js"'),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token string-property property"},'"heroku-postbuild"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"yarn && yarn build"')])]),n(o)]}),_:1},h,e)),p(`<p${e}>Now it is time to create an app on Heroku by running:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ heroku create</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,"$ heroku create")]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>and deploy to Heroku using:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ <span class="token function"${s}>git</span> init
$ heroku git:remote <span class="token parameter variable"${s}>-a</span> <span class="token operator"${s}>&lt;</span>heroku app name<span class="token operator"${s}>&gt;</span>

$ <span class="token function"${s}>git</span> <span class="token function"${s}>add</span> <span class="token builtin class-name"${s}>.</span>
$ <span class="token function"${s}>git</span> commit <span class="token parameter variable"${s}>-am</span> <span class="token string"${s}>&quot;make it better&quot;</span>
$ <span class="token function"${s}>git</span> push heroku master</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"git"),a(` init
$ heroku git:remote `),n("span",{class:"token parameter variable"},"-a"),a(),n("span",{class:"token operator"},"<"),a("heroku app name"),n("span",{class:"token operator"},">"),a(`

$ `),n("span",{class:"token function"},"git"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token builtin class-name"},"."),a(`
$ `),n("span",{class:"token function"},"git"),a(" commit "),n("span",{class:"token parameter variable"},"-am"),a(),n("span",{class:"token string"},'"make it better"'),a(`
$ `),n("span",{class:"token function"},"git"),a(" push heroku master")])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>For existing Git repositories, simply add the heroku remote:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ heroku git:remote <span class="token parameter variable"${s}>-a</span> <span class="token operator"${s}>&lt;</span>heroku app name<span class="token operator"${s}>&gt;</span></code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ heroku git:remote "),n("span",{class:"token parameter variable"},"-a"),a(),n("span",{class:"token operator"},"<"),a("heroku app name"),n("span",{class:"token operator"},">")])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<h2 id="deploying-with-surge" class="doc-heading doc-h2"${e}>Deploying with Surge</h2><p${e}>`),p(c($,{to:"https://surge.sh/"},{default:l((d,t,r,s)=>{if(t)t("Surge");else return[a("Surge")]}),_:1},h,e)),p(` is a popular tool to host and deploy static sites.</p><p${e}>If you want to deploy your application with Surge you first need to install the Surge CLI tool:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ <span class="token function"${s}>npm</span> <span class="token function"${s}>install</span> <span class="token parameter variable"${s}>-g</span> surge</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(),n("span",{class:"token parameter variable"},"-g"),a(" surge")])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>Next, we will use Quasar CLI to build our app:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ quasar build</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,"$ quasar build")]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>Now we can deploy our application using Surge by calling:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ surge dist/spa</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,"$ surge dist/spa")]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>Now your application should be successfully deployed using Surge. You should be able to adapt this guide to any other static site deployment tool.</p><h2 id="deploying-on-github-pages" class="doc-heading doc-h2"${e}>Deploying on GitHub Pages</h2><p${e}>To deploy your Quasar application to GitHub pages the first step is to create a special repository on GitHub which is named <code class="doc-token"${e}>&lt;username&gt;.github.io</code>. Clone this repository to your local machine.</p><p${e}>Next, you need to build your Quasar application like it is described in the “General deployment section”. This will result in a <code class="doc-token"${e}>/dist/spa</code> directory. Copy the content of this folder to your cloned repository.</p><p${e}>The last step is to add a commit in your repository and push to GitHub. After a short time, you should be able to visit your Quasar application at <code class="doc-token"${e}>https://&lt;username&gt;.github.io/</code>.</p><h3 id="adding-a-custom-domain-to-github-pages" class="doc-heading doc-h3"${e}>Adding a custom domain to GitHub pages</h3><p${e}>Please see the `),p(c($,{to:"https://help.github.com/articles/using-a-custom-domain-with-github-pages/"},{default:l((d,t,r,s)=>{if(t)t("GitHub pages guides");else return[a("GitHub pages guides")]}),_:1},h,e)),p(` for an in-depth explanation on how to set up a custom domain.</p><h3 id="automated-deployment-to-github-pages-with-push-dir" class="doc-heading doc-h3"${e}>Automated deployment to GitHub pages with push-dir</h3><p${e}>Manual copying all your files to your GitHub Pages repository can be a cumbersome task to do. This step can be automated by using the `),p(c($,{to:"https://github.com/L33T-KR3W/push-dir"},{default:l((d,t,r,s)=>{if(t)t("push-dir");else return[a("push-dir")]}),_:1},h,e)),p(` package.</p><p${e}>First, install the package with:</p>`),p(c(u(k),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l((d,t,r,s)=>{if(t)t(c(y,{class:"q-pa-none",name:"Yarn"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>yarn</span> <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>--dev</span> push-dir</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"NPM"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>npm</span> <span class="token function"${i}>install</span> --save-dev push-dir</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev push-dir")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"PNPM"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>pnpm</span> <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>-D</span> push-dir</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" push-dir")])]),n(o,{lang:"bash"})]}),_:1},r,s)),t(c(y,{class:"q-pa-none",name:"Bun"},{default:l((b,g,f,i)=>{if(g)g(`<pre class="doc-code"${i}><code${i}>$ bun <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>--dev</span> push-dir</code></pre>`),g(c(o,{lang:"bash"},null,f,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]}),_:1},r,s));else return[n(y,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1})]}),_:1},h,e)),p(`<p${e}>Then add a <code class="doc-token"${e}>deploy</code> script command to your <code class="doc-token"${e}>package.json</code>:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token property"${s}>&quot;scripts&quot;</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>&quot;deploy&quot;</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&quot;push-dir --dir=dist/spa --remote=gh-pages --branch=master&quot;</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token property"},'"scripts"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"deploy"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"push-dir --dir=dist/spa --remote=gh-pages --branch=master"'),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},h,e)),p(`<p${e}>Add your GitHub Pages repository as a remote named <code class="doc-token"${e}>gh-pages</code>:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ <span class="token function"${s}>git</span> remote <span class="token function"${s}>add</span> gh-pages git@github.com:<span class="token operator"${s}>&lt;</span>username<span class="token operator"${s}>&gt;</span>/<span class="token operator"${s}>&lt;</span>username<span class="token operator"${s}>&gt;</span>.github.io.git</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"git"),a(" remote "),n("span",{class:"token function"},"add"),a(" gh-pages git@github.com:"),n("span",{class:"token operator"},"<"),a("username"),n("span",{class:"token operator"},">"),a("/"),n("span",{class:"token operator"},"<"),a("username"),n("span",{class:"token operator"},">"),a(".github.io.git")])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>Now you can build and deploy your application using:</p>`),p(c(u(k),null,{default:l((d,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>$ quasar build
$ <span class="token function"${s}>yarn</span> deploy</code></pre>`),t(c(o,{lang:"bash"},null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a(`$ quasar build
$ `),n("span",{class:"token function"},"yarn"),a(" deploy")])]),n(o,{lang:"bash"})]}),_:1},h,e)),p(`<p${e}>which will push the content of your build directory to your master branch on your GitHub Pages repository.</p>`);else return[n("p",null,"There exist many services that allow deploying applications with ease. To list all of them would not be possible so we will focus on the general deployment process and some specifics for common services."),n("p",null,"If your favorite deployment tool is missing feel free to create a pull request on GitHub to add it to the list."),n("h2",{id:"general-deployment",class:"doc-heading doc-h2",onClick:d=>u(m)("general-deployment")},"General deployment",8,["onClick"]),n("p",null,"The first step in deploying your Quasar SPA is always to build a production-ready bundle of your files, which gets rid of development statements and minifies your source."),n("p",null,"To produce such a build use Quasar CLI with the following command:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ quasar build")]),n(o,{lang:"bash"})]),_:1}),n("p",null,[a("This command will build your project in SPA mode and output your production ready bundle to a newly created folder "),n("code",{class:"doc-token"},"/dist/spa"),a(".")]),n("p",null,[a("To serve your production files it is "),n("em",null,"required"),a(" to use a web server, so to serve over http(s):// protocol. Simply opening the "),n("code",{class:"doc-token"},"index.html"),a(" file from within your browser will not work, since this uses the file:// protocol instead.")]),n("p",null,[a("Common choices for web servers are "),n($,{to:"https://www.nginx.com/"},{default:l(()=>[a("nginx")]),_:1}),a(", "),n($,{to:"https://caddyserver.com/"},{default:l(()=>[a("Caddy")]),_:1}),a(", "),n($,{to:"https://httpd.apache.org/"},{default:l(()=>[a("Apache")]),_:1}),a(", "),n($,{to:"https://expressjs.com/"},{default:l(()=>[a("Express")]),_:1}),a("; but you should be able to use whatever web server you want.")]),n("p",null,[a("The web server requires no special setup (unless you built with Vue Router in “history” mode in the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file). The main requirement is to be able to serve static files from a directory, so consult the documentation of your web server on how to set up static file serving.")]),n("p",null,"An example config for nginx may look like this:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server")]),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"listen"),a(),n("span",{class:"token number"},"80"),a(" http2")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"server_name"),a(" quasar.myapp.com")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"root"),a(" /home/user/quasar.myapp.com/public")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-Frame-Options "),n("span",{class:"token string"},'"SAMEORIGIN"')]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-XSS-Protection "),n("span",{class:"token string"},'"1; mode=block"')]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"add_header"),a(" X-Content-Type-Options "),n("span",{class:"token string"},'"nosniff"')]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"index"),a(" index.html")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"charset"),a(" utf-8")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" /")]),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"try_files"),a(),n("span",{class:"token variable"},"$uri"),a(),n("span",{class:"token variable"},"$uri"),a("/ /index.html")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" = /robots.txt")]),a("  "),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"access_log"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"log_not_found"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(),n("span",{class:"token punctuation"},"}"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"access_log"),a(),n("span",{class:"token boolean"},"off")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"error_log"),a("  /var/log/nginx/quasar.myapp.com-error.log error")]),n("span",{class:"token punctuation"},";"),a(`

    `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"location"),a(" ~ /\\.(?!well-known).*")]),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token directive"},[n("span",{class:"token keyword"},"deny"),a(" all")]),n("span",{class:"token punctuation"},";"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("h2",{id:"important-hosting-configuration",class:"doc-heading doc-h2",onClick:d=>u(m)("important-hosting-configuration")},"Important Hosting Configuration",8,["onClick"]),n("p",null,[a("It’s important that you do not allow browsers to cache the "),n("code",{class:"doc-token"},"index.html"),a(" file. Because otherwise updates to this file or to your app might slip through the cracks for browsers that load the index.html from cache.")]),n("p",null,[a("This is why you must always make sure to add "),n("code",{class:"doc-token"},'"Cache-Control": "no-cache"'),a(" to the headers of the "),n("code",{class:"doc-token"},"index.html"),a(" file via your hosting service.")]),n("p",null,[a("As an example how this is done for Google Firebase, you would add the following to the "),n("code",{class:"doc-token"},"firebase.json"),a(" configuration:")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"hosting"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
      `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/**"'),n("span",{class:"token punctuation"},","),a(`
        `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
          `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"no-cache, no-store, must-revalidate"'),a(`
          `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"]"),a(`
      `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token property"},'"source"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"**/*.@(jpg|jpeg|gif|png|svg|webp|js|css|eot|otf|ttf|ttc|woff|woff2|font.css)"'),n("span",{class:"token punctuation"},","),a(`
        `),n("span",{class:"token property"},'"headers"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
          `),n("span",{class:"token punctuation"},"{"),a(`
            `),n("span",{class:"token property"},'"key"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"Cache-Control"'),n("span",{class:"token punctuation"},","),a(`
            `),n("span",{class:"token property"},'"value"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"max-age=604800"'),a(`
          `),n("span",{class:"token punctuation"},"}"),a(`
        `),n("span",{class:"token punctuation"},"]"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"]"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("h2",{id:"deploying-with-vercel",class:"doc-heading doc-h2",onClick:d=>u(m)("deploying-with-vercel")},"Deploying with Vercel",8,["onClick"]),n("p",null,[a("Deploying your Quasar application with "),n($,{to:"https://vercel.com/"},{default:l(()=>[a("Vercel")]),_:1}),a(" is really easy. All you have to do is to download the "),n($,{to:"https://vercel.com/download#now-cli"},{default:l(()=>[a("vercel-cli")]),_:1}),a(" and log in by running:")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ vercel login")]),n(o,{lang:"bash"})]),_:1}),n("p",null,"Then proceed to build your Quasar application using the steps described in “General deployment” section."),n("p",null,[a("After the build is finished, change directory into your deploy root (example: "),n("code",{class:"doc-token"},"/dist/spa"),a(") and run:")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"# from /dist/spa (or your distDir)"),a(`
$ vercel`)])]),n(o,{lang:"bash"})]),_:1}),n("p",null,"The Vercel CLI should now display information regarding your deployment, like the URL. That’s it. You’re done."),n("h3",{id:"vercel-configuration-tips",class:"doc-heading doc-h3",onClick:d=>u(m)("vercel-configuration-tips")},"Vercel configuration tips",8,["onClick"]),n("p",null,"You should consider adding some additional configurations to your project."),n("ul",null,[n("li",null,[n("p",null,[a("Important: Vercel expects the build results to be in "),n("code",{class:"doc-token"},"/public"),a(" directory, and "),n("em",null,"Quasar"),a(" has it in "),n("code",{class:"doc-token"},"/dist/spa"),a(" by default, so you will need to override the "),n("code",{class:"doc-token"},"Output Directory"),a(" in your Vercel project. Set it to "),n("code",{class:"doc-token"},"dist/spa"),a(" through the Vercel web ui under your project’s settings > Build & Development Settings.")])]),n("li",null,[n("p",null,[a("Since Vercel expects the "),n("em",null,"build"),a(" script to be defined, you may add in "),n("code",{class:"doc-token"},"package.json"),a(" the following scripts:")])])]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
    ..
    `),n("span",{class:"token property"},'"scripts"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      ...
      `),n("span",{class:"token property"},'"build"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"quasar build"'),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token property"},'"deploy"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"vercel"'),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("ul",null,[n("li",null,[a("In order to support SPA routing in the deployed app, consider adding "),n("code",{class:"doc-token"},"vercel.json"),a(" file in your root folder:")])]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"routes"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
    `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token property"},'"handle"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"filesystem"'),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token property"},'"src"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/.*"'),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token property"},'"dest"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"/index.html"'),a(),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("h2",{id:"deploying-with-heroku",class:"doc-heading doc-h2",onClick:d=>u(m)("deploying-with-heroku")},"Deploying with Heroku",8,["onClick"]),n("p",null,"Unfortunately, Heroku does not support static sites out of the box. But don’t worry, we just need to add an HTTP server to our project so Heroku can serve our Quasar application."),n("p",null,[a("In this example, we will use "),n($,{to:"https://expressjs.com/"},{default:l(()=>[a("Express")]),_:1}),a(" to create a minimal server which Heroku can use.")]),n("p",null,"First, we need to install the required dependencies to our project:"),n(u(k),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l(()=>[n(y,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(),n("span",{class:"token parameter variable"},"--save"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(" express serve-static connect-history-api-fallback")])]),n(o,{lang:"bash"})]),_:1})]),_:1}),n("p",null,[a("Now that we have installed the required dependencies, we can add our server. Create a file called "),n("code",{class:"doc-token"},"server.js"),a(" in the root directory of your project.")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(`
  express `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'express'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  serveStatic `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'serve-static'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  history `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'connect-history-api-fallback'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  port `),n("span",{class:"token operator"},"="),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"PORT"),a(),n("span",{class:"token operator"},"||"),a(),n("span",{class:"token number"},"5000"),a(`

`),n("span",{class:"token keyword"},"const"),a(" app "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"express"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"history"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"use"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"serveStatic"),n("span",{class:"token punctuation"},"("),a("__dirname "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token string"},"'/dist/spa'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(`
app`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"listen"),n("span",{class:"token punctuation"},"("),a("port"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("p",null,[a("Heroku assumes a set of npm scripts to be available, so we have to alter our "),n("code",{class:"doc-token"},"package.json"),a(" and add the following under the "),n("code",{class:"doc-token"},"script"),a(" section:")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token string-property property"},'"build"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"quasar build"'),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token string-property property"},'"start"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"node server.js"'),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token string-property property"},'"heroku-postbuild"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"yarn && yarn build"')])]),n(o)]),_:1}),n("p",null,"Now it is time to create an app on Heroku by running:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ heroku create")]),n(o,{lang:"bash"})]),_:1}),n("p",null,"and deploy to Heroku using:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"git"),a(` init
$ heroku git:remote `),n("span",{class:"token parameter variable"},"-a"),a(),n("span",{class:"token operator"},"<"),a("heroku app name"),n("span",{class:"token operator"},">"),a(`

$ `),n("span",{class:"token function"},"git"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token builtin class-name"},"."),a(`
$ `),n("span",{class:"token function"},"git"),a(" commit "),n("span",{class:"token parameter variable"},"-am"),a(),n("span",{class:"token string"},'"make it better"'),a(`
$ `),n("span",{class:"token function"},"git"),a(" push heroku master")])]),n(o,{lang:"bash"})]),_:1}),n("p",null,"For existing Git repositories, simply add the heroku remote:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ heroku git:remote "),n("span",{class:"token parameter variable"},"-a"),a(),n("span",{class:"token operator"},"<"),a("heroku app name"),n("span",{class:"token operator"},">")])]),n(o,{lang:"bash"})]),_:1}),n("h2",{id:"deploying-with-surge",class:"doc-heading doc-h2",onClick:d=>u(m)("deploying-with-surge")},"Deploying with Surge",8,["onClick"]),n("p",null,[n($,{to:"https://surge.sh/"},{default:l(()=>[a("Surge")]),_:1}),a(" is a popular tool to host and deploy static sites.")]),n("p",null,"If you want to deploy your application with Surge you first need to install the Surge CLI tool:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(),n("span",{class:"token parameter variable"},"-g"),a(" surge")])]),n(o,{lang:"bash"})]),_:1}),n("p",null,"Next, we will use Quasar CLI to build our app:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ quasar build")]),n(o,{lang:"bash"})]),_:1}),n("p",null,"Now we can deploy our application using Surge by calling:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ surge dist/spa")]),n(o,{lang:"bash"})]),_:1}),n("p",null,"Now your application should be successfully deployed using Surge. You should be able to adapt this guide to any other static site deployment tool."),n("h2",{id:"deploying-on-github-pages",class:"doc-heading doc-h2",onClick:d=>u(m)("deploying-on-github-pages")},"Deploying on GitHub Pages",8,["onClick"]),n("p",null,[a("To deploy your Quasar application to GitHub pages the first step is to create a special repository on GitHub which is named "),n("code",{class:"doc-token"},"<username>.github.io"),a(". Clone this repository to your local machine.")]),n("p",null,[a("Next, you need to build your Quasar application like it is described in the “General deployment section”. This will result in a "),n("code",{class:"doc-token"},"/dist/spa"),a(" directory. Copy the content of this folder to your cloned repository.")]),n("p",null,[a("The last step is to add a commit in your repository and push to GitHub. After a short time, you should be able to visit your Quasar application at "),n("code",{class:"doc-token"},"https://<username>.github.io/"),a(".")]),n("h3",{id:"adding-a-custom-domain-to-github-pages",class:"doc-heading doc-h3",onClick:d=>u(m)("adding-a-custom-domain-to-github-pages")},"Adding a custom domain to GitHub pages",8,["onClick"]),n("p",null,[a("Please see the "),n($,{to:"https://help.github.com/articles/using-a-custom-domain-with-github-pages/"},{default:l(()=>[a("GitHub pages guides")]),_:1}),a(" for an in-depth explanation on how to set up a custom domain.")]),n("h3",{id:"automated-deployment-to-github-pages-with-push-dir",class:"doc-heading doc-h3",onClick:d=>u(m)("automated-deployment-to-github-pages-with-push-dir")},"Automated deployment to GitHub pages with push-dir",8,["onClick"]),n("p",null,[a("Manual copying all your files to your GitHub Pages repository can be a cumbersome task to do. This step can be automated by using the "),n($,{to:"https://github.com/L33T-KR3W/push-dir"},{default:l(()=>[a("push-dir")]),_:1}),a(" package.")]),n("p",null,"First, install the package with:"),n(u(k),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l(()=>[n(y,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1}),n(y,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" push-dir")])]),n(o,{lang:"bash"})]),_:1})]),_:1}),n("p",null,[a("Then add a "),n("code",{class:"doc-token"},"deploy"),a(" script command to your "),n("code",{class:"doc-token"},"package.json"),a(":")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token property"},'"scripts"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},'"deploy"'),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},'"push-dir --dir=dist/spa --remote=gh-pages --branch=master"'),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("p",null,[a("Add your GitHub Pages repository as a remote named "),n("code",{class:"doc-token"},"gh-pages"),a(":")]),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"git"),a(" remote "),n("span",{class:"token function"},"add"),a(" gh-pages git@github.com:"),n("span",{class:"token operator"},"<"),a("username"),n("span",{class:"token operator"},">"),a("/"),n("span",{class:"token operator"},"<"),a("username"),n("span",{class:"token operator"},">"),a(".github.io.git")])]),n(o,{lang:"bash"})]),_:1}),n("p",null,"Now you can build and deploy your application using:"),n(u(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a(`$ quasar build
$ `),n("span",{class:"token function"},"yarn"),a(" deploy")])]),n(o,{lang:"bash"})]),_:1}),n("p",null,"which will push the content of your build directory to your master branch on your GitHub Pages repository.")]}),_:1},H))}}},C=q.setup;q.setup=(x,v)=>{const w=G();return(w.modules||(w.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-spa/deploying.md"),C?C(x,v):void 0};const z=A(q,[["__file","deploying.md"]]);export{z as default};
