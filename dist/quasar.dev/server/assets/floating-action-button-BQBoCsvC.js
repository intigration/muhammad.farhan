import{provide as w,resolveComponent as $,mergeProps as Q,withCtx as u,createTextVNode as c,createVNode as t,unref as d,useSSRContext as S}from"vue";import{ssrRenderComponent as n}from"vue/server-renderer";import{c as s}from"./page-utils-C-QWsEHe.js";import{D as A,a as m}from"./DocPage-DKr-0pQn.js";import{D as l}from"./DocExample-BcaABDtE.js";import{D as g}from"./DocApi-Df9ryd6x.js";import{_ as P}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const h={__name:"floating-action-button",__ssrInlineRender:!0,setup(f){w("_q_ex",{name:"QFab"});const b=[{name:"Layout",category:"Layout and Grid",path:"/layout/layout"},{name:"Layout Page",category:"Layout and Grid",path:"/layout/page"}],r=[{id:"qfab-api",title:"2. QFab API",deep:!0},{id:"qfabaction-api",title:"3. QFabAction API",deep:!0},{id:"usage",title:"4. Usage"},{id:"non-expandable",title:"4.1. Non-Expandable",sub:!0},{id:"expandable",title:"4.2. Expandable",sub:!0},{id:"internal-labels",title:"4.3. Internal labels",sub:!0},{id:"external-labels",title:"4.4. External labels",sub:!0},{id:"hide-icons",title:"4.5. Hide icons",sub:!0},{id:"padding",title:"4.6. Padding",sub:!0},{id:"square-style",title:"4.7. Square style",sub:!0},{id:"slots",title:"4.8. Slots",sub:!0},{id:"with-qpagesticky",title:"4.9. With QPageSticky",sub:!0},{id:"draggable",title:"4.10. Draggable",sub:!0}];return(C,k,v,F)=>{const p=$("q-badge");k(n(A,Q({title:"Floating Action Button",desc:"How to use the QFab component. Floating Action Buttons for your Quasar app.",heading:"","edit-link":"vue-components/floating-action-button",toc:r,related:b},F),{default:u((E,a,i,e)=>{if(a)a(`<p${e}>A Floating Action Button (FAB) represents the primary action in a Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts.</p><p${e}>Note that you don’t need a QLayout to use FABs.</p>`),a(n(g,{file:"QFab"},null,i,e)),a(n(g,{file:"QFabAction"},null,i,e)),a(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><p${e}>There are two types of FABs: expandable (has sub-actions) and non-expandable.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>For an exhausting list of options, please read the API cards (at the top of this page).</p></div><h3 id="non-expandable" class="doc-heading doc-h3"${e}>Non-Expandable</h3><p${e}>If you want a non-expandable FAB, all you need is a round button – wrapped in QPageSticky if used on a QLayout.</p>`),a(n(l,{title:"Non expandable",file:"NonExpandable"},null,i,e)),a(`<h3 id="expandable" class="doc-heading doc-h3"${e}>Expandable</h3>`),a(n(l,{title:"Expandable",file:"Expandable"},null,i,e)),a(`<h3 id="internal-labels" class="doc-heading doc-h3"${e}>Internal labels</h3>`),a(n(l,{title:"Internal label",file:"InternalLabel"},null,i,e)),a(n(l,{title:"Toggling internal label",file:"InternalLabelToggling"},null,i,e)),a(`<p${e}>When the labels are internal and your QFab opens up vertically (up or down) then you also have the ability to choose how to vertically align the sub-actions:</p>`),a(n(l,{title:"Vertical actions alignment",file:"VerticalActionsAlignment"},null,i,e)),a(`<h3 id="external-labels" class="doc-heading doc-h3"${e}>External labels</h3><p${e}>By default, when the label is external on the main QFab (not the sub-actions), it gets shown only when QFab is opened. However, you can override that by setting a Boolean value for <code class="doc-token"${e}>hide-label</code> prop.</p>`),a(n(l,{title:"External label",file:"ExternalLabel"},null,i,e)),a(n(l,{title:"Custom styled external label",file:"ExternalLabelStyled"},null,i,e)),a(n(l,{title:"Toggling external label",file:"ExternalLabelToggling"},null,i,e)),a(`<h3 id="hide-icons" class="doc-heading doc-h3"${e}>Hide icons</h3><p${e}>If we hide the icon (through specific prop), we should at least use an internal label:</p>`),a(n(l,{title:"Hide icon",file:"HideIcon"},null,i,e)),a(`<h3 id="padding" class="doc-heading doc-h3"${e}>Padding</h3><p${e}>The default padding for QFab is “md” and for QFabAction is “sm”. However, you can use <code class="doc-token"${e}>padding</code> prop to customize it (accepts CSS units too):</p>`),a(n(l,{title:"Playing with padding",file:"Padding"},null,i,e)),a(`<h3 id="square-style" class="doc-heading doc-h3"${e}>Square style</h3>`),a(n(l,{title:"Square style",file:"SquareStyle"},null,i,e)),a(`<h3 id="slots" class="doc-heading doc-h3"${e}>Slots `),a(n(p,{label:"v2.4+"},null,i,e)),a(`</h3><p${e}>Notice the slots for QFab and the slots for QFabAction below:</p>`),a(n(l,{title:"Slots: icon, active-icon and label",file:"FabSlots"},null,i,e)),a(`<h3 id="with-qpagesticky" class="doc-heading doc-h3"${e}>With QPageSticky</h3>`),a(n(l,{title:"With QPageSticky",file:"PageSticky"},null,i,e)),a(`<h3 id="draggable" class="doc-heading doc-h3"${e}>Draggable</h3><p${e}>Below is a nice example of using `),a(n(m,{to:"/vue-directives/touch-pan"},{default:u((o,y,B,L)=>{if(y)y("TouchPan");else return[c("TouchPan")]}),_:1},i,e)),a(" for making the QFab draggable across the screen.</p>"),a(n(l,{title:"Draggable",file:"Draggable"},null,i,e));else return[t("p",null,"A Floating Action Button (FAB) represents the primary action in a Page. But, it’s not limited to only a single action. It can contain any number of sub-actions too. And more importantly, it can also be used inline in your Pages or Layouts."),t("p",null,"Note that you don’t need a QLayout to use FABs."),t(g,{file:"QFab"}),t(g,{file:"QFabAction"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:o=>d(s)("usage")},"Usage",8,["onClick"]),t("p",null,"There are two types of FABs: expandable (has sub-actions) and non-expandable."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,"For an exhausting list of options, please read the API cards (at the top of this page).")]),t("h3",{id:"non-expandable",class:"doc-heading doc-h3",onClick:o=>d(s)("non-expandable")},"Non-Expandable",8,["onClick"]),t("p",null,"If you want a non-expandable FAB, all you need is a round button – wrapped in QPageSticky if used on a QLayout."),t(l,{title:"Non expandable",file:"NonExpandable"}),t("h3",{id:"expandable",class:"doc-heading doc-h3",onClick:o=>d(s)("expandable")},"Expandable",8,["onClick"]),t(l,{title:"Expandable",file:"Expandable"}),t("h3",{id:"internal-labels",class:"doc-heading doc-h3",onClick:o=>d(s)("internal-labels")},"Internal labels",8,["onClick"]),t(l,{title:"Internal label",file:"InternalLabel"}),t(l,{title:"Toggling internal label",file:"InternalLabelToggling"}),t("p",null,"When the labels are internal and your QFab opens up vertically (up or down) then you also have the ability to choose how to vertically align the sub-actions:"),t(l,{title:"Vertical actions alignment",file:"VerticalActionsAlignment"}),t("h3",{id:"external-labels",class:"doc-heading doc-h3",onClick:o=>d(s)("external-labels")},"External labels",8,["onClick"]),t("p",null,[c("By default, when the label is external on the main QFab (not the sub-actions), it gets shown only when QFab is opened. However, you can override that by setting a Boolean value for "),t("code",{class:"doc-token"},"hide-label"),c(" prop.")]),t(l,{title:"External label",file:"ExternalLabel"}),t(l,{title:"Custom styled external label",file:"ExternalLabelStyled"}),t(l,{title:"Toggling external label",file:"ExternalLabelToggling"}),t("h3",{id:"hide-icons",class:"doc-heading doc-h3",onClick:o=>d(s)("hide-icons")},"Hide icons",8,["onClick"]),t("p",null,"If we hide the icon (through specific prop), we should at least use an internal label:"),t(l,{title:"Hide icon",file:"HideIcon"}),t("h3",{id:"padding",class:"doc-heading doc-h3",onClick:o=>d(s)("padding")},"Padding",8,["onClick"]),t("p",null,[c("The default padding for QFab is “md” and for QFabAction is “sm”. However, you can use "),t("code",{class:"doc-token"},"padding"),c(" prop to customize it (accepts CSS units too):")]),t(l,{title:"Playing with padding",file:"Padding"}),t("h3",{id:"square-style",class:"doc-heading doc-h3",onClick:o=>d(s)("square-style")},"Square style",8,["onClick"]),t(l,{title:"Square style",file:"SquareStyle"}),t("h3",{id:"slots",class:"doc-heading doc-h3",onClick:o=>d(s)("slots")},[c("Slots "),t(p,{label:"v2.4+"})],8,["onClick"]),t("p",null,"Notice the slots for QFab and the slots for QFabAction below:"),t(l,{title:"Slots: icon, active-icon and label",file:"FabSlots"}),t("h3",{id:"with-qpagesticky",class:"doc-heading doc-h3",onClick:o=>d(s)("with-qpagesticky")},"With QPageSticky",8,["onClick"]),t(l,{title:"With QPageSticky",file:"PageSticky"}),t("h3",{id:"draggable",class:"doc-heading doc-h3",onClick:o=>d(s)("draggable")},"Draggable",8,["onClick"]),t("p",null,[c("Below is a nice example of using "),t(m,{to:"/vue-directives/touch-pan"},{default:u(()=>[c("TouchPan")]),_:1}),c(" for making the QFab draggable across the screen.")]),t(l,{title:"Draggable",file:"Draggable"})]}),_:1},v))}}},x=h.setup;h.setup=(f,b)=>{const r=S();return(r.modules||(r.modules=new Set)).add("src/pages/vue-components/floating-action-button.md"),x?x(f,b):void 0};const _=P(h,[["__file","floating-action-button.md"]]);export{_ as default};
