import{mergeProps as v,withCtx as p,unref as c,createVNode as n,createTextVNode as a,useSSRContext as x}from"vue";import{ssrRenderComponent as r}from"vue/server-renderer";import{c as f}from"./page-utils-C-QWsEHe.js";import{D as b}from"./DocPage-DKr-0pQn.js";import{D as i}from"./DocPrerender-DPOnWPFO.js";import{C as o}from"./CopyButton-l3ndfN49.js";import{_ as j}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const $={__name:"electron-preload-script",__ssrInlineRender:!0,setup(w){const h=[{id:"how-to-use-it",title:"2. How to use it"},{id:"security-considerations",title:"3. Security considerations"},{id:"custom-path-to-the-preload-script",title:"4. Custom path to the preload script"}];return(m,g,P,A)=>{g(r(b,v({title:"Electron Preload Script",desc:"(@quasar/app-webpack) How to handle Electron Node Integration with an Electron Preload script with Quasar CLI.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-electron-apps/electron-preload-script",toc:h},A),{default:p((C,l,d,s)=>{if(l)l(`<p${s}>For security reasons, the renderer thread (your UI code from <code class="doc-token"${s}>/src</code>) does not have access to the Node.js stuff. However, you can run Node.js code and bridge it to the renderer thread through an Electron Preload script located at <code class="doc-token"${s}>/src-electron/electron-preload.[js|ts]</code>. Use <code class="doc-token"${s}>contextBridge</code> (from the <code class="doc-token"${s}>electron</code> package) to expose the stuff that you need for your UI.</p><p${s}>Since the preload script runs from Node.js, be careful what you do with it and what you expose to the renderer thread!</p><h2 id="how-to-use-it" class="doc-heading doc-h2"${s}>How to use it</h2><p${s}>In <code class="doc-token"${s}>/src-electron/</code> folder, there is a file named <code class="doc-token"${s}>electron-preload.js</code>. Fill it with your preload code.</p><p${s}>Make sure that your <code class="doc-token"${s}>/src-electron/electron-main.[js|ts]</code> has the following (near the “webPreferences” section):</p>`),l(r(c(i),{title:"File: /src-electron/electron-main"},{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// Add this at the top:</span>
<span class="token keyword"${t}>import</span> path <span class="token keyword"${t}>from</span> <span class="token string"${t}>&#39;path&#39;</span>

<span class="token comment"${t}>// ...</span>

<span class="token keyword"${t}>function</span> <span class="token function"${t}>createWindow</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token punctuation"${t}>{</span>
  <span class="token comment"${t}>// ...</span>
  mainWindow <span class="token operator"${t}>=</span> <span class="token keyword"${t}>new</span> <span class="token class-name"${t}>BrowserWindow</span><span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// ...</span>
    <span class="token literal-property property"${t}>webPreferences</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
      <span class="token comment"${t}>// HERE IS THE MAGIC:</span>
      <span class="token literal-property property"${t}>preload</span><span class="token operator"${t}>:</span> path<span class="token punctuation"${t}>.</span><span class="token function"${t}>resolve</span><span class="token punctuation"${t}>(</span>__dirname<span class="token punctuation"${t}>,</span> process<span class="token punctuation"${t}>.</span>env<span class="token punctuation"${t}>.</span><span class="token constant"${t}>QUASAR_ELECTRON_PRELOAD</span><span class="token punctuation"${t}>)</span>
    <span class="token punctuation"${t}>}</span>
  <span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Add this at the top:"),a(`
`),n("span",{class:"token keyword"},"import"),a(" path "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'path'"),a(`

`),n("span",{class:"token comment"},"// ..."),a(`

`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"createWindow"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// ..."),a(`
  mainWindow `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"BrowserWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// ..."),a(`
    `),n("span",{class:"token literal-property property"},"webPreferences"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// HERE IS THE MAGIC:"),a(`
      `),n("span",{class:"token literal-property property"},"preload"),n("span",{class:"token operator"},":"),a(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),a("__dirname"),n("span",{class:"token punctuation"},","),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"QUASAR_ELECTRON_PRELOAD"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},d,s)),l(`<p${s}>Example of <code class="doc-token"${s}>/src-electron/electron-preload.[js|ts]</code> content:</p>`),l(r(c(i),null,{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// example which injects window.myAPI.doAThing() into the renderer</span>
<span class="token comment"${t}>// thread (/src/*)</span>

<span class="token keyword"${t}>const</span> <span class="token punctuation"${t}>{</span> contextBridge <span class="token punctuation"${t}>}</span> <span class="token operator"${t}>=</span> <span class="token function"${t}>require</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;electron&#39;</span><span class="token punctuation"${t}>)</span>

contextBridge<span class="token punctuation"${t}>.</span><span class="token function"${t}>exposeInMainWorld</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;myAPI&#39;</span><span class="token punctuation"${t}>,</span> <span class="token punctuation"${t}>{</span>
  <span class="token function-variable function"${t}>doAThing</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token operator"${t}>=&gt;</span> <span class="token punctuation"${t}>{</span><span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// example which injects window.myAPI.doAThing() into the renderer"),a(`
`),n("span",{class:"token comment"},"// thread (/src/*)"),a(`

`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" contextBridge "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(`

contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function-variable function"},"doAThing"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},d,s)),l(`<div class="doc-note doc-note--warning"${s}><p class="doc-note__title"${s}>WARNING</p><ol${s}><li${s}>Be aware that this file runs in a Node.js context.</li><li${s}>If you import anything from node_modules, then make sure that the package is specified in /package.json &gt; “dependencies” and NOT in “devDependencies”.</li></ol></div><h2 id="security-considerations" class="doc-heading doc-h2"${s}>Security considerations</h2><p${s}>Just by using <code class="doc-token"${s}>contextBridge</code> does not automatically mean that everything you do is safe. For instance the code below is unsafe:</p>`),l(r(c(i),null,{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// BAD code; DON&#39;T!!</span>
contextBridge<span class="token punctuation"${t}>.</span><span class="token function"${t}>exposeInMainWorld</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;myAPI&#39;</span><span class="token punctuation"${t}>,</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>send</span><span class="token operator"${t}>:</span> ipcRenderer<span class="token punctuation"${t}>.</span>send
<span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// BAD code; DON'T!!"),a(`
contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"send"),n("span",{class:"token operator"},":"),a(" ipcRenderer"),n("span",{class:"token punctuation"},"."),a(`send
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},d,s)),l(`<p${s}>It directly exposes a powerful API without any kind of argument filtering. This would allow any website to send arbitrary IPC messages which you do not want to be possible. The correct way to expose IPC-based APIs would instead be to provide one method per IPC message.</p>`),l(r(c(i),null,{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token comment"${t}>// Good code</span>
contextBridge<span class="token punctuation"${t}>.</span><span class="token function"${t}>exposeInMainWorld</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;myAPI&#39;</span><span class="token punctuation"${t}>,</span> <span class="token punctuation"${t}>{</span>
  <span class="token function-variable function"${t}>loadPreferences</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token operator"${t}>=&gt;</span> ipcRenderer<span class="token punctuation"${t}>.</span><span class="token function"${t}>invoke</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;myAPI:load-prefs&#39;</span><span class="token punctuation"${t}>)</span>
<span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Good code"),a(`
contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function-variable function"},"loadPreferences"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(" ipcRenderer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI:load-prefs'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},d,s)),l(`<p${s}>Now, <code class="doc-token"${s}>loadPreferences</code> is available globally in your javascript code (ie: <code class="doc-token"${s}>window.myAPI.loadPreferences</code>).</p><div class="doc-note doc-note--warning"${s}><p class="doc-note__title"${s}>WARNING</p><p${s}>Make sure to pick names which do not colide with existing <code class="doc-token"${s}>Window</code> keys.</p></div><p${s}>Using the above code with an <code class="doc-token"${s}>invoke</code> to <code class="doc-token"${s}>load-prefs</code> in the main thread would have code like this:</p>`),l(r(c(i),null,{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}>ipcMain<span class="token punctuation"${t}>.</span><span class="token function"${t}>handle</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;myAPI:load-prefs&#39;</span><span class="token punctuation"${t}>,</span> <span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>)</span> <span class="token operator"${t}>=&gt;</span> <span class="token punctuation"${t}>{</span>
  <span class="token keyword"${t}>return</span> <span class="token punctuation"${t}>{</span>
    <span class="token comment"${t}>// object that contains preferences</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,[a("ipcMain"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI:load-prefs'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// object that contains preferences"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]}),_:1},d,s)),l(`<h2 id="custom-path-to-the-preload-script" class="doc-heading doc-h2"${s}>Custom path to the preload script</h2><p${s}>Should you wish to change the location of the preload script (and/or even the main thread file) then edit the <code class="doc-token"${s}>/quasar.config</code> file:</p>`),l(r(c(i),null,{default:p((k,e,u,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}>// should you wish to change default files
sourceFiles: {
  electronMain: &#39;src-electron/electron-main.js&#39;,
  electronPreload: &#39;src-electron/electron-preload.js&#39;
}</code></pre>`),e(r(o,null,null,u,t));else return[n("pre",{class:"doc-code"},[n("code",null,`// should you wish to change default files
sourceFiles: {
  electronMain: 'src-electron/electron-main.js',
  electronPreload: 'src-electron/electron-preload.js'
}`)]),n(o)]}),_:1},d,s));else return[n("p",null,[a("For security reasons, the renderer thread (your UI code from "),n("code",{class:"doc-token"},"/src"),a(") does not have access to the Node.js stuff. However, you can run Node.js code and bridge it to the renderer thread through an Electron Preload script located at "),n("code",{class:"doc-token"},"/src-electron/electron-preload.[js|ts]"),a(". Use "),n("code",{class:"doc-token"},"contextBridge"),a(" (from the "),n("code",{class:"doc-token"},"electron"),a(" package) to expose the stuff that you need for your UI.")]),n("p",null,"Since the preload script runs from Node.js, be careful what you do with it and what you expose to the renderer thread!"),n("h2",{id:"how-to-use-it",class:"doc-heading doc-h2",onClick:k=>c(f)("how-to-use-it")},"How to use it",8,["onClick"]),n("p",null,[a("In "),n("code",{class:"doc-token"},"/src-electron/"),a(" folder, there is a file named "),n("code",{class:"doc-token"},"electron-preload.js"),a(". Fill it with your preload code.")]),n("p",null,[a("Make sure that your "),n("code",{class:"doc-token"},"/src-electron/electron-main.[js|ts]"),a(" has the following (near the “webPreferences” section):")]),n(c(i),{title:"File: /src-electron/electron-main"},{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Add this at the top:"),a(`
`),n("span",{class:"token keyword"},"import"),a(" path "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'path'"),a(`

`),n("span",{class:"token comment"},"// ..."),a(`

`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"createWindow"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token comment"},"// ..."),a(`
  mainWindow `),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"new"),a(),n("span",{class:"token class-name"},"BrowserWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// ..."),a(`
    `),n("span",{class:"token literal-property property"},"webPreferences"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// HERE IS THE MAGIC:"),a(`
      `),n("span",{class:"token literal-property property"},"preload"),n("span",{class:"token operator"},":"),a(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),a("__dirname"),n("span",{class:"token punctuation"},","),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"QUASAR_ELECTRON_PRELOAD"),n("span",{class:"token punctuation"},")"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("p",null,[a("Example of "),n("code",{class:"doc-token"},"/src-electron/electron-preload.[js|ts]"),a(" content:")]),n(c(i),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// example which injects window.myAPI.doAThing() into the renderer"),a(`
`),n("span",{class:"token comment"},"// thread (/src/*)"),a(`

`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" contextBridge "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(`

contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function-variable function"},"doAThing"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("ol",null,[n("li",null,"Be aware that this file runs in a Node.js context."),n("li",null,"If you import anything from node_modules, then make sure that the package is specified in /package.json > “dependencies” and NOT in “devDependencies”.")])]),n("h2",{id:"security-considerations",class:"doc-heading doc-h2",onClick:k=>c(f)("security-considerations")},"Security considerations",8,["onClick"]),n("p",null,[a("Just by using "),n("code",{class:"doc-token"},"contextBridge"),a(" does not automatically mean that everything you do is safe. For instance the code below is unsafe:")]),n(c(i),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// BAD code; DON'T!!"),a(`
contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"send"),n("span",{class:"token operator"},":"),a(" ipcRenderer"),n("span",{class:"token punctuation"},"."),a(`send
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("p",null,"It directly exposes a powerful API without any kind of argument filtering. This would allow any website to send arbitrary IPC messages which you do not want to be possible. The correct way to expose IPC-based APIs would instead be to provide one method per IPC message."),n(c(i),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Good code"),a(`
contextBridge`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exposeInMainWorld"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token function-variable function"},"loadPreferences"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(" ipcRenderer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"invoke"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI:load-prefs'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("p",null,[a("Now, "),n("code",{class:"doc-token"},"loadPreferences"),a(" is available globally in your javascript code (ie: "),n("code",{class:"doc-token"},"window.myAPI.loadPreferences"),a(").")]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[a("Make sure to pick names which do not colide with existing "),n("code",{class:"doc-token"},"Window"),a(" keys.")])]),n("p",null,[a("Using the above code with an "),n("code",{class:"doc-token"},"invoke"),a(" to "),n("code",{class:"doc-token"},"load-prefs"),a(" in the main thread would have code like this:")]),n(c(i),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("ipcMain"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"handle"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'myAPI:load-prefs'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// object that contains preferences"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(o)]),_:1}),n("h2",{id:"custom-path-to-the-preload-script",class:"doc-heading doc-h2",onClick:k=>c(f)("custom-path-to-the-preload-script")},"Custom path to the preload script",8,["onClick"]),n("p",null,[a("Should you wish to change the location of the preload script (and/or even the main thread file) then edit the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(c(i),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,`// should you wish to change default files
sourceFiles: {
  electronMain: 'src-electron/electron-main.js',
  electronPreload: 'src-electron/electron-preload.js'
}`)]),n(o)]),_:1})]}),_:1},P))}}},y=$.setup;$.setup=(w,h)=>{const m=x();return(m.modules||(m.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-electron-apps/electron-preload-script.md"),y?y(w,h):void 0};const q=j($,[["__file","electron-preload-script.md"]]);export{q as default};
