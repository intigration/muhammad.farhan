import{mergeProps as q,withCtx as l,createTextVNode as s,unref as e,createVNode as n,useSSRContext as C}from"vue";import{ssrRenderComponent as u}from"vue/server-renderer";import{c as $}from"./page-utils-C-QWsEHe.js";import{D,a as d}from"./DocPage-DKr-0pQn.js";import{D as r}from"./DocPrerender-DPOnWPFO.js";import{C as c}from"./CopyButton-l3ndfN49.js";import{_ as v}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const y={__name:"type-checking-utils",__ssrInlineRender:!0,setup(w){const f=[{id:"is-deepequal",title:"2. is.deepEqual"},{id:"is-object",title:"3. is.object"},{id:"is-date",title:"4. is.date"},{id:"is-regexp",title:"5. is.regexp"},{id:"is-number",title:"6. is.number"}];return(g,x,h,j)=>{x(u(D,q({title:"Type Checking Utils (<is>)",desc:"A set of Quasar methods for type checking.",badge:"v2.8+",heading:"","edit-link":"quasar-utils/type-checking-utils",toc:f},j),{default:l((A,p,m,o)=>{if(p)p(`<div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>For usage with the UMD build see `),p(u(d,{to:"/start/umd#quasar-global-object"},{default:l((k,t,i,a)=>{if(t)t("here");else return[s("here")]}),_:1},m,o)),p(`.</p></div><h2 id="is-deepequal" class="doc-heading doc-h2"${o}>is.deepEqual</h2><p${o}>Recursively checks if one Object is equal to another. Also supports Map, Set, ArrayBuffer, Regexp, Date, and many more.</p>`),p(u(e(r),null,{default:l((k,t,i,a)=>{if(t)t(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> is <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> objA <span class="token operator"${a}>=</span> <span class="token punctuation"${a}>{</span> <span class="token comment"${a}>/* ... */</span> <span class="token punctuation"${a}>}</span>
<span class="token keyword"${a}>const</span> objB <span class="token operator"${a}>=</span> <span class="token punctuation"${a}>{</span> <span class="token comment"${a}>/* ... */</span> <span class="token punctuation"${a}>}</span>

console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>deepEqual</span><span class="token punctuation"${a}>(</span>objA<span class="token punctuation"${a}>,</span> objB<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true or false</span></code></pre>`),t(u(c,null,null,i,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" objA "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* ... */"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" objB "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* ... */"),s(),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deepEqual"),n("span",{class:"token punctuation"},"("),s("objA"),n("span",{class:"token punctuation"},","),s(" objB"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true or false")])]),n(c)]}),_:1},m,o)),p(`<h2 id="is-object" class="doc-heading doc-h2"${o}>is.object</h2>`),p(u(e(r),null,{default:l((k,t,i,a)=>{if(t)t(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> is <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> obj <span class="token operator"${a}>=</span> <span class="token punctuation"${a}>{</span> <span class="token literal-property property"${a}>some</span><span class="token operator"${a}>:</span> <span class="token string"${a}>&#39;value&#39;</span> <span class="token punctuation"${a}>}</span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>object</span><span class="token punctuation"${a}>(</span>obj<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true</span></code></pre>`),t(u(c,null,null,i,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"some"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'value'"),s(),n("span",{class:"token punctuation"},"}"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"object"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]}),_:1},m,o)),p(`<h2 id="is-date" class="doc-heading doc-h2"${o}>is.date</h2>`),p(u(e(r),null,{default:l((k,t,i,a)=>{if(t)t(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> is <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> date <span class="token operator"${a}>=</span> <span class="token keyword"${a}>new</span> <span class="token class-name"${a}>Date</span><span class="token punctuation"${a}>(</span><span class="token punctuation"${a}>)</span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>date</span><span class="token punctuation"${a}>(</span>date<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true</span>

<span class="token keyword"${a}>const</span> now <span class="token operator"${a}>=</span> Date<span class="token punctuation"${a}>.</span><span class="token function"${a}>now</span><span class="token punctuation"${a}>(</span><span class="token punctuation"${a}>)</span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>date</span><span class="token punctuation"${a}>(</span>now<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// false</span></code></pre>`),t(u(c,null,null,i,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" date "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Date"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"date"),n("span",{class:"token punctuation"},"("),s("date"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true"),s(`

`),n("span",{class:"token keyword"},"const"),s(" now "),n("span",{class:"token operator"},"="),s(" Date"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"now"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"date"),n("span",{class:"token punctuation"},"("),s("now"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// false")])]),n(c)]}),_:1},m,o)),p(`<h2 id="is-regexp" class="doc-heading doc-h2"${o}>is.regexp</h2>`),p(u(e(r),null,{default:l((k,t,i,a)=>{if(t)t(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> is <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> pattern1 <span class="token operator"${a}>=</span> <span class="token regex"${a}><span class="token regex-delimiter"${a}>/</span><span class="token regex-source language-regex"${a}>\\w+</span><span class="token regex-delimiter"${a}>/</span></span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>regexp</span><span class="token punctuation"${a}>(</span>pattern1<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true</span>

<span class="token keyword"${a}>const</span> pattern2 <span class="token operator"${a}>=</span> <span class="token keyword"${a}>new</span> <span class="token class-name"${a}>RegExp</span><span class="token punctuation"${a}>(</span><span class="token string"${a}>&#39;\\\\w+&#39;</span><span class="token punctuation"${a}>)</span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>regexp</span><span class="token punctuation"${a}>(</span>pattern2<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true</span></code></pre>`),t(u(c,null,null,i,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" pattern1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"\\w+"),n("span",{class:"token regex-delimiter"},"/")]),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"regexp"),n("span",{class:"token punctuation"},"("),s("pattern1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true"),s(`

`),n("span",{class:"token keyword"},"const"),s(" pattern2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RegExp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'\\\\w+'"),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"regexp"),n("span",{class:"token punctuation"},"("),s("pattern2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]}),_:1},m,o)),p(`<h2 id="is-number" class="doc-heading doc-h2"${o}>is.number</h2>`),p(u(e(r),null,{default:l((k,t,i,a)=>{if(t)t(`<pre class="doc-code"${a}><code${a}><span class="token keyword"${a}>import</span> <span class="token punctuation"${a}>{</span> is <span class="token punctuation"${a}>}</span> <span class="token keyword"${a}>from</span> <span class="token string"${a}>&#39;quasar&#39;</span>

<span class="token keyword"${a}>const</span> myNumber <span class="token operator"${a}>=</span> <span class="token number"${a}>80</span>
console<span class="token punctuation"${a}>.</span><span class="token function"${a}>log</span><span class="token punctuation"${a}>(</span> is<span class="token punctuation"${a}>.</span><span class="token function"${a}>number</span><span class="token punctuation"${a}>(</span>myNumber<span class="token punctuation"${a}>)</span> <span class="token punctuation"${a}>)</span> <span class="token comment"${a}>// true</span></code></pre>`),t(u(c,null,null,i,a));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" myNumber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"80"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"number"),n("span",{class:"token punctuation"},"("),s("myNumber"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]}),_:1},m,o));else return[n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[s("For usage with the UMD build see "),n(d,{to:"/start/umd#quasar-global-object"},{default:l(()=>[s("here")]),_:1}),s(".")])]),n("h2",{id:"is-deepequal",class:"doc-heading doc-h2",onClick:k=>e($)("is-deepequal")},"is.deepEqual",8,["onClick"]),n("p",null,"Recursively checks if one Object is equal to another. Also supports Map, Set, ArrayBuffer, Regexp, Date, and many more."),n(e(r),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" objA "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* ... */"),s(),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"const"),s(" objB "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token comment"},"/* ... */"),s(),n("span",{class:"token punctuation"},"}"),s(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deepEqual"),n("span",{class:"token punctuation"},"("),s("objA"),n("span",{class:"token punctuation"},","),s(" objB"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true or false")])]),n(c)]),_:1}),n("h2",{id:"is-object",class:"doc-heading doc-h2",onClick:k=>e($)("is-object")},"is.object",8,["onClick"]),n(e(r),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" obj "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"{"),s(),n("span",{class:"token literal-property property"},"some"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'value'"),s(),n("span",{class:"token punctuation"},"}"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"object"),n("span",{class:"token punctuation"},"("),s("obj"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]),_:1}),n("h2",{id:"is-date",class:"doc-heading doc-h2",onClick:k=>e($)("is-date")},"is.date",8,["onClick"]),n(e(r),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" date "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"Date"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"date"),n("span",{class:"token punctuation"},"("),s("date"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true"),s(`

`),n("span",{class:"token keyword"},"const"),s(" now "),n("span",{class:"token operator"},"="),s(" Date"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"now"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"date"),n("span",{class:"token punctuation"},"("),s("now"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// false")])]),n(c)]),_:1}),n("h2",{id:"is-regexp",class:"doc-heading doc-h2",onClick:k=>e($)("is-regexp")},"is.regexp",8,["onClick"]),n(e(r),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" pattern1 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token regex"},[n("span",{class:"token regex-delimiter"},"/"),n("span",{class:"token regex-source language-regex"},"\\w+"),n("span",{class:"token regex-delimiter"},"/")]),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"regexp"),n("span",{class:"token punctuation"},"("),s("pattern1"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true"),s(`

`),n("span",{class:"token keyword"},"const"),s(" pattern2 "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token keyword"},"new"),s(),n("span",{class:"token class-name"},"RegExp"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'\\\\w+'"),n("span",{class:"token punctuation"},")"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"regexp"),n("span",{class:"token punctuation"},"("),s("pattern2"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]),_:1}),n("h2",{id:"is-number",class:"doc-heading doc-h2",onClick:k=>e($)("is-number")},"is.number",8,["onClick"]),n(e(r),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),s(),n("span",{class:"token punctuation"},"{"),s(" is "),n("span",{class:"token punctuation"},"}"),s(),n("span",{class:"token keyword"},"from"),s(),n("span",{class:"token string"},"'quasar'"),s(`

`),n("span",{class:"token keyword"},"const"),s(" myNumber "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"80"),s(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s(" is"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"number"),n("span",{class:"token punctuation"},"("),s("myNumber"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token comment"},"// true")])]),n(c)]),_:1})]}),_:1},h))}}},b=y.setup;y.setup=(w,f)=>{const g=C();return(g.modules||(g.modules=new Set)).add("src/pages/quasar-utils/type-checking-utils.md"),b?b(w,f):void 0};const Q=v(y,[["__file","type-checking-utils.md"]]);export{Q as default};
