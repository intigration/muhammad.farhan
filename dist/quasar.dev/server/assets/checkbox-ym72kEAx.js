import{provide as Q,resolveComponent as D,mergeProps as T,withCtx as h,createTextVNode as i,createVNode as t,unref as d,useSSRContext as S}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D as O,a as g}from"./DocPage-DKr-0pQn.js";import{D as n}from"./DocExample-BcaABDtE.js";import{D as p}from"./DocApi-Df9ryd6x.js";import{_ as z}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"checkbox",__ssrInlineRender:!0,setup(k){Q("_q_ex",{name:"QCheckbox"});const m=[{name:"Toggle",category:"Form Components",path:"/vue-components/toggle"},{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"}],u=[{id:"qcheckbox-api",title:"2. QCheckbox API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standard",title:"3.1. Standard",sub:!0},{id:"with-custom-icons",title:"3.2. With custom icons",sub:!0},{id:"label",title:"3.3. Label",sub:!0},{id:"coloring",title:"3.4. Coloring",sub:!0},{id:"dense",title:"3.5. Dense",sub:!0},{id:"force-dark-mode",title:"3.6. Force dark mode",sub:!0},{id:"sizes",title:"3.7. Sizes",sub:!0},{id:"indeterminate-state",title:"3.8. Indeterminate state",sub:!0},{id:"toggle-order",title:"3.9. Toggle order",sub:!0},{id:"array-model",title:"3.10. Array model",sub:!0},{id:"custom-model-values",title:"3.11. Custom model values",sub:!0},{id:"with-qoptiongroup",title:"3.12. With QOptionGroup",sub:!0},{id:"with-qitem",title:"3.13. With QItem",sub:!0},{id:"disable",title:"3.14. Disable",sub:!0},{id:"native-form-submit",title:"3.15. Native form submit",sub:!0}];return(W,w,C,$)=>{const b=D("q-badge");w(l(O,T({title:"Checkbox",desc:"The QCheckbox Vue component is a checkbox with features like coloring, ripple and indeterminate state.",heading:"","edit-link":"vue-components/checkbox",toc:u,related:m},$),{default:h((A,o,a,e)=>{if(o)o(`<p${e}>The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Please also refer to the `),o(l(g,{to:"/vue-components/option-group"},{default:h((s,r,x,y)=>{if(r)r("QOptionGroup");else return[i("QOptionGroup")]}),_:1},a,e)),o(" on other possibilities for creating groups of Checkboxes.</p></div>"),o(l(p,{file:"QCheckbox"},null,a,e)),o(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="standard" class="doc-heading doc-h3"${e}>Standard</h3>`),o(l(n,{title:"Standard",file:"Standard"},null,a,e)),o(`<h3 id="with-custom-icons" class="doc-heading doc-h3"${e}>With custom icons `),o(l(b,{label:"v2.5+"},null,a,e)),o("</h3>"),o(l(n,{title:"With icons",file:"WithIcons"},null,a,e)),o(`<h3 id="label" class="doc-heading doc-h3"${e}>Label</h3>`),o(l(n,{title:"Label",file:"Label"},null,a,e)),o(`<h3 id="coloring" class="doc-heading doc-h3"${e}>Coloring</h3><p${e}>In the second row in the example below, the property <code class="doc-token"${e}>keep-color</code> is being used to retain the passed in color when the checkbox is not in a toggled state.</p>`),o(l(n,{title:"Coloring",file:"Coloring"},null,a,e)),o(`<h3 id="dense" class="doc-heading doc-h3"${e}>Dense</h3>`),o(l(n,{title:"Dense",file:"Dense"},null,a,e)),o(`<h3 id="force-dark-mode" class="doc-heading doc-h3"${e}>Force dark mode</h3>`),o(l(n,{title:"Force dark mode",file:"OnDarkBackground"},null,a,e)),o(`<h3 id="sizes" class="doc-heading doc-h3"${e}>Sizes</h3><p${e}>Apart from the standard sizes below, you can define your own through the <code class="doc-token"${e}>size</code> property (last one is a custom size).</p>`),o(l(n,{title:"Standard sizes",file:"StandardSizes"},null,a,e)),o(`<h3 id="indeterminate-state" class="doc-heading doc-h3"${e}>Indeterminate state</h3><p${e}>In the example below, as soon as you click on the first checkbox it starts toggling between true/false. The second checkbox, on the other hand toggles between the three states (indeterminate/true/false) with help from <code class="doc-token"${e}>toggle-indeterminate</code>. You can optionally set the property <code class="doc-token"${e}>indeterminate-value</code>, otherwise the indeterminate value will be considered <code class="doc-token"${e}>null</code>.</p>`),o(l(n,{title:"Indeterminate state",file:"IndeterminateState"},null,a,e)),o(`<h3 id="toggle-order" class="doc-heading doc-h3"${e}>Toggle order</h3><p${e}>By default, QCheckbox follows this chain when toggling: indeterminate -&gt; checked -&gt; unchecked. However, you can change this behavior through the <code class="doc-token"${e}>toggle-order</code> prop. This property determines the order of the states and can be <code class="doc-token"${e}>tf</code> (default) or <code class="doc-token"${e}>ft</code> (<code class="doc-token"${e}>t</code> stands for state of true/checked while <code class="doc-token"${e}>f</code> for state of false/unchecked).</p><p${e}>Toggling order is:</p><ul${e}><li${e}>if <code class="doc-token"${e}>toggle-indeterminate</code> is true, then: indet -&gt; first state -&gt; second state -&gt; indet (and repeat)</li><li${e}>otherwise (no toggle-indeterminate): indet -&gt; first state -&gt; second state -&gt; first state -&gt; second state -&gt; â€¦</li></ul>`),o(l(n,{title:"Toggle order",file:"ToggleOrder"},null,a,e)),o(`<h3 id="array-model" class="doc-heading doc-h3"${e}>Array model</h3>`),o(l(n,{title:"Array as model",file:"ArrayAsModel"},null,a,e)),o(`<h3 id="custom-model-values" class="doc-heading doc-h3"${e}>Custom model values</h3>`),o(l(n,{title:"Custom model values",file:"CustomModel"},null,a,e)),o(`<h3 id="with-qoptiongroup" class="doc-heading doc-h3"${e}>With QOptionGroup</h3><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can also use `),o(l(g,{to:"/vue-components/option-group"},{default:h((s,r,x,y)=>{if(r)r("QOptionGroup");else return[i("QOptionGroup")]}),_:1},a,e)),o(", which simplifies the usage when you have groups of checkboxes, like in example below.</p></div>"),o(l(n,{title:"Usage with QOptionGroup",file:"OptionGroup"},null,a,e)),o(`<h3 id="with-qitem" class="doc-heading doc-h3"${e}>With QItem</h3><p${e}>In the example below, we are rendering a <code class="doc-token"${e}>&lt;label&gt;</code> tag (notice <code class="doc-token"${e}>tag=&quot;label&quot;</code>) so the QCheckbox will respond to clicks on QItems to change toggle state.</p>`),o(l(n,{title:"With QItem",file:"InaList"},null,a,e)),o(`<h3 id="disable" class="doc-heading doc-h3"${e}>Disable</h3>`),o(l(n,{title:"Disable",file:"Disable"},null,a,e)),o(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QCheckbox, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):</p>`),o(l(n,{title:"Native form",file:"NativeForm"},null,a,e));else return[t("p",null,"The QCheckbox component is another basic element for user input. You can use this to supply a way for the user to toggle an option."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[i("Please also refer to the "),t(g,{to:"/vue-components/option-group"},{default:h(()=>[i("QOptionGroup")]),_:1}),i(" on other possibilities for creating groups of Checkboxes.")])]),t(p,{file:"QCheckbox"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:s=>d(c)("usage")},"Usage",8,["onClick"]),t("h3",{id:"standard",class:"doc-heading doc-h3",onClick:s=>d(c)("standard")},"Standard",8,["onClick"]),t(n,{title:"Standard",file:"Standard"}),t("h3",{id:"with-custom-icons",class:"doc-heading doc-h3",onClick:s=>d(c)("with-custom-icons")},[i("With custom icons "),t(b,{label:"v2.5+"})],8,["onClick"]),t(n,{title:"With icons",file:"WithIcons"}),t("h3",{id:"label",class:"doc-heading doc-h3",onClick:s=>d(c)("label")},"Label",8,["onClick"]),t(n,{title:"Label",file:"Label"}),t("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:s=>d(c)("coloring")},"Coloring",8,["onClick"]),t("p",null,[i("In the second row in the example below, the property "),t("code",{class:"doc-token"},"keep-color"),i(" is being used to retain the passed in color when the checkbox is not in a toggled state.")]),t(n,{title:"Coloring",file:"Coloring"}),t("h3",{id:"dense",class:"doc-heading doc-h3",onClick:s=>d(c)("dense")},"Dense",8,["onClick"]),t(n,{title:"Dense",file:"Dense"}),t("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:s=>d(c)("force-dark-mode")},"Force dark mode",8,["onClick"]),t(n,{title:"Force dark mode",file:"OnDarkBackground"}),t("h3",{id:"sizes",class:"doc-heading doc-h3",onClick:s=>d(c)("sizes")},"Sizes",8,["onClick"]),t("p",null,[i("Apart from the standard sizes below, you can define your own through the "),t("code",{class:"doc-token"},"size"),i(" property (last one is a custom size).")]),t(n,{title:"Standard sizes",file:"StandardSizes"}),t("h3",{id:"indeterminate-state",class:"doc-heading doc-h3",onClick:s=>d(c)("indeterminate-state")},"Indeterminate state",8,["onClick"]),t("p",null,[i("In the example below, as soon as you click on the first checkbox it starts toggling between true/false. The second checkbox, on the other hand toggles between the three states (indeterminate/true/false) with help from "),t("code",{class:"doc-token"},"toggle-indeterminate"),i(". You can optionally set the property "),t("code",{class:"doc-token"},"indeterminate-value"),i(", otherwise the indeterminate value will be considered "),t("code",{class:"doc-token"},"null"),i(".")]),t(n,{title:"Indeterminate state",file:"IndeterminateState"}),t("h3",{id:"toggle-order",class:"doc-heading doc-h3",onClick:s=>d(c)("toggle-order")},"Toggle order",8,["onClick"]),t("p",null,[i("By default, QCheckbox follows this chain when toggling: indeterminate -> checked -> unchecked. However, you can change this behavior through the "),t("code",{class:"doc-token"},"toggle-order"),i(" prop. This property determines the order of the states and can be "),t("code",{class:"doc-token"},"tf"),i(" (default) or "),t("code",{class:"doc-token"},"ft"),i(" ("),t("code",{class:"doc-token"},"t"),i(" stands for state of true/checked while "),t("code",{class:"doc-token"},"f"),i(" for state of false/unchecked).")]),t("p",null,"Toggling order is:"),t("ul",null,[t("li",null,[i("if "),t("code",{class:"doc-token"},"toggle-indeterminate"),i(" is true, then: indet -> first state -> second state -> indet (and repeat)")]),t("li",null,"otherwise (no toggle-indeterminate): indet -> first state -> second state -> first state -> second state -> â€¦")]),t(n,{title:"Toggle order",file:"ToggleOrder"}),t("h3",{id:"array-model",class:"doc-heading doc-h3",onClick:s=>d(c)("array-model")},"Array model",8,["onClick"]),t(n,{title:"Array as model",file:"ArrayAsModel"}),t("h3",{id:"custom-model-values",class:"doc-heading doc-h3",onClick:s=>d(c)("custom-model-values")},"Custom model values",8,["onClick"]),t(n,{title:"Custom model values",file:"CustomModel"}),t("h3",{id:"with-qoptiongroup",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qoptiongroup")},"With QOptionGroup",8,["onClick"]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[i("You can also use "),t(g,{to:"/vue-components/option-group"},{default:h(()=>[i("QOptionGroup")]),_:1}),i(", which simplifies the usage when you have groups of checkboxes, like in example below.")])]),t(n,{title:"Usage with QOptionGroup",file:"OptionGroup"}),t("h3",{id:"with-qitem",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qitem")},"With QItem",8,["onClick"]),t("p",null,[i("In the example below, we are rendering a "),t("code",{class:"doc-token"},"<label>"),i(" tag (notice "),t("code",{class:"doc-token"},'tag="label"'),i(") so the QCheckbox will respond to clicks on QItems to change toggle state.")]),t(n,{title:"With QItem",file:"InaList"}),t("h3",{id:"disable",class:"doc-heading doc-h3",onClick:s=>d(c)("disable")},"Disable",8,["onClick"]),t(n,{title:"Disable",file:"Disable"}),t("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:s=>d(c)("native-form-submit")},"Native form submit",8,["onClick"]),t("p",null,[i("When dealing with a native form which has an "),t("code",{class:"doc-token"},"action"),i(" and a "),t("code",{class:"doc-token"},"method"),i(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),t("code",{class:"doc-token"},"name"),i(" property on QCheckbox, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")]),t(n,{title:"Native form",file:"NativeForm"})]}),_:1},C))}}},v=f.setup;f.setup=(k,m)=>{const u=S();return(u.modules||(u.modules=new Set)).add("src/pages/vue-components/checkbox.md"),v?v(k,m):void 0};const _=z(f,[["__file","checkbox.md"]]);export{_ as default};
