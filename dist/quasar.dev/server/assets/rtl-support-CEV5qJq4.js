import{resolveComponent as Q,mergeProps as x,withCtx as l,unref as u,createVNode as n,createTextVNode as a,useSSRContext as M}from"vue";import{ssrRenderComponent as c}from"vue/server-renderer";import{c as h}from"./page-utils-C-QWsEHe.js";import{D as P,a as f}from"./DocPage-DKr-0pQn.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as o}from"./CopyButton-l3ndfN49.js";import{_ as D}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const q={__name:"rtl-support",__ssrInlineRender:!0,setup(v){const L=[{name:"Quasar Language Packs",category:"Options & Helpers",path:"/options/quasar-language-packs"},{name:"App Internationalization",category:"Options & Helpers",path:"/options/app-internationalization"}],b=[{id:"enabling-rtl-support",title:"2. Enabling RTL support"},{id:"quasar-cli-with-vite",title:"2.1. Quasar CLI with Vite",sub:!0},{id:"quasar-cli-with-webpack",title:"2.2. Quasar CLI with Webpack",sub:!0},{id:"quasar-vite-plugin-vue-cli-plugin",title:"2.3. Quasar Vite Plugin / Vue CLI Plugin",sub:!0},{id:"quasar-umd",title:"2.4. Quasar UMD",sub:!0},{id:"how-it-works",title:"3. How it works"},{id:"things-to-keep-in-mind",title:"4. Things to keep in mind"},{id:"marking-css-rules-as-exceptions",title:"4.1. Marking CSS rules as exceptions",sub:!0}];return(V,R,S,C)=>{const $=Q("q-tab-panel");R(c(P,x({title:"RTL Support",desc:"Right to left support in a Quasar app.",heading:"","edit-link":"options/rtl-support",toc:b,related:L},C),{default:l((j,p,d,t)=>{if(p)p(`<p${t}>RTL is referring to “right to left” UI for languages that need it.</p><h2 id="enabling-rtl-support" class="doc-heading doc-h2"${t}>Enabling RTL support</h2><h3 id="quasar-cli-with-vite" class="doc-heading doc-h3"${t}>Quasar CLI with Vite</h3><ul${t}><li${t}>Edit <code class="doc-token"${t}>/postcss.config.cjs</code> file and uncomment the <code class="doc-token"${t}>require(&#39;postcss-rtlcss&#39;)</code> line.</li><li${t}>Yarn/npm install the <code class="doc-token"${t}>postcss-rtlcss</code> package.</li><li${t}>If you are already running “quasar dev” command, restart it.</li></ul>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}>module.exports = {
  plugins: [
    // https://github.com/postcss/autoprefixer
    require(&#39;autoprefixer&#39;)(...)

    // https://github.com/elchininet/postcss-rtlcss
    // If you want to support RTL css, then
    // 1. yarn/npm install postcss-rtlcss
    // 2. optionally set quasar.config file &gt; framework &gt; lang to an RTL language
    // 3. uncomment the following line:
    // require(&#39;postcss-rtlcss&#39;)
  ]
}</code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,`module.exports = {
  plugins: [
    // https://github.com/postcss/autoprefixer
    require('autoprefixer')(...)

    // https://github.com/elchininet/postcss-rtlcss
    // If you want to support RTL css, then
    // 1. yarn/npm install postcss-rtlcss
    // 2. optionally set quasar.config file > framework > lang to an RTL language
    // 3. uncomment the following line:
    // require('postcss-rtlcss')
  ]
}`)]),n(o)]}),_:1},d,t)),p(`<h3 id="quasar-cli-with-webpack" class="doc-heading doc-h3"${t}>Quasar CLI with Webpack</h3><p${t}>To enable it, you need to edit the <code class="doc-token"${t}>/quasar.config</code> file:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>rtl</span><span class="token operator"${s}>:</span> <span class="token boolean"${s}>true</span>
<span class="token punctuation"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"rtl"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"true"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},d,t)),p(`<h3 id="quasar-vite-plugin-vue-cli-plugin" class="doc-heading doc-h3"${t}>Quasar Vite Plugin / Vue CLI Plugin</h3><p${t}>You first need to install <code class="doc-token"${t}>postcss-rtlcss</code> package:</p>`),p(c(u(g),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l((k,e,r,s)=>{if(e)e(c($,{class:"q-pa-none",name:"Yarn"},{default:l((w,m,y,i)=>{if(m)m(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>yarn</span> <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>--dev</span> postcss-rtlcss</code></pre>`),m(c(o,{lang:"bash"},null,y,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]}),_:1},r,s)),e(c($,{class:"q-pa-none",name:"NPM"},{default:l((w,m,y,i)=>{if(m)m(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>npm</span> <span class="token function"${i}>install</span> --save-dev postcss-rtlcss</code></pre>`),m(c(o,{lang:"bash"},null,y,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev postcss-rtlcss")])]),n(o,{lang:"bash"})]}),_:1},r,s)),e(c($,{class:"q-pa-none",name:"PNPM"},{default:l((w,m,y,i)=>{if(m)m(`<pre class="doc-code"${i}><code${i}>$ <span class="token function"${i}>pnpm</span> <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>-D</span> postcss-rtlcss</code></pre>`),m(c(o,{lang:"bash"},null,y,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]}),_:1},r,s)),e(c($,{class:"q-pa-none",name:"Bun"},{default:l((w,m,y,i)=>{if(m)m(`<pre class="doc-code"${i}><code${i}>$ bun <span class="token function"${i}>add</span> <span class="token parameter variable"${i}>--dev</span> postcss-rtlcss</code></pre>`),m(c(o,{lang:"bash"},null,y,i));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]}),_:1},r,s));else return[n($,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1})]}),_:1},d,t)),p(`<p${t}>Then create <code class="doc-token"${t}>/postcss.config.cjs</code> file if you don’t have it already, and add this to it:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}>module<span class="token punctuation"${s}>.</span>exports <span class="token operator"${s}>=</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>plugins</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>[</span>
    <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;postcss-rtlcss&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>{</span> <span class="token comment"${s}>/* opts */</span> <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// &lt;&lt;&lt;&lt; in &quot;plugins&quot;</span>
  <span class="token punctuation"${s}>]</span>
<span class="token punctuation"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("module"),n("span",{class:"token punctuation"},"."),a("exports "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"plugins"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
    `),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'postcss-rtlcss'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token comment"},"/* opts */"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},'// <<<< in "plugins"'),a(`
  `),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},d,t)),p(`<h3 id="quasar-umd" class="doc-heading doc-h3"${t}>Quasar UMD</h3><p${t}>To enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>html</span><span class="token punctuation"${s}>&gt;</span></span>
  <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>head</span><span class="token punctuation"${s}>&gt;</span></span>
    ...
    <span class="token comment"${s}>&lt;!-- Replace &quot;2.0.0&quot; (below) with your Quasar version. --&gt;</span>
    <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>link</span> <span class="token attr-name"${s}>href</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>https://cdn.jsdelivr.net/npm/quasar@2/dist/quasar.rtl.prod.css<span class="token punctuation"${s}>&quot;</span></span> <span class="token attr-name"${s}>rel</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>stylesheet<span class="token punctuation"${s}>&quot;</span></span> <span class="token attr-name"${s}>type</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>text/css<span class="token punctuation"${s}>&quot;</span></span><span class="token punctuation"${s}>&gt;</span></span>
  <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>head</span><span class="token punctuation"${s}>&gt;</span></span>

  <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>body</span><span class="token punctuation"${s}>&gt;</span></span>
    ...

    <span class="token comment"${s}>&lt;!--
      We also need an RTL Quasar language pack; let&#39;s take Hebrew as an example;
      include this after Quasar JS tag;
      Replace &quot;2.0.0&quot; (below) with your Quasar version.
    --&gt;</span>
    <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>script</span> <span class="token attr-name"${s}>src</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>https://cdn.jsdelivr.net/npm/quasar@2/dist/lang/he.umd.prod.js<span class="token punctuation"${s}>&quot;</span></span><span class="token punctuation"${s}>&gt;</span></span><span class="token script"${s}></span><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>script</span><span class="token punctuation"${s}>&gt;</span></span>
    <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>script</span><span class="token punctuation"${s}>&gt;</span></span><span class="token script"${s}><span class="token language-javascript"${s}>
      Quasar<span class="token punctuation"${s}>.</span>lang<span class="token punctuation"${s}>.</span><span class="token function"${s}>set</span><span class="token punctuation"${s}>(</span>Quasar<span class="token punctuation"${s}>.</span>lang<span class="token punctuation"${s}>.</span>he<span class="token punctuation"${s}>)</span>
    </span></span><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>script</span><span class="token punctuation"${s}>&gt;</span></span>
  <span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>body</span><span class="token punctuation"${s}>&gt;</span></span>
<span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>html</span><span class="token punctuation"${s}>&gt;</span></span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("html")]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`
    ...
    `),n("span",{class:"token comment"},'<!-- Replace "2.0.0" (below) with your Quasar version. -->'),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("https://cdn.jsdelivr.net/npm/quasar@2/dist/quasar.rtl.prod.css"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("stylesheet"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("text/css"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`

  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
    ...

    `),n("span",{class:"token comment"},`<!--
      We also need an RTL Quasar language pack; let's take Hebrew as an example;
      include this after Quasar JS tag;
      Replace "2.0.0" (below) with your Quasar version.
    -->`),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),a(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("https://cdn.jsdelivr.net/npm/quasar@2/dist/lang/he.umd.prod.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
      Quasar`),n("span",{class:"token punctuation"},"."),a("lang"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),a("Quasar"),n("span",{class:"token punctuation"},"."),a("lang"),n("span",{class:"token punctuation"},"."),a("he"),n("span",{class:"token punctuation"},")"),a(`
    `)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("html")]),n("span",{class:"token punctuation"},">")])])]),n(o)]}),_:1},d,t)),p(`<p${t}>Check what tags you need to include in your HTML files by using our `),p(c(f,{to:"/start/umd"},{default:l((k,e,r,s)=>{if(e)e("UMD tag generator");else return[a("UMD tag generator")]}),_:1},d,t)),p(` and making sure that you tick the “RTL CSS support” checkbox. Also notice the <code class="doc-token"${t}>&lt;html dir=&quot;rtl&quot;&gt;</code> tag at the beginning of the generated html file – you’ll need that too.</p><div class="doc-note doc-note--warning"${t}><p class="doc-note__title"${t}>CAVEAT</p><p${t}>Quasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically.</p></div><h2 id="how-it-works" class="doc-heading doc-h2"${t}>How it works</h2><p${t}>RTL is tightly coupled to `),p(c(f,{to:"/options/quasar-language-packs"},{default:l((k,e,r,s)=>{if(e)e("Quasar Language Packs");else return[a("Quasar Language Packs")]}),_:1},d,t)),p(`. <strong${t}>When Quasar is set to use an RTL language</strong> (language pack has “rtl” prop set to “true”) and <strong${t}>RTL support is enabled</strong> (check the “Enabling RTL support” section above), then the UI will dynamically transform Quasar &amp; your website/app code for RTL.</p><p${t}>Let’s discuss about each of these requirements:</p><ol${t}><li${t}><p${t}><em${t}>Quasar needs to be set to use an RTL language</em>. See `),p(c(f,{to:"/options/quasar-language-packs"},{default:l((k,e,r,s)=>{if(e)e("Quasar Language Packs");else return[a("Quasar Language Packs")]}),_:1},d,t)),p(` on how you can set a language. You can set a language as default or dynamically set one.</p></li><li${t}><p${t}><em${t}>RTL support needs to be enabled</em>. Please double-check the “Enabling RTL support” section above. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules.</p></li><li${t}><p${t}>Optional: <em${t}>Treat devland source CSS as RTL</em>. By default, Quasar assumes that all styles are written in LTR direction and generates corresponding RTL styles for them. Should you wish to write your own css directly in RTL then you need to:</p><ul${t}><li${t}>(Quasar CLI with Webpack) set quasar.config file &gt; “build” &gt; rtl &gt; “source” to <code class="doc-token"${t}>rtl</code></li><li${t}>(Quasar CLI with Vite / Quasar Vite plugin / Vue CLI plugin) set <code class="doc-token"${t}>require(&#39;postcss-rtlcss&#39;)({ source: &#39;rtl&#39; })</code> in /postcss.config.cjs</li></ul></li></ol><div class="doc-note doc-note--tip"${t}><p class="doc-note__title"${t}>TIP</p><p${t}>Full list of `),p(c(f,{to:"https://github.com/elchininet/postcss-rtlcss#options"},{default:l((k,e,r,s)=>{if(e)e("postcss-rtlcss options");else return[a("postcss-rtlcss options")]}),_:1},d,t)),p(`.</p></div><h2 id="things-to-keep-in-mind" class="doc-heading doc-h2"${t}>Things to keep in mind</h2><ul${t}><li${t}><p${t}>Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamically changed for you automatically.</p></li><li${t}><p${t}>You can dynamically detect if you are on RTL mode by taking a look at Boolean <code class="doc-token"${t}>$q.lang.rtl</code>. More info on `),p(c(f,{to:"/options/the-q-object"},{default:l((k,e,r,s)=>{if(e)e("The $q object");else return[a("The $q object")]}),_:1},d,t)),p(`.</p></li><li${t}><p${t}>You need to be careful when writing your own CSS. Like mentioned above, if RTL support is enabled then RTL (LTR if postcss-rtl config has “source” set to “ltr”) rules will be automatically added based on your CSS code. So writing:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code language-css"${s}><code${s}><span class="token selector"${s}>.my-class</span> <span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>margin-left</span><span class="token punctuation"${s}>:</span> 10px<span class="token punctuation"${s}>;</span>
  <span class="token property"${s}>right</span><span class="token punctuation"${s}>:</span> 5px<span class="token punctuation"${s}>;</span>
<span class="token punctuation"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(" 10px"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token property"},"right"),n("span",{class:"token punctuation"},":"),a(" 5px"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},d,t)),p(`<p${t}>…will add this rule for RTL:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code language-css"${s}><code${s}><span class="token selector"${s}>[dir=rtl] .my-class</span> <span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>margin-right</span><span class="token punctuation"${s}>:</span> 10px<span class="token punctuation"${s}>;</span>
  <span class="token property"${s}>left</span><span class="token punctuation"${s}>:</span> 5px<span class="token punctuation"${s}>;</span>
<span class="token punctuation"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},"[dir=rtl] .my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),a(" 10px"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token property"},"left"),n("span",{class:"token punctuation"},":"),a(" 5px"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},d,t)),p(`<p${t}>Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added.</p></li></ul><h3 id="marking-css-rules-as-exceptions" class="doc-heading doc-h3"${t}>Marking CSS rules as exceptions</h3><p${t}>If you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code language-css"${s}><code${s}><span class="token selector"${s}>.my-class</span> <span class="token punctuation"${s}>{</span>
  <span class="token property"${s}>margin-left</span><span class="token punctuation"${s}>:</span> 10px <span class="token comment"${s}>/* rtl:ignore */</span><span class="token punctuation"${s}>;</span>
<span class="token punctuation"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(" 10px "),n("span",{class:"token comment"},"/* rtl:ignore */"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]}),_:1},d,t)),p(`<p${t}>…or SCSS with indented form:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token selector"${s}>.my-class</span>
<span class="token property-line"${s}>  <span class="token property"${s}>margin-left</span><span class="token punctuation"${s}>:</span> 10px #{&quot;<span class="token operator"${s}>/</span><span class="token operator"${s}>*</span> <span class="token property"${s}>rtl</span><span class="token punctuation"${s}>:</span><span class="token property"${s}>ignore</span> <span class="token operator"${s}>*</span><span class="token operator"${s}>/</span>&quot;}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(`
`),n("span",{class:"token property-line"},[a("  "),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(' 10px #{"'),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},"*"),a(),n("span",{class:"token property"},"rtl"),n("span",{class:"token punctuation"},":"),n("span",{class:"token property"},"ignore"),a(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},"/"),a('"}')])])]),n(o)]}),_:1},d,t)),p(`<p${t}>…or default SCSS:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token selector"${s}>.my-class {</span>
<span class="token property-line"${s}>  <span class="token property"${s}>margin-left</span><span class="token punctuation"${s}>:</span> 10px #{&quot;<span class="token operator"${s}>/</span><span class="token operator"${s}>*</span> <span class="token property"${s}>rtl</span><span class="token punctuation"${s}>:</span><span class="token property"${s}>ignore</span> <span class="token operator"${s}>*</span><span class="token operator"${s}>/</span>&quot;};</span>
<span class="token selector"${s}>}</span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token selector"},".my-class {"),a(`
`),n("span",{class:"token property-line"},[a("  "),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(' 10px #{"'),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},"*"),a(),n("span",{class:"token property"},"rtl"),n("span",{class:"token punctuation"},":"),n("span",{class:"token property"},"ignore"),a(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},"/"),a('"};')]),a(`
`),n("span",{class:"token selector"},"}")])]),n(o)]}),_:1},d,t)),p(`<p${t}>Now both RTL and non-RTL UI mode will have <code class="doc-token"${t}>margin-left</code> prop.</p><p${t}>Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add <code class="doc-token"${t}>dir=&quot;ltr&quot;</code> or <code class="doc-token"${t}>dir=&quot;rtl&quot;</code> HTML attribute to the outermost DOM element / component template:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>div</span> <span class="token attr-name"${s}>dir</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>rtl<span class="token punctuation"${s}>&quot;</span></span><span class="token punctuation"${s}>&gt;</span></span>
  <span class="token comment"${s}>&lt;!--
    this DIV and all its content will use RTL mode
    regardless of Quasar language pack RTL settings
  --&gt;</span>
<span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>div</span><span class="token punctuation"${s}>&gt;</span></span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"dir"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("rtl"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token comment"},`<!--
    this DIV and all its content will use RTL mode
    regardless of Quasar language pack RTL settings
  -->`),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")])])]),n(o)]}),_:1},d,t)),p(`<p${t}>Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:</p>`),p(c(u(g),null,{default:l((k,e,r,s)=>{if(e)e(`<pre class="doc-code"${s}><code${s}><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>div</span> <span class="token attr-name"${s}>dir</span><span class="token attr-value"${s}><span class="token punctuation attr-equals"${s}>=</span><span class="token punctuation"${s}>&quot;</span>ltr<span class="token punctuation"${s}>&quot;</span></span><span class="token punctuation"${s}>&gt;</span></span>
  <span class="token comment"${s}>&lt;!--
    this DIV and all its content will use non-RTL mode
    regardless of Quasar language pack RTL settings
  --&gt;</span>
<span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>div</span><span class="token punctuation"${s}>&gt;</span></span></code></pre>`),e(c(o,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"dir"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("ltr"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token comment"},`<!--
    this DIV and all its content will use non-RTL mode
    regardless of Quasar language pack RTL settings
  -->`),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")])])]),n(o)]}),_:1},d,t));else return[n("p",null,"RTL is referring to “right to left” UI for languages that need it."),n("h2",{id:"enabling-rtl-support",class:"doc-heading doc-h2",onClick:k=>u(h)("enabling-rtl-support")},"Enabling RTL support",8,["onClick"]),n("h3",{id:"quasar-cli-with-vite",class:"doc-heading doc-h3",onClick:k=>u(h)("quasar-cli-with-vite")},"Quasar CLI with Vite",8,["onClick"]),n("ul",null,[n("li",null,[a("Edit "),n("code",{class:"doc-token"},"/postcss.config.cjs"),a(" file and uncomment the "),n("code",{class:"doc-token"},"require('postcss-rtlcss')"),a(" line.")]),n("li",null,[a("Yarn/npm install the "),n("code",{class:"doc-token"},"postcss-rtlcss"),a(" package.")]),n("li",null,"If you are already running “quasar dev” command, restart it.")]),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,`module.exports = {
  plugins: [
    // https://github.com/postcss/autoprefixer
    require('autoprefixer')(...)

    // https://github.com/elchininet/postcss-rtlcss
    // If you want to support RTL css, then
    // 1. yarn/npm install postcss-rtlcss
    // 2. optionally set quasar.config file > framework > lang to an RTL language
    // 3. uncomment the following line:
    // require('postcss-rtlcss')
  ]
}`)]),n(o)]),_:1}),n("h3",{id:"quasar-cli-with-webpack",class:"doc-heading doc-h3",onClick:k=>u(h)("quasar-cli-with-webpack")},"Quasar CLI with Webpack",8,["onClick"]),n("p",null,[a("To enable it, you need to edit the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"rtl"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token boolean"},"true"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("h3",{id:"quasar-vite-plugin-vue-cli-plugin",class:"doc-heading doc-h3",onClick:k=>u(h)("quasar-vite-plugin-vue-cli-plugin")},"Quasar Vite Plugin / Vue CLI Plugin",8,["onClick"]),n("p",null,[a("You first need to install "),n("code",{class:"doc-token"},"postcss-rtlcss"),a(" package:")]),n(u(g),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l(()=>[n($,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1}),n($,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" postcss-rtlcss")])]),n(o,{lang:"bash"})]),_:1})]),_:1}),n("p",null,[a("Then create "),n("code",{class:"doc-token"},"/postcss.config.cjs"),a(" file if you don’t have it already, and add this to it:")]),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("module"),n("span",{class:"token punctuation"},"."),a("exports "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"plugins"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"["),a(`
    `),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'postcss-rtlcss'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token comment"},"/* opts */"),a(),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},'// <<<< in "plugins"'),a(`
  `),n("span",{class:"token punctuation"},"]"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("h3",{id:"quasar-umd",class:"doc-heading doc-h3",onClick:k=>u(h)("quasar-umd")},"Quasar UMD",8,["onClick"]),n("p",null,"To enable RTL UIs in UMD you need to include the RTL equivalent CSS tag for your Quasar version and also pack in a Quasar RTL language pack (like Hebrew or Farsi). Example:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("html")]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`
    ...
    `),n("span",{class:"token comment"},'<!-- Replace "2.0.0" (below) with your Quasar version. -->'),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("link")]),a(),n("span",{class:"token attr-name"},"href"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("https://cdn.jsdelivr.net/npm/quasar@2/dist/quasar.rtl.prod.css"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"rel"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("stylesheet"),n("span",{class:"token punctuation"},'"')]),a(),n("span",{class:"token attr-name"},"type"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("text/css"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("head")]),n("span",{class:"token punctuation"},">")]),a(`

  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
    ...

    `),n("span",{class:"token comment"},`<!--
      We also need an RTL Quasar language pack; let's take Hebrew as an example;
      include this after Quasar JS tag;
      Replace "2.0.0" (below) with your Quasar version.
    -->`),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),a(),n("span",{class:"token attr-name"},"src"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("https://cdn.jsdelivr.net/npm/quasar@2/dist/lang/he.umd.prod.js"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"}),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")]),a(`
    `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
      Quasar`),n("span",{class:"token punctuation"},"."),a("lang"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"set"),n("span",{class:"token punctuation"},"("),a("Quasar"),n("span",{class:"token punctuation"},"."),a("lang"),n("span",{class:"token punctuation"},"."),a("he"),n("span",{class:"token punctuation"},")"),a(`
    `)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("body")]),n("span",{class:"token punctuation"},">")]),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("html")]),n("span",{class:"token punctuation"},">")])])]),n(o)]),_:1}),n("p",null,[a("Check what tags you need to include in your HTML files by using our "),n(f,{to:"/start/umd"},{default:l(()=>[a("UMD tag generator")]),_:1}),a(" and making sure that you tick the “RTL CSS support” checkbox. Also notice the "),n("code",{class:"doc-token"},'<html dir="rtl">'),a(" tag at the beginning of the generated html file – you’ll need that too.")]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"CAVEAT"),n("p",null,"Quasar CLI automatically adds equivalent RTL CSS rules for your website/app code, but this is not the case for UMD where Quasar CLI is not being used. You’ll have to manage writing the RTL equivalent of your website/app CSS code by yourself. It’s only Quasar components that will have this handled automatically.")]),n("h2",{id:"how-it-works",class:"doc-heading doc-h2",onClick:k=>u(h)("how-it-works")},"How it works",8,["onClick"]),n("p",null,[a("RTL is tightly coupled to "),n(f,{to:"/options/quasar-language-packs"},{default:l(()=>[a("Quasar Language Packs")]),_:1}),a(". "),n("strong",null,"When Quasar is set to use an RTL language"),a(" (language pack has “rtl” prop set to “true”) and "),n("strong",null,"RTL support is enabled"),a(" (check the “Enabling RTL support” section above), then the UI will dynamically transform Quasar & your website/app code for RTL.")]),n("p",null,"Let’s discuss about each of these requirements:"),n("ol",null,[n("li",null,[n("p",null,[n("em",null,"Quasar needs to be set to use an RTL language"),a(". See "),n(f,{to:"/options/quasar-language-packs"},{default:l(()=>[a("Quasar Language Packs")]),_:1}),a(" on how you can set a language. You can set a language as default or dynamically set one.")])]),n("li",null,[n("p",null,[n("em",null,"RTL support needs to be enabled"),a(". Please double-check the “Enabling RTL support” section above. What this does is it compiles CSS for both your website/app code and for Quasar components and add corresponding RTL CSS rules automatically. Your CSS bundle will slightly increase in size due to the addition of these CSS rules.")])]),n("li",null,[n("p",null,[a("Optional: "),n("em",null,"Treat devland source CSS as RTL"),a(". By default, Quasar assumes that all styles are written in LTR direction and generates corresponding RTL styles for them. Should you wish to write your own css directly in RTL then you need to:")]),n("ul",null,[n("li",null,[a("(Quasar CLI with Webpack) set quasar.config file > “build” > rtl > “source” to "),n("code",{class:"doc-token"},"rtl")]),n("li",null,[a("(Quasar CLI with Vite / Quasar Vite plugin / Vue CLI plugin) set "),n("code",{class:"doc-token"},"require('postcss-rtlcss')({ source: 'rtl' })"),a(" in /postcss.config.cjs")])])])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("Full list of "),n(f,{to:"https://github.com/elchininet/postcss-rtlcss#options"},{default:l(()=>[a("postcss-rtlcss options")]),_:1}),a(".")])]),n("h2",{id:"things-to-keep-in-mind",class:"doc-heading doc-h2",onClick:k=>u(h)("things-to-keep-in-mind")},"Things to keep in mind",8,["onClick"]),n("ul",null,[n("li",null,[n("p",null,"Both RTL and non-RTL Quasar language packs will work together and dynamically switch to/from RTL. So only choosing an RTL Quasar language pack will trigger the RTL UI for you. You don’t need separate builds of your app (one for non-RTL and one for RTL-only). The RTL is dynamically changed for you automatically.")]),n("li",null,[n("p",null,[a("You can dynamically detect if you are on RTL mode by taking a look at Boolean "),n("code",{class:"doc-token"},"$q.lang.rtl"),a(". More info on "),n(f,{to:"/options/the-q-object"},{default:l(()=>[a("The $q object")]),_:1}),a(".")])]),n("li",null,[n("p",null,"You need to be careful when writing your own CSS. Like mentioned above, if RTL support is enabled then RTL (LTR if postcss-rtl config has “source” set to “ltr”) rules will be automatically added based on your CSS code. So writing:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(" 10px"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token property"},"right"),n("span",{class:"token punctuation"},":"),a(" 5px"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("p",null,"…will add this rule for RTL:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},"[dir=rtl] .my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-right"),n("span",{class:"token punctuation"},":"),a(" 10px"),n("span",{class:"token punctuation"},";"),a(`
  `),n("span",{class:"token property"},"left"),n("span",{class:"token punctuation"},":"),a(" 5px"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("p",null,"Any CSS rule that refers to “left” or “right” is automatically triggering an equivalent RTL CSS rule to be added.")])]),n("h3",{id:"marking-css-rules-as-exceptions",class:"doc-heading doc-h3",onClick:k=>u(h)("marking-css-rules-as-exceptions")},"Marking CSS rules as exceptions",8,["onClick"]),n("p",null,"If you need an exception so your CSS code will not add a corresponding RTL rule, then add this comment:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code language-css"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(" 10px "),n("span",{class:"token comment"},"/* rtl:ignore */"),n("span",{class:"token punctuation"},";"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(o)]),_:1}),n("p",null,"…or SCSS with indented form:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token selector"},".my-class"),a(`
`),n("span",{class:"token property-line"},[a("  "),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(' 10px #{"'),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},"*"),a(),n("span",{class:"token property"},"rtl"),n("span",{class:"token punctuation"},":"),n("span",{class:"token property"},"ignore"),a(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},"/"),a('"}')])])]),n(o)]),_:1}),n("p",null,"…or default SCSS:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token selector"},".my-class {"),a(`
`),n("span",{class:"token property-line"},[a("  "),n("span",{class:"token property"},"margin-left"),n("span",{class:"token punctuation"},":"),a(' 10px #{"'),n("span",{class:"token operator"},"/"),n("span",{class:"token operator"},"*"),a(),n("span",{class:"token property"},"rtl"),n("span",{class:"token punctuation"},":"),n("span",{class:"token property"},"ignore"),a(),n("span",{class:"token operator"},"*"),n("span",{class:"token operator"},"/"),a('"};')]),a(`
`),n("span",{class:"token selector"},"}")])]),n(o)]),_:1}),n("p",null,[a("Now both RTL and non-RTL UI mode will have "),n("code",{class:"doc-token"},"margin-left"),a(" prop.")]),n("p",null,[a("Sometimes you’ll need to make exceptions for whole DOM elements / components. In this case, add "),n("code",{class:"doc-token"},'dir="ltr"'),a(" or "),n("code",{class:"doc-token"},'dir="rtl"'),a(" HTML attribute to the outermost DOM element / component template:")]),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"dir"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("rtl"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token comment"},`<!--
    this DIV and all its content will use RTL mode
    regardless of Quasar language pack RTL settings
  -->`),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")])])]),n(o)]),_:1}),n("p",null,"Or, if you need your RTL UI to use left-to-right (ltr) mode for a DOM element / component:"),n(u(g),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("div")]),a(),n("span",{class:"token attr-name"},"dir"),n("span",{class:"token attr-value"},[n("span",{class:"token punctuation attr-equals"},"="),n("span",{class:"token punctuation"},'"'),a("ltr"),n("span",{class:"token punctuation"},'"')]),n("span",{class:"token punctuation"},">")]),a(`
  `),n("span",{class:"token comment"},`<!--
    this DIV and all its content will use non-RTL mode
    regardless of Quasar language pack RTL settings
  -->`),a(`
`),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("div")]),n("span",{class:"token punctuation"},">")])])]),n(o)]),_:1})]}),_:1},S))}}},T=q.setup;q.setup=(v,L)=>{const b=M();return(b.modules||(b.modules=new Set)).add("src/pages/options/rtl-support.md"),T?T(v,L):void 0};const X=D(q,[["__file","rtl-support.md"]]);export{X as default};
