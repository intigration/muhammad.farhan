import{mergeProps as q,withCtx as i,unref as c,createVNode as s,createTextVNode as n,useSSRContext as C}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c as S}from"./page-utils-C-QWsEHe.js";import{D as x,a as m}from"./DocPage-DKr-0pQn.js";import{D as h}from"./DocPrerender-DPOnWPFO.js";import{C as u}from"./CopyButton-l3ndfN49.js";import{_ as A}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const d={__name:"browser-compatibility",__ssrInlineRender:!0,setup(k){const p=[{name:"The quasar.config file",category:"Quasar CLI (with Webpack)",path:"/quasar-cli-webpack/quasar-config-file"}],r=[{id:"configuring-compatibility",title:"2. Configuring compatibility"}];return(j,y,v,$)=>{y(l(x,q({title:"Browser compatibility",desc:"(@quasar/app-webpack) How to handle the browser support with Quasar CLI.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/browser-compatibility",toc:r,related:p},$),{default:i((B,o,g,a)=>{if(o)o(`<h2 id="configuring-compatibility" class="doc-heading doc-h2"${a}>Configuring compatibility</h2><p${a}>Your <code class="doc-token"${a}>/package.json</code> file should contain a <code class="doc-token"${a}>browserslist</code> field. This will tell Quasar App the range of browsers that the project is targeting. Babel and Autoprefixer will use this field to determine how to transpile JS code (if transpiling is left enabled) and what CSS vendor prefixes it needs to add your CSS code.</p><p${a}>Babel will look for exactly the JS features that need transpiling (based on the configured browsers) and apply them. Be mindful about it though, as it is sufficient to add one “bad apple” in the options list and that will dumb down your code back to ES5.</p><p${a}>The following is the default “browserslist” when you create a Quasar project:</p>`),o(l(c(h),{title:"package.json"},{default:i((f,e,b,t)=>{if(e)e(`<pre class="doc-code"${t}><code${t}><span class="token string-property property"${t}>&quot;browserslist&quot;</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>[</span>
  <span class="token string"${t}>&quot;last 10 Chrome versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 10 Firefox versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 4 Edge versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 7 Safari versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 8 Android versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 8 ChromeAndroid versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 8 FirefoxAndroid versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 10 iOS versions&quot;</span><span class="token punctuation"${t}>,</span>
  <span class="token string"${t}>&quot;last 5 Opera versions&quot;</span>
<span class="token punctuation"${t}>]</span></code></pre>`),e(l(u,null,null,b,t));else return[s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token string-property property"},'"browserslist"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"["),n(`
  `),s("span",{class:"token string"},'"last 10 Chrome versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 10 Firefox versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 4 Edge versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 7 Safari versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 Android versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 ChromeAndroid versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 FirefoxAndroid versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 10 iOS versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 5 Opera versions"'),n(`
`),s("span",{class:"token punctuation"},"]")])]),s(u)]}),_:1},g,a)),o(`<p${a}>More info on how to specify browser ranges: `),o(l(m,{to:"https://github.com/browserslist/browserslist"},{default:i((f,e,b,t)=>{if(e)e("browserslist");else return[n("browserslist")]}),_:1},g,a)),o(".</p>");else return[s("h2",{id:"configuring-compatibility",class:"doc-heading doc-h2",onClick:f=>c(S)("configuring-compatibility")},"Configuring compatibility",8,["onClick"]),s("p",null,[n("Your "),s("code",{class:"doc-token"},"/package.json"),n(" file should contain a "),s("code",{class:"doc-token"},"browserslist"),n(" field. This will tell Quasar App the range of browsers that the project is targeting. Babel and Autoprefixer will use this field to determine how to transpile JS code (if transpiling is left enabled) and what CSS vendor prefixes it needs to add your CSS code.")]),s("p",null,"Babel will look for exactly the JS features that need transpiling (based on the configured browsers) and apply them. Be mindful about it though, as it is sufficient to add one “bad apple” in the options list and that will dumb down your code back to ES5."),s("p",null,"The following is the default “browserslist” when you create a Quasar project:"),s(c(h),{title:"package.json"},{default:i(()=>[s("pre",{class:"doc-code"},[s("code",null,[s("span",{class:"token string-property property"},'"browserslist"'),s("span",{class:"token operator"},":"),n(),s("span",{class:"token punctuation"},"["),n(`
  `),s("span",{class:"token string"},'"last 10 Chrome versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 10 Firefox versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 4 Edge versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 7 Safari versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 Android versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 ChromeAndroid versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 8 FirefoxAndroid versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 10 iOS versions"'),s("span",{class:"token punctuation"},","),n(`
  `),s("span",{class:"token string"},'"last 5 Opera versions"'),n(`
`),s("span",{class:"token punctuation"},"]")])]),s(u)]),_:1}),s("p",null,[n("More info on how to specify browser ranges: "),s(m,{to:"https://github.com/browserslist/browserslist"},{default:i(()=>[n("browserslist")]),_:1}),n(".")])]}),_:1},v))}}},w=d.setup;d.setup=(k,p)=>{const r=C();return(r.modules||(r.modules=new Set)).add("src/pages/quasar-cli-webpack/browser-compatibility.md"),w?w(k,p):void 0};const W=A(d,[["__file","browser-compatibility.md"]]);export{W as default};
