import{mergeProps as q,withCtx as l,unref as i,createVNode as e,createTextVNode as o,useSSRContext as E}from"vue";import{ssrRenderComponent as r}from"vue/server-renderer";import{c as g}from"./page-utils-C-QWsEHe.js";import{D as P,a as m}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocTree-Kz2iQlb5.js";import{D as w}from"./DocPrerender-DPOnWPFO.js";import{C as c}from"./CopyButton-l3ndfN49.js";import{_ as C}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const b={__name:"preparation",__ssrInlineRender:!0,setup(y){const f=[{id:"step-1-add-quasar-electron-mode",title:"2. Step 1: Add Quasar Electron Mode"},{id:"a-note-for-windows-users",title:"2.1. A note for Windows Users",sub:!0},{id:"step-2-start-developing",title:"3. Step 2: Start Developing"}],p={tree:{l:"src-electron",c:[{l:"icons",e:"Icons of your app for all platforms",c:[{l:"icon.icns",e:"Icon file for Darwin (MacOS) platform"},{l:"icon.ico",e:"Icon file for win32 (Windows) platform"},{l:"icon.png",e:"Tray icon file for all platforms (especially Linux)"}]},{l:"electron-preload.js",e:"(or .ts) Electron preload script (injects Node.js stuff into renderer thread)"},{l:"electron-main.js",e:"(or .ts) Main thread code"}]}};return(D,$,x,S)=>{$(r(P,q({title:"Preparation for Electron",desc:"(@quasar/app-webpack) How to add Electron mode into a Quasar app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-electron-apps/preparation",toc:f},S),{default:l((W,s,u,t)=>{if(s)s(`<p${t}>Before we dive in to the actual development, we need to do some preparation work.</p><h2 id="step-1-add-quasar-electron-mode" class="doc-heading doc-h2"${t}>Step 1: Add Quasar Electron Mode</h2><p${t}>In order to develop/build a Quasar Electron app, we need to add the Electron mode to our Quasar project. What this does is that it yarn/npm/pnpm/bun installs some Electron packages and creates <code class="doc-token"${t}>/src-electron</code> folder.</p>`),s(r(i(w),null,{default:l((d,a,h,n)=>{if(a)a(`<pre class="doc-code"${n}><code${n}>$ quasar mode <span class="token function"${n}>add</span> electron</code></pre>`),a(r(c,{lang:"bash"},null,h,n));else return[e("pre",{class:"doc-code"},[e("code",null,[o("$ quasar mode "),e("span",{class:"token function"},"add"),o(" electron")])]),e(c,{lang:"bash"})]}),_:1},u,t)),s(`<p${t}>Every Electron app has two threads: the main thread (deals with the window and initialization code – from the newly created folder <code class="doc-token"${t}>/src-electron</code>) and the renderer thread (which deals with the actual content of your app from <code class="doc-token"${t}>/src</code>).</p><p${t}>The new folder has the following structure:</p>`),s(r(k,{def:p.tree},null,u,t)),s(`<h3 id="a-note-for-windows-users" class="doc-heading doc-h3"${t}>A note for Windows Users</h3><p${t}>If you run into errors during npm install about node-gyp, then you most likely do not have the proper build tools installed on your system. Build tools include items like Python and Visual Studio. Fortunately, there are a few packages to help simplify this process.</p><p${t}>The first item we need to check is our npm version and ensure that it is not outdated. This is accomplished using `),s(r(m,{to:"https://github.com/felixrieseberg/npm-windows-upgrade"},{default:l((d,a,h,n)=>{if(a)a("npm-windows-upgrade");else return[o("npm-windows-upgrade")]}),_:1},u,t)),s(`. If you are using yarn, then you can skip this check.</p><p${t}>Once that is complete, we can then continue to setup the needed build tools. Using `),s(r(m,{to:"https://github.com/felixrieseberg/windows-build-tools"},{default:l((d,a,h,n)=>{if(a)a("windows-build-tools");else return[o("windows-build-tools")]}),_:1},u,t)),s(`, most of the dirty work is done for us. Installing this globally will in turn setup Visual C++ packages, Python, and more.</p><div class="doc-note doc-note--warning"${t}><p class="doc-note__title"${t}>Note: April 2019</p><p${t}>In Powershell.exe (Run as Admin) <code class="doc-token"${t}>npm install --global windows-build-tools</code> seems to fail at the moment with errors pointing to python2 and vctools. You can get around this with Chocolatey. One-liner install:</p><p${t}><strong${t}>Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(‘https://chocolatey.org/install.ps1’))</strong></p><p${t}>and then run <code class="doc-token"${t}>choco upgrade python2 visualstudio2017-workload-vctools</code>.</p></div><p${t}>At this point things should successfully install, but if not then you will need a clean installation of Visual Studio. Please note that these are not problems with Quasar, but they are related to NPM and Windows.</p><h2 id="step-2-start-developing" class="doc-heading doc-h2"${t}>Step 2: Start Developing</h2><p${t}>If you want to jump right in and start developing, you can skip the previous step with “quasar mode” command and issue:</p>`),s(r(i(w),null,{default:l((d,a,h,n)=>{if(a)a(`<pre class="doc-code"${n}><code${n}>$ quasar dev <span class="token parameter variable"${n}>-m</span> electron

<span class="token comment"${n}># passing extra parameters and/or options to</span>
<span class="token comment"${n}># underlying &quot;electron&quot; executable:</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> electron -- --no-sandbox --disable-setuid-sandbox
<span class="token comment"${n}># when on Windows and using Powershell:</span>
$ quasar dev <span class="token parameter variable"${n}>-m</span> electron <span class="token string"${n}>&#39;--&#39;</span> --no-sandbox --disable-setuid-sandbox</code></pre>`),a(r(c,{lang:"bash"},null,h,n));else return[e("pre",{class:"doc-code"},[e("code",null,[o("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),o(` electron

`),e("span",{class:"token comment"},"# passing extra parameters and/or options to"),o(`
`),e("span",{class:"token comment"},'# underlying "electron" executable:'),o(`
$ quasar dev `),e("span",{class:"token parameter variable"},"-m"),o(` electron -- --no-sandbox --disable-setuid-sandbox
`),e("span",{class:"token comment"},"# when on Windows and using Powershell:"),o(`
$ quasar dev `),e("span",{class:"token parameter variable"},"-m"),o(" electron "),e("span",{class:"token string"},"'--'"),o(" --no-sandbox --disable-setuid-sandbox")])]),e(c,{lang:"bash"})]}),_:1},u,t)),s(`<p${t}>This will add Electron mode automatically, if it is missing. It will open up an Electron window which will render your app along with Developer Tools opened side by side.</p>`);else return[e("p",null,"Before we dive in to the actual development, we need to do some preparation work."),e("h2",{id:"step-1-add-quasar-electron-mode",class:"doc-heading doc-h2",onClick:d=>i(g)("step-1-add-quasar-electron-mode")},"Step 1: Add Quasar Electron Mode",8,["onClick"]),e("p",null,[o("In order to develop/build a Quasar Electron app, we need to add the Electron mode to our Quasar project. What this does is that it yarn/npm/pnpm/bun installs some Electron packages and creates "),e("code",{class:"doc-token"},"/src-electron"),o(" folder.")]),e(i(w),null,{default:l(()=>[e("pre",{class:"doc-code"},[e("code",null,[o("$ quasar mode "),e("span",{class:"token function"},"add"),o(" electron")])]),e(c,{lang:"bash"})]),_:1}),e("p",null,[o("Every Electron app has two threads: the main thread (deals with the window and initialization code – from the newly created folder "),e("code",{class:"doc-token"},"/src-electron"),o(") and the renderer thread (which deals with the actual content of your app from "),e("code",{class:"doc-token"},"/src"),o(").")]),e("p",null,"The new folder has the following structure:"),e(k,{def:p.tree},null,8,["def"]),e("h3",{id:"a-note-for-windows-users",class:"doc-heading doc-h3",onClick:d=>i(g)("a-note-for-windows-users")},"A note for Windows Users",8,["onClick"]),e("p",null,"If you run into errors during npm install about node-gyp, then you most likely do not have the proper build tools installed on your system. Build tools include items like Python and Visual Studio. Fortunately, there are a few packages to help simplify this process."),e("p",null,[o("The first item we need to check is our npm version and ensure that it is not outdated. This is accomplished using "),e(m,{to:"https://github.com/felixrieseberg/npm-windows-upgrade"},{default:l(()=>[o("npm-windows-upgrade")]),_:1}),o(". If you are using yarn, then you can skip this check.")]),e("p",null,[o("Once that is complete, we can then continue to setup the needed build tools. Using "),e(m,{to:"https://github.com/felixrieseberg/windows-build-tools"},{default:l(()=>[o("windows-build-tools")]),_:1}),o(", most of the dirty work is done for us. Installing this globally will in turn setup Visual C++ packages, Python, and more.")]),e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"Note: April 2019"),e("p",null,[o("In Powershell.exe (Run as Admin) "),e("code",{class:"doc-token"},"npm install --global windows-build-tools"),o(" seems to fail at the moment with errors pointing to python2 and vctools. You can get around this with Chocolatey. One-liner install:")]),e("p",null,[e("strong",null,"Set-ExecutionPolicy Bypass -Scope Process -Force; iex ((New-Object System.Net.WebClient).DownloadString(‘https://chocolatey.org/install.ps1’))")]),e("p",null,[o("and then run "),e("code",{class:"doc-token"},"choco upgrade python2 visualstudio2017-workload-vctools"),o(".")])]),e("p",null,"At this point things should successfully install, but if not then you will need a clean installation of Visual Studio. Please note that these are not problems with Quasar, but they are related to NPM and Windows."),e("h2",{id:"step-2-start-developing",class:"doc-heading doc-h2",onClick:d=>i(g)("step-2-start-developing")},"Step 2: Start Developing",8,["onClick"]),e("p",null,"If you want to jump right in and start developing, you can skip the previous step with “quasar mode” command and issue:"),e(i(w),null,{default:l(()=>[e("pre",{class:"doc-code"},[e("code",null,[o("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),o(` electron

`),e("span",{class:"token comment"},"# passing extra parameters and/or options to"),o(`
`),e("span",{class:"token comment"},'# underlying "electron" executable:'),o(`
$ quasar dev `),e("span",{class:"token parameter variable"},"-m"),o(` electron -- --no-sandbox --disable-setuid-sandbox
`),e("span",{class:"token comment"},"# when on Windows and using Powershell:"),o(`
$ quasar dev `),e("span",{class:"token parameter variable"},"-m"),o(" electron "),e("span",{class:"token string"},"'--'"),o(" --no-sandbox --disable-setuid-sandbox")])]),e(c,{lang:"bash"})]),_:1}),e("p",null,"This will add Electron mode automatically, if it is missing. It will open up an Electron window which will render your app along with Developer Tools opened side by side.")]}),_:1},x))}}},v=b.setup;b.setup=(y,f)=>{const p=E();return(p.modules||(p.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-electron-apps/preparation.md"),v?v(y,f):void 0};const Y=C(b,[["__file","preparation.md"]]);export{Y as default};
