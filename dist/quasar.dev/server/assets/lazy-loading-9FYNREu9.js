import{mergeProps as S,withCtx as p,createTextVNode as a,unref as c,createVNode as n,useSSRContext as z}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as y}from"./page-utils-C-QWsEHe.js";import{D as L,a as g}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocPrerender-DPOnWPFO.js";import{C as l}from"./CopyButton-l3ndfN49.js";import{_ as x}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const h={__name:"lazy-loading",__ssrInlineRender:!0,setup(w){const d=[{id:"lazy-load-router-pages",title:"2. Lazy-load router pages"},{id:"lazy-load-components",title:"3. Lazy-load components"},{id:"lazy-load-on-the-fly",title:"4. Lazy-load on the fly"},{id:"importing-with-vite",title:"5. Importing with Vite"},{id:"dynamic-import-statements",title:"5.1. Dynamic import statements",sub:!0},{id:"other-import-options",title:"5.2. Other import options",sub:!0}];return($,v,C,b)=>{v(i(L,S({title:"Lazy Loading / Code Splitting",desc:"(@quasar/app-vite) How to create async chunks in a Quasar CLI with Vite app.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/lazy-loading",toc:d},b),{default:p((P,e,m,o)=>{if(e)e(`<p${o}>When your website/app is small, you can load all layouts/pages/components into the initial bundle and serve everything at startup. But when your code gets complex and has many layouts/pages/components, it won’t be optimal to do this as it will massively impact loading time. Fortunately, there is a way to solve this.</p><p${o}>We’ll cover how you can lazy load / code split parts of your app so that they are automatically requested only on demand. This is done through dynamic imports. Let’s start with an example and then convert it so that we use lazy loading – we’ll focus this example on loading a page, but the same principle can be applied to load anything (assets, JSONs, …).</p><h2 id="lazy-load-router-pages" class="doc-heading doc-h2"${o}>Lazy-load router pages</h2><p${o}>It’s normal to use the Vue Router calling static components as below.</p><div class="doc-note doc-note--warning"${o}><p class="doc-note__title"${o}>WARNING</p><p${o}>Quasar documentation assumes you are already familiar with `),e(i(g,{to:"https://github.com/vuejs/vue-router"},{default:p((u,t,r,s)=>{if(t)t("Vue Router");else return[a("Vue Router")]}),_:1},m,o)),e(". Below it’s described only the basics of how to make use of it in a Quasar CLI project. For the full list of its features please visit the "),e(i(g,{to:"https://router.vuejs.org/"},{default:p((u,t,r,s)=>{if(t)t("Vue Router documentation");else return[a("Vue Router documentation")]}),_:1},m,o)),e(".</p></div>"),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> SomePage <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;pages/SomePage&#39;</span>

<span class="token keyword"${s}>const</span> routes <span class="token operator"${s}>=</span> <span class="token punctuation"${s}>[</span>
  <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>path</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;/some-page&#39;</span><span class="token punctuation"${s}>,</span>
    <span class="token literal-property property"${s}>component</span><span class="token operator"${s}>:</span> SomePage
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>]</span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(" SomePage "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'pages/SomePage'"),a(`

`),n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"["),a(`
  `),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'/some-page'"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token literal-property property"},"component"),n("span",{class:"token operator"},":"),a(` SomePage
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"]")])]),n(l)]}),_:1},m,o)),e(`<p${o}>Now let’s change this and make the page be loaded on demand only, using dynamic imports:</p>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>const</span> routes <span class="token operator"${s}>=</span> <span class="token punctuation"${s}>[</span>
  <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>path</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;/some-page&#39;</span><span class="token punctuation"${s}>,</span>
    <span class="token function-variable function"${s}>component</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span> <span class="token operator"${s}>=&gt;</span> <span class="token keyword"${s}>import</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;pages/SomePage&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>]</span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"["),a(`
  `),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'/some-page'"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token function-variable function"},"component"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'pages/SomePage'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"]")])]),n(l)]}),_:1},m,o)),e(`<p${o}>Easy, right? What this does is that it creates a separate chunk for <code class="doc-token"${o}>/src/pages/SomePage.vue</code> which is then loaded only when it is needed. In this case, when a user visits the ‘/some-page’ route.</p><h2 id="lazy-load-components" class="doc-heading doc-h2"${o}>Lazy-load components</h2><p${o}>Normally you would import a component and then register it to the Page, Layout or Component.</p>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>script</span><span class="token punctuation"${s}>&gt;</span></span><span class="token script"${s}><span class="token language-javascript"${s}>
<span class="token keyword"${s}>import</span> SomeComponent <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;components/SomeComponent&#39;</span>

<span class="token keyword"${s}>export</span> <span class="token keyword"${s}>default</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>components</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    SomeComponent<span class="token punctuation"${s}>,</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span>
</span></span><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>script</span><span class="token punctuation"${s}>&gt;</span></span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
`),n("span",{class:"token keyword"},"import"),a(" SomeComponent "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'components/SomeComponent'"),a(`

`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"components"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    SomeComponent`),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")])])]),n(l)]}),_:1},m,o)),e(`<p${o}>Now let’s change this and make the component be loaded on demand only, using dynamic imports:</p>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;</span>script</span><span class="token punctuation"${s}>&gt;</span></span><span class="token script"${s}><span class="token language-javascript"${s}>
<span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> defineAsyncComponent <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;vue&#39;</span>
<span class="token keyword"${s}>export</span> <span class="token keyword"${s}>default</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>components</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>SomeComponent</span><span class="token operator"${s}>:</span> <span class="token function"${s}>defineAsyncComponent</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span> <span class="token operator"${s}>=&gt;</span> <span class="token keyword"${s}>import</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;components/SomeComponent&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span>
</span></span><span class="token tag"${s}><span class="token tag"${s}><span class="token punctuation"${s}>&lt;/</span>script</span><span class="token punctuation"${s}>&gt;</span></span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" defineAsyncComponent "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'vue'"),a(`
`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"components"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"SomeComponent"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"defineAsyncComponent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'components/SomeComponent'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")])])]),n(l)]}),_:1},m,o)),e(`<h2 id="lazy-load-on-the-fly" class="doc-heading doc-h2"${o}>Lazy-load on the fly</h2><p${o}>As you noticed above, we’re using dynamic imports (<code class="doc-token"${o}>import(&#39;..resource..&#39;)</code>) instead of regular imports (<code class="doc-token"${o}>import Resource from &#39;./path/to/resource&#39;</code>). Dynamic imports are essentially returning a Promise that you can use:</p>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;./categories.json&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>.</span><span class="token function"${s}>then</span><span class="token punctuation"${s}>(</span><span class="token parameter"${s}>categories</span> <span class="token operator"${s}>=&gt;</span> <span class="token punctuation"${s}>{</span>
    <span class="token comment"${s}>// hey, we have lazy loaded the file</span>
    <span class="token comment"${s}>// and we have its content in &quot;categories&quot;</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>.</span><span class="token function"${s}>catch</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span> <span class="token operator"${s}>=&gt;</span> <span class="token punctuation"${s}>{</span>
    <span class="token comment"${s}>// oops, something went wrong...</span>
    <span class="token comment"${s}>// couldn&#39;t load the resource</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./categories.json'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"categories"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// hey, we have lazy loaded the file"),a(`
    `),n("span",{class:"token comment"},'// and we have its content in "categories"'),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// oops, something went wrong..."),a(`
    `),n("span",{class:"token comment"},"// couldn't load the resource"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]}),_:1},m,o)),e(`<p${o}>One advantage of using dynamic imports as opposed to regular imports is that the import path can be determined at runtime:</p>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;pages/&#39;</span> <span class="token operator"${s}>+</span> pageName <span class="token operator"${s}>+</span> <span class="token string"${s}>&#39;/&#39;</span> <span class="token operator"${s}>+</span> idWithExtension<span class="token punctuation"${s}>)</span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'pages/'"),a(),n("span",{class:"token operator"},"+"),a(" pageName "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token string"},"'/'"),a(),n("span",{class:"token operator"},"+"),a(" idWithExtension"),n("span",{class:"token punctuation"},")")])]),n(l)]}),_:1},m,o)),e(`<h2 id="importing-with-vite" class="doc-heading doc-h2"${o}>Importing with Vite</h2><h3 id="dynamic-import-statements" class="doc-heading doc-h3"${o}>Dynamic import statements</h3>`),e(i(c(k),null,{default:p((u,t,r,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>const</span> importList <span class="token operator"${s}>=</span> <span class="token keyword"${s}>import</span><span class="token punctuation"${s}>.</span>meta<span class="token punctuation"${s}>.</span><span class="token function"${s}>glob</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;./pages/*.vue&#39;</span><span class="token punctuation"${s}>)</span>
<span class="token keyword"${s}>const</span> startIndex <span class="token operator"${s}>=</span> <span class="token string"${s}>&#39;/pages/&#39;</span><span class="token punctuation"${s}>.</span>length

<span class="token keyword"${s}>const</span> routes <span class="token operator"${s}>=</span> Object<span class="token punctuation"${s}>.</span><span class="token function"${s}>keys</span><span class="token punctuation"${s}>(</span>importList<span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span><span class="token function"${s}>map</span><span class="token punctuation"${s}>(</span><span class="token parameter"${s}>key</span> <span class="token operator"${s}>=&gt;</span> <span class="token punctuation"${s}>{</span>
  <span class="token keyword"${s}>return</span> <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>path</span><span class="token operator"${s}>:</span> key<span class="token punctuation"${s}>.</span><span class="token function"${s}>substring</span><span class="token punctuation"${s}>(</span>startIndex<span class="token punctuation"${s}>,</span> key<span class="token punctuation"${s}>.</span>length <span class="token operator"${s}>-</span> <span class="token number"${s}>4</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span>
    <span class="token literal-property property"${s}>component</span><span class="token operator"${s}>:</span> importList<span class="token punctuation"${s}>[</span> key <span class="token punctuation"${s}>]</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span></code></pre>`),t(i(l,null,null,r,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(" importList "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"."),a("meta"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"glob"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./pages/*.vue'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"const"),a(" startIndex "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},"'/pages/'"),n("span",{class:"token punctuation"},"."),a(`length

`),n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),a("importList"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(" key"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"substring"),n("span",{class:"token punctuation"},"("),a("startIndex"),n("span",{class:"token punctuation"},","),a(" key"),n("span",{class:"token punctuation"},"."),a("length "),n("span",{class:"token operator"},"-"),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token literal-property property"},"component"),n("span",{class:"token operator"},":"),a(" importList"),n("span",{class:"token punctuation"},"["),a(" key "),n("span",{class:"token punctuation"},"]"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]}),_:1},m,o)),e(`<h3 id="other-import-options" class="doc-heading doc-h3"${o}>Other import options</h3><p${o}>More info on importing assets with Vite `),e(i(g,{to:"https://vitejs.dev/guide/assets.html"},{default:p((u,t,r,s)=>{if(t)t("here");else return[a("here")]}),_:1},m,o)),e(".</p>");else return[n("p",null,"When your website/app is small, you can load all layouts/pages/components into the initial bundle and serve everything at startup. But when your code gets complex and has many layouts/pages/components, it won’t be optimal to do this as it will massively impact loading time. Fortunately, there is a way to solve this."),n("p",null,"We’ll cover how you can lazy load / code split parts of your app so that they are automatically requested only on demand. This is done through dynamic imports. Let’s start with an example and then convert it so that we use lazy loading – we’ll focus this example on loading a page, but the same principle can be applied to load anything (assets, JSONs, …)."),n("h2",{id:"lazy-load-router-pages",class:"doc-heading doc-h2",onClick:u=>c(y)("lazy-load-router-pages")},"Lazy-load router pages",8,["onClick"]),n("p",null,"It’s normal to use the Vue Router calling static components as below."),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[a("Quasar documentation assumes you are already familiar with "),n(g,{to:"https://github.com/vuejs/vue-router"},{default:p(()=>[a("Vue Router")]),_:1}),a(". Below it’s described only the basics of how to make use of it in a Quasar CLI project. For the full list of its features please visit the "),n(g,{to:"https://router.vuejs.org/"},{default:p(()=>[a("Vue Router documentation")]),_:1}),a(".")])]),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(" SomePage "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'pages/SomePage'"),a(`

`),n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"["),a(`
  `),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'/some-page'"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token literal-property property"},"component"),n("span",{class:"token operator"},":"),a(` SomePage
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"]")])]),n(l)]),_:1}),n("p",null,"Now let’s change this and make the page be loaded on demand only, using dynamic imports:"),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token punctuation"},"["),a(`
  `),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'/some-page'"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token function-variable function"},"component"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'pages/SomePage'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"]")])]),n(l)]),_:1}),n("p",null,[a("Easy, right? What this does is that it creates a separate chunk for "),n("code",{class:"doc-token"},"/src/pages/SomePage.vue"),a(" which is then loaded only when it is needed. In this case, when a user visits the ‘/some-page’ route.")]),n("h2",{id:"lazy-load-components",class:"doc-heading doc-h2",onClick:u=>c(y)("lazy-load-components")},"Lazy-load components",8,["onClick"]),n("p",null,"Normally you would import a component and then register it to the Page, Layout or Component."),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
`),n("span",{class:"token keyword"},"import"),a(" SomeComponent "),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'components/SomeComponent'"),a(`

`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"components"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    SomeComponent`),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")])])]),n(l)]),_:1}),n("p",null,"Now let’s change this and make the component be loaded on demand only, using dynamic imports:"),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"<"),a("script")]),n("span",{class:"token punctuation"},">")]),n("span",{class:"token script"},[n("span",{class:"token language-javascript"},[a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" defineAsyncComponent "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'vue'"),a(`
`),n("span",{class:"token keyword"},"export"),a(),n("span",{class:"token keyword"},"default"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"components"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"SomeComponent"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"defineAsyncComponent"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'components/SomeComponent'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`)])]),n("span",{class:"token tag"},[n("span",{class:"token tag"},[n("span",{class:"token punctuation"},"</"),a("script")]),n("span",{class:"token punctuation"},">")])])]),n(l)]),_:1}),n("h2",{id:"lazy-load-on-the-fly",class:"doc-heading doc-h2",onClick:u=>c(y)("lazy-load-on-the-fly")},"Lazy-load on the fly",8,["onClick"]),n("p",null,[a("As you noticed above, we’re using dynamic imports ("),n("code",{class:"doc-token"},"import('..resource..')"),a(") instead of regular imports ("),n("code",{class:"doc-token"},"import Resource from './path/to/resource'"),a("). Dynamic imports are essentially returning a Promise that you can use:")]),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./categories.json'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"categories"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// hey, we have lazy loaded the file"),a(`
    `),n("span",{class:"token comment"},'// and we have its content in "categories"'),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"catch"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// oops, something went wrong..."),a(`
    `),n("span",{class:"token comment"},"// couldn't load the resource"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]),_:1}),n("p",null,"One advantage of using dynamic imports as opposed to regular imports is that the import path can be determined at runtime:"),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'pages/'"),a(),n("span",{class:"token operator"},"+"),a(" pageName "),n("span",{class:"token operator"},"+"),a(),n("span",{class:"token string"},"'/'"),a(),n("span",{class:"token operator"},"+"),a(" idWithExtension"),n("span",{class:"token punctuation"},")")])]),n(l)]),_:1}),n("h2",{id:"importing-with-vite",class:"doc-heading doc-h2",onClick:u=>c(y)("importing-with-vite")},"Importing with Vite",8,["onClick"]),n("h3",{id:"dynamic-import-statements",class:"doc-heading doc-h3",onClick:u=>c(y)("dynamic-import-statements")},"Dynamic import statements",8,["onClick"]),n(c(k),null,{default:p(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(" importList "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"."),a("meta"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"glob"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'./pages/*.vue'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token keyword"},"const"),a(" startIndex "),n("span",{class:"token operator"},"="),a(),n("span",{class:"token string"},"'/pages/'"),n("span",{class:"token punctuation"},"."),a(`length

`),n("span",{class:"token keyword"},"const"),a(" routes "),n("span",{class:"token operator"},"="),a(" Object"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"keys"),n("span",{class:"token punctuation"},"("),a("importList"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"key"),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"path"),n("span",{class:"token operator"},":"),a(" key"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"substring"),n("span",{class:"token punctuation"},"("),a("startIndex"),n("span",{class:"token punctuation"},","),a(" key"),n("span",{class:"token punctuation"},"."),a("length "),n("span",{class:"token operator"},"-"),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),a(`
    `),n("span",{class:"token literal-property property"},"component"),n("span",{class:"token operator"},":"),a(" importList"),n("span",{class:"token punctuation"},"["),a(" key "),n("span",{class:"token punctuation"},"]"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(l)]),_:1}),n("h3",{id:"other-import-options",class:"doc-heading doc-h3",onClick:u=>c(y)("other-import-options")},"Other import options",8,["onClick"]),n("p",null,[a("More info on importing assets with Vite "),n(g,{to:"https://vitejs.dev/guide/assets.html"},{default:p(()=>[a("here")]),_:1}),a(".")])]}),_:1},C))}}},f=h.setup;h.setup=(w,d)=>{const $=z();return($.modules||($.modules=new Set)).add("src/pages/quasar-cli-vite/lazy-loading.md"),f?f(w,d):void 0};const G=x(h,[["__file","lazy-loading.md"]]);export{G as default};
