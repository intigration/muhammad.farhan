import{mergeProps as $,withCtx as i,unref as c,createVNode as e,createTextVNode as a,useSSRContext as y}from"vue";import{ssrRenderComponent as s}from"vue/server-renderer";import"quasar";import{D as C,a as w}from"./DocPage-DKr-0pQn.js";import{D as q}from"./DocTree-Kz2iQlb5.js";import{D as m}from"./DocPrerender-DPOnWPFO.js";import{C as l}from"./CopyButton-l3ndfN49.js";import{_ as x}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const b={__name:"preparation",__ssrInlineRender:!0,setup(g){const f=[{name:"The quasar.config file",category:"Quasar CLI (with Webpack)",path:"/quasar-cli-webpack/quasar-config-file"}],d={tree:{l:"src-ssr",c:[{l:"middlewares/",e:"SSR middleware files"},{l:"production-export.js",e:"SSR webserver production export"}]}};return(A,R,k,h)=>{R(s(C,$({title:"Preparation for SSR",desc:"(@quasar/app-webpack) How to add SSR mode with Quasar CLI.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-ssr/preparation",related:f},h),{default:i((P,n,p,t)=>{if(n)n(`<p${t}>We’ll be using Quasar CLI to develop and build a SSR website. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p><p${t}>In order to develop or build a SSR website, we first need to add the SSR mode to our Quasar project:</p>`),n(s(c(m),null,{default:i((S,r,u,o)=>{if(r)r(`<pre class="doc-code"${o}><code${o}>$ quasar mode <span class="token function"${o}>add</span> ssr</code></pre>`),r(s(l,{lang:"bash"},null,u,o));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" ssr")])]),e(l,{lang:"bash"})]}),_:1},p,t)),n(`<p${t}>If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:</p>`),n(s(c(m),null,{default:i((S,r,u,o)=>{if(r)r(`<pre class="doc-code"${o}><code${o}>$ quasar dev <span class="token parameter variable"${o}>-m</span> ssr</code></pre>`),r(s(l,{lang:"bash"},null,u,o));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" ssr")])]),e(l,{lang:"bash"})]}),_:1},p,t)),n(`<p${t}>This will add SSR mode automatically, if it is missing.</p><p${t}>A new folder will appear in your project folder (which is explained in detail on the `),n(s(w,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr"},{default:i((S,r,u,o)=>{if(r)r("Configuring SSR");else return[a("Configuring SSR")]}),_:1},p,t)),n(" page):</p>"),n(s(q,{def:d.tree},null,p,t));else return[e("p",null,"We’ll be using Quasar CLI to develop and build a SSR website. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands."),e("p",null,"In order to develop or build a SSR website, we first need to add the SSR mode to our Quasar project:"),e(c(m),null,{default:i(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" ssr")])]),e(l,{lang:"bash"})]),_:1}),e("p",null,"If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:"),e(c(m),null,{default:i(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" ssr")])]),e(l,{lang:"bash"})]),_:1}),e("p",null,"This will add SSR mode automatically, if it is missing."),e("p",null,[a("A new folder will appear in your project folder (which is explained in detail on the "),e(w,{to:"/quasar-cli-webpack/developing-ssr/configuring-ssr"},{default:i(()=>[a("Configuring SSR")]),_:1}),a(" page):")]),e(q,{def:d.tree},null,8,["def"])]}),_:1},k))}}},v=b.setup;b.setup=(g,f)=>{const d=y();return(d.modules||(d.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-ssr/preparation.md"),v?v(g,f):void 0};const G=x(b,[["__file","preparation.md"]]);export{G as default};
