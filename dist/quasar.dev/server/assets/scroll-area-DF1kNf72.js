import{provide as w,mergeProps as $,withCtx as u,createTextVNode as n,createVNode as l,unref as s,useSSRContext as C}from"vue";import{ssrRenderComponent as t}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D,a as b}from"./DocPage-DKr-0pQn.js";import{D as i}from"./DocExample-BcaABDtE.js";import{D as g}from"./DocApi-Df9ryd6x.js";import{_ as z}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const f={__name:"scroll-area",__ssrInlineRender:!0,setup(m){w("_q_ex",{name:"QScrollArea"});const h=[{name:"Layout Drawer",category:"Layout and Grid",path:"/layout/drawer"}],d=[{id:"qscrollarea-api",title:"2. QScrollArea API",deep:!0},{id:"usage",title:"3. Usage"},{id:"basic",title:"3.1. Basic",sub:!0},{id:"styled",title:"3.2. Styled",sub:!0},{id:"dark-design",title:"3.3. Dark design",sub:!0},{id:"controlling-scrollbar-visibility",title:"3.4. Controlling scrollbar visibility",sub:!0},{id:"delay",title:"3.5. Delay",sub:!0},{id:"scroll-position",title:"3.6. Scroll position",sub:!0},{id:"scroll-event",title:"3.7. Scroll event",sub:!0}];return(x,k,p,S)=>{k(t(D,$({title:"Scroll Area",desc:"The QScrollArea Vue component offers a way of customizing the scrollbars for all desktop browsers.",heading:"","edit-link":"vue-components/scroll-area",toc:d,related:h},S),{default:u((V,o,a,e)=>{if(o)o(`<p${e}>The QScrollArea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has <code class="doc-token"${e}>overflow: auto</code>, but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.</p>`),o(t(g,{file:"QScrollArea"},null,a,e)),o(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><p${e}>The following examples are best seen on desktop as they make too little sense on a mobile device.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can also take a look at `),o(t(b,{to:"/layout/drawer"},{default:u((r,y,A,T)=>{if(y)y("Layout Drawer");else return[n("Layout Drawer")]}),_:1},a,e)),o(` to see some more examples of it in action.</p></div><h3 id="basic" class="doc-heading doc-h3"${e}>Basic</h3>`),o(t(i,{title:"Vertical content",file:"Vertical"},null,a,e)),o(t(i,{title:"Horizontal content",file:"Horizontal"},null,a,e)),o(t(i,{title:"Vertical and horizontal content",file:"VertHoriz"},null,a,e)),o(`<h3 id="styled" class="doc-heading doc-h3"${e}>Styled</h3>`),o(t(i,{title:"Styled thumb and bar",file:"StyledBar"},null,a,e)),o(t(i,{title:"Styled",file:"Styled"},null,a,e)),o(`<h3 id="dark-design" class="doc-heading doc-h3"${e}>Dark design</h3>`),o(t(i,{title:"Force dark mode",file:"Dark"},null,a,e)),o(`<h3 id="controlling-scrollbar-visibility" class="doc-heading doc-h3"${e}>Controlling scrollbar visibility</h3><p${e}>When using the <code class="doc-token"${e}>visible</code> Boolean prop, the default mouse over/leave behavior is disabled, leaving you in full control of the scrollbar visibility.</p>`),o(t(i,{title:"Controlling scrollbar visibility",file:"ScrollbarVisibility"},null,a,e)),o(`<h3 id="delay" class="doc-heading doc-h3"${e}>Delay</h3><p${e}>When content changes, the scrollbar appears then disappears again. You can set a certain delay (amount of time in milliseconds) before scrollbar disappears again (if component is not hovered):</p>`),o(t(i,{title:"Delay",file:"Delay"},null,a,e)),o(`<h3 id="scroll-position" class="doc-heading doc-h3"${e}>Scroll position</h3>`),o(t(i,{title:"Scroll Position",file:"ScrollPosition"},null,a,e)),o(`<h3 id="scroll-event" class="doc-heading doc-h3"${e}>Scroll event</h3><p${e}>Below is an example of using the <code class="doc-token"${e}>@scroll</code> event to synchronize the scrolling between two containers.</p>`),o(t(i,{title:"Synchronized",file:"Synchronized"},null,a,e));else return[l("p",null,[n("The QScrollArea component offers a neat way of customizing the scrollbars by encapsulating your content. Think of it as a DOM element which has "),l("code",{class:"doc-token"},"overflow: auto"),n(", but with your own custom styled scrollbar instead of browser’s default one and a few nice features on top.")]),l(g,{file:"QScrollArea"}),l("h2",{id:"usage",class:"doc-heading doc-h2",onClick:r=>s(c)("usage")},"Usage",8,["onClick"]),l("p",null,"The following examples are best seen on desktop as they make too little sense on a mobile device."),l("div",{class:"doc-note doc-note--tip"},[l("p",{class:"doc-note__title"},"TIP"),l("p",null,[n("You can also take a look at "),l(b,{to:"/layout/drawer"},{default:u(()=>[n("Layout Drawer")]),_:1}),n(" to see some more examples of it in action.")])]),l("h3",{id:"basic",class:"doc-heading doc-h3",onClick:r=>s(c)("basic")},"Basic",8,["onClick"]),l(i,{title:"Vertical content",file:"Vertical"}),l(i,{title:"Horizontal content",file:"Horizontal"}),l(i,{title:"Vertical and horizontal content",file:"VertHoriz"}),l("h3",{id:"styled",class:"doc-heading doc-h3",onClick:r=>s(c)("styled")},"Styled",8,["onClick"]),l(i,{title:"Styled thumb and bar",file:"StyledBar"}),l(i,{title:"Styled",file:"Styled"}),l("h3",{id:"dark-design",class:"doc-heading doc-h3",onClick:r=>s(c)("dark-design")},"Dark design",8,["onClick"]),l(i,{title:"Force dark mode",file:"Dark"}),l("h3",{id:"controlling-scrollbar-visibility",class:"doc-heading doc-h3",onClick:r=>s(c)("controlling-scrollbar-visibility")},"Controlling scrollbar visibility",8,["onClick"]),l("p",null,[n("When using the "),l("code",{class:"doc-token"},"visible"),n(" Boolean prop, the default mouse over/leave behavior is disabled, leaving you in full control of the scrollbar visibility.")]),l(i,{title:"Controlling scrollbar visibility",file:"ScrollbarVisibility"}),l("h3",{id:"delay",class:"doc-heading doc-h3",onClick:r=>s(c)("delay")},"Delay",8,["onClick"]),l("p",null,"When content changes, the scrollbar appears then disappears again. You can set a certain delay (amount of time in milliseconds) before scrollbar disappears again (if component is not hovered):"),l(i,{title:"Delay",file:"Delay"}),l("h3",{id:"scroll-position",class:"doc-heading doc-h3",onClick:r=>s(c)("scroll-position")},"Scroll position",8,["onClick"]),l(i,{title:"Scroll Position",file:"ScrollPosition"}),l("h3",{id:"scroll-event",class:"doc-heading doc-h3",onClick:r=>s(c)("scroll-event")},"Scroll event",8,["onClick"]),l("p",null,[n("Below is an example of using the "),l("code",{class:"doc-token"},"@scroll"),n(" event to synchronize the scrolling between two containers.")]),l(i,{title:"Synchronized",file:"Synchronized"})]}),_:1},p))}}},v=f.setup;f.setup=(m,h)=>{const d=C();return(d.modules||(d.modules=new Set)).add("src/pages/vue-components/scroll-area.md"),v?v(m,h):void 0};const Z=z(f,[["__file","scroll-area.md"]]);export{Z as default};
