import{provide as q,mergeProps as H,withCtx as d,unref as c,createVNode as t,createTextVNode as n,useSSRContext as C}from"vue";import{ssrRenderComponent as o}from"vue/server-renderer";import{c as k}from"./page-utils-C-QWsEHe.js";import{D}from"./DocPage-DKr-0pQn.js";import{D as u}from"./DocExample-BcaABDtE.js";import{D as $}from"./DocApi-Df9ryd6x.js";import{D as m}from"./DocPrerender-DPOnWPFO.js";import{C as p}from"./CopyButton-l3ndfN49.js";import{_ as P}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const w={__name:"touch-swipe",__ssrInlineRender:!0,setup(f){q("_q_ex",{name:"TouchSwipe"});const g=[{name:"Touch Repeat",category:"Vue Directives",path:"/vue-directives/touch-repeat"},{name:"Touch Pan",category:"Vue Directives",path:"/vue-directives/touch-pan"},{name:"Touch Hold",category:"Vue Directives",path:"/vue-directives/touch-hold"}],h=[{id:"touchswipe-api",title:"2. TouchSwipe API",deep:!0},{id:"usage",title:"3. Usage"},{id:"handling-mouse-events",title:"3.1. Handling Mouse Events",sub:!0},{id:"inhibiting-touchswipe",title:"3.2. Inhibiting TouchSwipe",sub:!0},{id:"note-on-hmr",title:"4. Note on HMR"}];return(x,b,S,T)=>{b(o(D,H({title:"Touch Swipe Directive",desc:"Vue directive which triggers an event when the user swipes with the finger or mouse on a component or element.",heading:"","edit-link":"vue-directives/touch-swipe",toc:h,related:g},T),{default:d((R,s,l,a)=>{if(s)s(`<p${a}>Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: <code class="doc-token"${a}>v-touch-pan</code>, <code class="doc-token"${a}>v-touch-swipe</code>, <code class="doc-token"${a}>v-touch-hold</code> and even <code class="doc-token"${a}>v-touch-repeat</code>.</p><blockquote class="doc-note"${a}><p${a}><strong${a}>These directives also work with mouse events, not only touch events</strong>, so you are able to build cool functionality for your App on desktops too.</p></blockquote><p${a}>We will be describing <code class="doc-token"${a}>v-touch-swipe</code> on the lines below.</p>`),s(o($,{file:"TouchSwipe"},null,l,a)),s(`<h2 id="usage" class="doc-heading doc-h2"${a}>Usage</h2><p${a}>Swipe with your mouse on the area below to see it in action. If using a mouse, you need to do it quick.</p><div class="doc-note doc-note--tip"${a}><p class="doc-note__title"${a}>TIP</p><p${a}>If your content also has images, you might want to add <code class="doc-token"${a}>draggable=&quot;false&quot;</code> to them, otherwise the native browser behavior might interfere in a negative way.</p></div>`),s(o(u,{title:"All directions",file:"Basic"},null,l,a)),s(o(u,{title:"One direction only",file:"Right"},null,l,a)),s(o(u,{title:"Several directions",file:"UpOrLeft"},null,l,a)),s(`<h3 id="handling-mouse-events" class="doc-heading doc-h3"${a}>Handling Mouse Events</h3><p${a}>When you want to handle mouse events too, use the <code class="doc-token"${a}>mouse</code> modifier:</p>`),s(o(c(m),null,{default:d((r,i,v,e)=>{if(i)i(`<pre class="doc-code"${e}><code${e}><span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>v-touch-swipe.mouse</span><span class="token attr-value"${e}><span class="token punctuation attr-equals"${e}>=</span><span class="token punctuation"${e}>&quot;</span>userHasSwiped<span class="token punctuation"${e}>&quot;</span></span><span class="token punctuation"${e}>&gt;</span></span>...<span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span></code></pre>`),i(o(p,null,null,v,e));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-swipe.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasSwiped"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n("..."),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]}),_:1},l,a)),s(`<h3 id="inhibiting-touchswipe" class="doc-heading doc-h3"${a}>Inhibiting TouchSwipe</h3><p${a}>When you want to inhibit TouchSwipe, you can do so by stopping propagation of the <code class="doc-token"${a}>touchstart</code> / <code class="doc-token"${a}>mousedown</code> events from the inner content:</p>`),s(o(c(m),null,{default:d((r,i,v,e)=>{if(i)i(`<pre class="doc-code"${e}><code${e}><span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>v-touch-swipe.mouse</span><span class="token attr-value"${e}><span class="token punctuation attr-equals"${e}>=</span><span class="token punctuation"${e}>&quot;</span>userSwiped<span class="token punctuation"${e}>&quot;</span></span><span class="token punctuation"${e}>&gt;</span></span>
  <span class="token comment"${e}>&lt;!-- ...content --&gt;</span>
  <span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;</span>div</span> <span class="token attr-name"${e}>@touchstart.stop</span> <span class="token attr-name"${e}>@mousedown.stop</span><span class="token punctuation"${e}>&gt;</span></span>
    <span class="token comment"${e}>&lt;!--
      TouchSwipe will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    --&gt;</span>
  <span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span>
  <span class="token comment"${e}>&lt;!-- ...content --&gt;</span>
<span class="token tag"${e}><span class="token tag"${e}><span class="token punctuation"${e}>&lt;/</span>div</span><span class="token punctuation"${e}>&gt;</span></span></code></pre>`),i(o(p,null,null,v,e));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-swipe.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userSwiped"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"@touchstart.stop"),n(),t("span",{class:"token attr-name"},"@mousedown.stop"),t("span",{class:"token punctuation"},">")]),n(`
    `),t("span",{class:"token comment"},`<!--
      TouchSwipe will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    -->`),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]}),_:1},l,a)),s(`<p${a}>However, if you are using <code class="doc-token"${a}>capture</code> or <code class="doc-token"${a}>mouseCapture</code> modifiers then events will first reach the TouchHold directive then the inner content, so TouchSwipe will still trigger.</p><h2 id="note-on-hmr" class="doc-heading doc-h2"${a}>Note on HMR</h2><p${a}>Due to performance reasons, not all of the modifiers are reactive. Some require a window/page/component refresh to get updated. Please check the API card for the modifiers which are not marked as reactive.</p>`);else return[t("p",null,[n("Quasar offers full-featured Vue directives that can totally replace libraries like Hammerjs: "),t("code",{class:"doc-token"},"v-touch-pan"),n(", "),t("code",{class:"doc-token"},"v-touch-swipe"),n(", "),t("code",{class:"doc-token"},"v-touch-hold"),n(" and even "),t("code",{class:"doc-token"},"v-touch-repeat"),n(".")]),t("blockquote",{class:"doc-note"},[t("p",null,[t("strong",null,"These directives also work with mouse events, not only touch events"),n(", so you are able to build cool functionality for your App on desktops too.")])]),t("p",null,[n("We will be describing "),t("code",{class:"doc-token"},"v-touch-swipe"),n(" on the lines below.")]),t($,{file:"TouchSwipe"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:r=>c(k)("usage")},"Usage",8,["onClick"]),t("p",null,"Swipe with your mouse on the area below to see it in action. If using a mouse, you need to do it quick."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[n("If your content also has images, you might want to add "),t("code",{class:"doc-token"},'draggable="false"'),n(" to them, otherwise the native browser behavior might interfere in a negative way.")])]),t(u,{title:"All directions",file:"Basic"}),t(u,{title:"One direction only",file:"Right"}),t(u,{title:"Several directions",file:"UpOrLeft"}),t("h3",{id:"handling-mouse-events",class:"doc-heading doc-h3",onClick:r=>c(k)("handling-mouse-events")},"Handling Mouse Events",8,["onClick"]),t("p",null,[n("When you want to handle mouse events too, use the "),t("code",{class:"doc-token"},"mouse"),n(" modifier:")]),t(c(m),null,{default:d(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-swipe.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userHasSwiped"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n("..."),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]),_:1}),t("h3",{id:"inhibiting-touchswipe",class:"doc-heading doc-h3",onClick:r=>c(k)("inhibiting-touchswipe")},"Inhibiting TouchSwipe",8,["onClick"]),t("p",null,[n("When you want to inhibit TouchSwipe, you can do so by stopping propagation of the "),t("code",{class:"doc-token"},"touchstart"),n(" / "),t("code",{class:"doc-token"},"mousedown"),n(" events from the inner content:")]),t(c(m),null,{default:d(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"v-touch-swipe.mouse"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),n("userSwiped"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),n("div")]),n(),t("span",{class:"token attr-name"},"@touchstart.stop"),n(),t("span",{class:"token attr-name"},"@mousedown.stop"),t("span",{class:"token punctuation"},">")]),n(`
    `),t("span",{class:"token comment"},`<!--
      TouchSwipe will not apply here because
      we are calling stopPropagation() on touchstart
      and mousedown events
    -->`),n(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")]),n(`
  `),t("span",{class:"token comment"},"<!-- ...content -->"),n(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),n("div")]),t("span",{class:"token punctuation"},">")])])]),t(p)]),_:1}),t("p",null,[n("However, if you are using "),t("code",{class:"doc-token"},"capture"),n(" or "),t("code",{class:"doc-token"},"mouseCapture"),n(" modifiers then events will first reach the TouchHold directive then the inner content, so TouchSwipe will still trigger.")]),t("h2",{id:"note-on-hmr",class:"doc-heading doc-h2",onClick:r=>c(k)("note-on-hmr")},"Note on HMR",8,["onClick"]),t("p",null,"Due to performance reasons, not all of the modifiers are reactive. Some require a window/page/component refresh to get updated. Please check the API card for the modifiers which are not marked as reactive.")]}),_:1},S))}}},y=w.setup;w.setup=(f,g)=>{const h=C();return(h.modules||(h.modules=new Set)).add("src/pages/vue-directives/touch-swipe.md"),y?y(f,g):void 0};const _=P(w,[["__file","touch-swipe.md"]]);export{_ as default};
