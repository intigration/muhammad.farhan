import{mergeProps as v,withCtx as l,unref as c,createVNode as n,createTextVNode as a,useSSRContext as N}from"vue";import{ssrRenderComponent as u}from"vue/server-renderer";import{c as $}from"./page-utils-C-QWsEHe.js";import{D as x,a as d}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocPrerender-DPOnWPFO.js";import{C as e}from"./CopyButton-l3ndfN49.js";import{_ as C}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const b={__name:"formatter-utils",__ssrInlineRender:!0,setup(w){const f=[{id:"helping-tree-shake",title:"1.1. Helping Tree-Shake",sub:!0},{id:"capitalize",title:"2. Capitalize"},{id:"format-to-human-readable-size",title:"3. Format to Human Readable Size"},{id:"normalize-number-to-interval",title:"4. Normalize Number to Interval"},{id:"pad-string",title:"5. Pad String"}];return(g,y,z,S)=>{y(u(x,v({title:"Formatter Utils",desc:"A set of Quasar methods for formatting values. Capitalizing, padding, normalizing and more.",heading:"","edit-link":"quasar-utils/formatter-utils",toc:f},S),{default:l((T,p,m,o)=>{if(p)p(`<h3 id="helping-tree-shake" class="doc-heading doc-h3"${o}>Helping Tree-Shake</h3><p${o}>You will notice all examples import <code class="doc-token"${o}>format</code> Object from Quasar. However, if you need only one formatter method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of <code class="doc-token"${o}>format</code>.</p><p${o}>Example:</p>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}>// we import all of \`format\`</span>
<span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token comment"${s}>// destructuring to keep only what is needed</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> capitalize<span class="token punctuation"${s}>,</span> humanStorageSize <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>capitalize</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;some text&#39;</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// Some text</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>humanStorageSize</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>13087</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// 12.8kB</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// we import all of `format`"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token comment"},"// destructuring to keep only what is needed"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" capitalize"),n("span",{class:"token punctuation"},","),a(" humanStorageSize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// Some text"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 12.8kB")])]),n(e)]}),_:1},m,o)),p(`<p${o}>You can also import all formatters and use whatever you need like this (but note that your bundle will probably contain unused methods too):</p>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> format<span class="token punctuation"${s}>.</span><span class="token function"${s}>capitalize</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;some text&#39;</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> format<span class="token punctuation"${s}>.</span><span class="token function"${s}>humanStorageSize</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>13087</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(" format"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(" format"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")")])]),n(e)]}),_:1},m,o)),p(`<div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>For usage with the UMD build see `),p(u(d,{to:"/start/umd#quasar-global-object"},{default:l((r,t,i,s)=>{if(t)t("here");else return[a("here")]}),_:1},m,o)),p(`.</p></div><h2 id="capitalize" class="doc-heading doc-h2"${o}>Capitalize</h2>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> capitalize <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>capitalize</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;some text&#39;</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// Some text</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" capitalize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// Some text")])]),n(e)]}),_:1},m,o)),p(`<h2 id="format-to-human-readable-size" class="doc-heading doc-h2"${o}>Format to Human Readable Size</h2>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> humanStorageSize <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>humanStorageSize</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>13087</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// 12.8kB</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" humanStorageSize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 12.8kB")])]),n(e)]}),_:1},m,o)),p(`<h2 id="normalize-number-to-interval" class="doc-heading doc-h2"${o}>Normalize Number to Interval</h2>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> between <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

<span class="token comment"${s}>// (Number) between(Number, Number min, Number max)</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>between</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>50</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>10</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>20</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// 20</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" between "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (Number) between(Number, Number min, Number max)"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"between"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 20")])]),n(e)]}),_:1},m,o)),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> normalizeToInterval <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

<span class="token comment"${s}>// (Number) normalizeToInterval(Number, Number lower_margin, Number upper_margin)</span>

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>normalizeToInterval</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>21</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>10</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>20</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// 10</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>normalizeToInterval</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>33</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>10</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>20</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// 11</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>normalizeToInterval</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>52</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>10</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>20</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// 19</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>normalizeToInterval</span><span class="token punctuation"${s}>(</span><span class="token number"${s}>5</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>10</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>16</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// 12</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" normalizeToInterval "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (Number) normalizeToInterval(Number, Number lower_margin, Number upper_margin)"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"21"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 10"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 11"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"52"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 19"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"16"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 12")])]),n(e)]}),_:1},m,o)),p(`<h2 id="pad-string" class="doc-heading doc-h2"${o}>Pad String</h2>`),p(u(c(k),null,{default:l((r,t,i,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> format <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;quasar&#39;</span>
<span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> pad <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> format

<span class="token comment"${s}>// (String) pad(String toPad, Number length, String paddingCharacter)</span>
<span class="token comment"${s}>// length is default 2</span>
<span class="token comment"${s}>// paddingCharacter is default &#39;0&#39;</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span> <span class="token function"${s}>pad</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;2&#39;</span><span class="token punctuation"${s}>,</span> <span class="token number"${s}>4</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// &#39;0002&#39;</span></code></pre>`),t(u(e,null,null,i,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" pad "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (String) pad(String toPad, Number length, String paddingCharacter)"),a(`
`),n("span",{class:"token comment"},"// length is default 2"),a(`
`),n("span",{class:"token comment"},"// paddingCharacter is default '0'"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"pad"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// '0002'")])]),n(e)]}),_:1},m,o));else return[n("h3",{id:"helping-tree-shake",class:"doc-heading doc-h3",onClick:r=>c($)("helping-tree-shake")},"Helping Tree-Shake",8,["onClick"]),n("p",null,[a("You will notice all examples import "),n("code",{class:"doc-token"},"format"),a(" Object from Quasar. However, if you need only one formatter method from it, then you can use ES6 destructuring to help Tree Shaking embed only that method and not all of "),n("code",{class:"doc-token"},"format"),a(".")]),n("p",null,"Example:"),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// we import all of `format`"),a(`
`),n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token comment"},"// destructuring to keep only what is needed"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" capitalize"),n("span",{class:"token punctuation"},","),a(" humanStorageSize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// Some text"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 12.8kB")])]),n(e)]),_:1}),n("p",null,"You can also import all formatters and use whatever you need like this (but note that your bundle will probably contain unused methods too):"),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(" format"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(" format"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")")])]),n(e)]),_:1}),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[a("For usage with the UMD build see "),n(d,{to:"/start/umd#quasar-global-object"},{default:l(()=>[a("here")]),_:1}),a(".")])]),n("h2",{id:"capitalize",class:"doc-heading doc-h2",onClick:r=>c($)("capitalize")},"Capitalize",8,["onClick"]),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" capitalize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"capitalize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'some text'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// Some text")])]),n(e)]),_:1}),n("h2",{id:"format-to-human-readable-size",class:"doc-heading doc-h2",onClick:r=>c($)("format-to-human-readable-size")},"Format to Human Readable Size",8,["onClick"]),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" humanStorageSize "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"humanStorageSize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"13087"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 12.8kB")])]),n(e)]),_:1}),n("h2",{id:"normalize-number-to-interval",class:"doc-heading doc-h2",onClick:r=>c($)("normalize-number-to-interval")},"Normalize Number to Interval",8,["onClick"]),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" between "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (Number) between(Number, Number min, Number max)"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"between"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"50"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// 20")])]),n(e)]),_:1}),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" normalizeToInterval "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (Number) normalizeToInterval(Number, Number lower_margin, Number upper_margin)"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"21"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 10"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"33"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 11"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"52"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"20"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 19"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"normalizeToInterval"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"5"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"10"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"16"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// 12")])]),n(e)]),_:1}),n("h2",{id:"pad-string",class:"doc-heading doc-h2",onClick:r=>c($)("pad-string")},"Pad String",8,["onClick"]),n(c(k),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),a(),n("span",{class:"token punctuation"},"{"),a(" format "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token keyword"},"from"),a(),n("span",{class:"token string"},"'quasar'"),a(`
`),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" pad "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(` format

`),n("span",{class:"token comment"},"// (String) pad(String toPad, Number length, String paddingCharacter)"),a(`
`),n("span",{class:"token comment"},"// length is default 2"),a(`
`),n("span",{class:"token comment"},"// paddingCharacter is default '0'"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a(),n("span",{class:"token function"},"pad"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'2'"),n("span",{class:"token punctuation"},","),a(),n("span",{class:"token number"},"4"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},"// '0002'")])]),n(e)]),_:1})]}),_:1},z))}}},h=b.setup;b.setup=(w,f)=>{const g=N();return(g.modules||(g.modules=new Set)).add("src/pages/quasar-utils/formatter-utils.md"),h?h(w,f):void 0};const V=C(b,[["__file","formatter-utils.md"]]);export{V as default};
