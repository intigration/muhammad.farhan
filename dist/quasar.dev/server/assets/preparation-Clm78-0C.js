import{mergeProps as P,withCtx as n,unref as p,createVNode as e,createTextVNode as a,useSSRContext as W}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import"quasar";import{D as y,a as h}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocTree-Kz2iQlb5.js";import{D as m}from"./DocPrerender-DPOnWPFO.js";import{C as s}from"./CopyButton-l3ndfN49.js";import{_ as j}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const w={__name:"preparation",__ssrInlineRender:!0,setup(g){const f=[{name:"The quasar.config file",category:"Quasar CLI (with Webpack)",path:"/quasar-cli-webpack/quasar-config-file"}],d={tree:{l:"src-pwa",c:[{l:"register-service-worker.js",e:"(or .ts) App-code *managing* service worker"},{l:"custom-service-worker.js",e:"(or .ts) Optional custom service worker file (InjectManifest mode ONLY)"}]}};return(C,A,$,q)=>{A(l(y,P({title:"Preparation for PWA",desc:"(@quasar/app-webpack) How to add PWA mode with Quasar CLI.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-pwa/preparation",related:f},q),{default:n((x,o,c,r)=>{if(o)o(`<p${r}>We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands.</p><p${r}>In order to build a PWA, we first need to add the PWA mode to our Quasar project:</p>`),o(l(p(m),null,{default:n((b,t,u,i)=>{if(t)t(`<pre class="doc-code"${i}><code${i}>$ quasar mode <span class="token function"${i}>add</span> pwa</code></pre>`),t(l(s,{lang:"bash"},null,u,i));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" pwa")])]),e(s,{lang:"bash"})]}),_:1},c,r)),o(`<p${r}>If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:</p>`),o(l(p(m),null,{default:n((b,t,u,i)=>{if(t)t(`<pre class="doc-code"${i}><code${i}>$ quasar dev <span class="token parameter variable"${i}>-m</span> pwa</code></pre>`),t(l(s,{lang:"bash"},null,u,i));else return[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" pwa")])]),e(s,{lang:"bash"})]}),_:1},c,r)),o(`<p${r}>This will add PWA mode automatically, if it is missing.</p><p${r}>A new folder will appear in your project folder (which is explained in detail on the `),o(l(h,{to:"/quasar-cli-webpack/developing-pwa/configuring-pwa"},{default:n((b,t,u,i)=>{if(t)t("Configuring PWA");else return[a("Configuring PWA")]}),_:1},c,r)),o(" page):</p>"),o(l(k,{def:d.tree},null,c,r)),o(`<p${r}>Both files are going to be detailed in the next pages, but the high overview is:</p><ul${r}><li${r}>The <code class="doc-token"${r}>register-service-worker.[js|ts]</code> file is part of the UI code and communicates with the service worker.</li><li${r}>When using InjectManifest, you can write your own custom service worker (<code class="doc-token"${r}>custom-service-worker.[js|ts]</code>).</li></ul>`);else return[e("p",null,"We’ll be using Quasar CLI to develop and build a PWA. The difference between building a SPA, Mobile App, Electron App, PWA or SSR is simply determined by the “mode” parameter in “quasar dev” and “quasar build” commands."),e("p",null,"In order to build a PWA, we first need to add the PWA mode to our Quasar project:"),e(p(m),null,{default:n(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar mode "),e("span",{class:"token function"},"add"),a(" pwa")])]),e(s,{lang:"bash"})]),_:1}),e("p",null,"If you want to jump right in and start developing, you can skip the “quasar mode” command and issue:"),e(p(m),null,{default:n(()=>[e("pre",{class:"doc-code"},[e("code",null,[a("$ quasar dev "),e("span",{class:"token parameter variable"},"-m"),a(" pwa")])]),e(s,{lang:"bash"})]),_:1}),e("p",null,"This will add PWA mode automatically, if it is missing."),e("p",null,[a("A new folder will appear in your project folder (which is explained in detail on the "),e(h,{to:"/quasar-cli-webpack/developing-pwa/configuring-pwa"},{default:n(()=>[a("Configuring PWA")]),_:1}),a(" page):")]),e(k,{def:d.tree},null,8,["def"]),e("p",null,"Both files are going to be detailed in the next pages, but the high overview is:"),e("ul",null,[e("li",null,[a("The "),e("code",{class:"doc-token"},"register-service-worker.[js|ts]"),a(" file is part of the UI code and communicates with the service worker.")]),e("li",null,[a("When using InjectManifest, you can write your own custom service worker ("),e("code",{class:"doc-token"},"custom-service-worker.[js|ts]"),a(").")])])]}),_:1},$))}}},v=w.setup;w.setup=(g,f)=>{const d=W();return(d.modules||(d.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-pwa/preparation.md"),v?v(g,f):void 0};const Y=j(w,[["__file","preparation.md"]]);export{Y as default};
