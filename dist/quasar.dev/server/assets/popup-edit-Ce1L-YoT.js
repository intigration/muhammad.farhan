import{provide as P,mergeProps as E,withCtx as r,createTextVNode as o,unref as c,createVNode as t,useSSRContext as x}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as u}from"./page-utils-C-QWsEHe.js";import{D as W,a as v}from"./DocPage-DKr-0pQn.js";import{D as a}from"./DocExample-BcaABDtE.js";import{D as w}from"./DocApi-Df9ryd6x.js";import{D as $}from"./DocPrerender-DPOnWPFO.js";import{C as f}from"./CopyButton-l3ndfN49.js";import{_ as S}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const g={__name:"popup-edit",__ssrInlineRender:!0,setup(k){P("_q_ex",{name:"QPopupEdit"});const m=[{name:"Input Textfield",category:"Form Components",path:"/vue-components/input"},{name:"Menu",category:"Vue Components",path:"/vue-components/menu"}],h=[{id:"qpopupedit-api",title:"2. QPopupEdit API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standalone",title:"3.1. Standalone",sub:!0},{id:"with-qtable",title:"3.2. With QTable",sub:!0},{id:"customizing",title:"3.3. Customizing",sub:!0},{id:"persistent-and-with-buttons",title:"3.4. Persistent and with buttons",sub:!0},{id:"the-default-slot",title:"3.5. The default slot",sub:!0},{id:"textarea-qeditor",title:"3.6. Textarea / QEditor",sub:!0},{id:"validation",title:"3.7. Validation",sub:!0}];return(D,y,T,C)=>{y(i(W,E({title:"Popup Edit",desc:"The QPopupEdit Vue component can be used to edit a value 'in place', like for example on a cell in QTable.",heading:"","edit-link":"vue-components/popup-edit",toc:h,related:m},C),{default:r((N,n,l,e)=>{if(n)n(`<p${e}>The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield.</p><p${e}>This component injects a `),n(i(v,{to:"/vue-components/menu"},{default:r((d,p,b,s)=>{if(p)p("QMenu");else return[o("QMenu")]}),_:1},l,e)),n(` into its parent DOM element and enables the behavior described above, so <strong${e}>it can be used anywhere</strong>, not only in QTable.</p>`),n(i(w,{file:"QPopupEdit"},null,l,e)),n(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>If used on a QTable, QPopupEdit won’t work with cell scoped slots.</p></div><h3 id="standalone" class="doc-heading doc-h3"${e}>Standalone</h3>`),n(i(a,{title:"Click on text",file:"Standalone"},null,l,e)),n(`<h3 id="with-qtable" class="doc-heading doc-h3"${e}>With QTable</h3><p${e}>Click on the cells to see the popup editor. The column “Name” demonstrates the <code class="doc-token"${e}>title</code> prop. The column “Calories” displays a numeric value usage. The column “Fat” also demonstrates the <code class="doc-token"${e}>disable</code> prop. If you look at the source code, you’ll see the cell for “fat” is using QPopupEdit, yet when clicking on the cell, the popup doesn’t show.</p>`),n(i(a,{title:"Edit first columns",file:"WithTable"},null,l,e)),n(`<h3 id="customizing" class="doc-heading doc-h3"${e}>Customizing</h3>`),n(i(a,{title:"Customizing QPopupEdit",file:"Customizing"},null,l,e)),n(`<h3 id="persistent-and-with-buttons" class="doc-heading doc-h3"${e}>Persistent and with buttons</h3><p${e}>You can also add two buttons with the <code class="doc-token"${e}>buttons</code> prop, “Cancel” and “Set” (the default labels). These buttons help to control the user’s input. Along with the <code class="doc-token"${e}>buttons</code> prop, you also have the <code class="doc-token"${e}>persistent</code> prop, which denies the user from closing the popup with the escape key or clicking/ tapping outside of the popup. Lastly, you can control the labels of the two buttons with the <code class="doc-token"${e}>label-set</code> and <code class="doc-token"${e}>label-cancel</code> props, as seen in the “Protein” column. Notice “Save” is replacing “Set” and “Close” is replacing “Cancel”.</p><blockquote class="doc-note"${e}><p${e}>The <code class="doc-token"${e}>persistent</code> prop is demonstrated in the “carbs” column.</p></blockquote>`),n(i(a,{title:"Persistent edit, and with buttons",file:"WithButtons"},null,l,e)),n(`<h3 id="the-default-slot" class="doc-heading doc-h3"${e}>The default slot</h3><p${e}>The default slot’s parameters are:</p>`),n(i(c($),null,{default:r((d,p,b,s)=>{if(p)p(`<pre class="doc-code"${s}><code${s}><span class="token punctuation"${s}>{</span> initialValue<span class="token punctuation"${s}>,</span> value<span class="token punctuation"${s}>,</span> validate<span class="token punctuation"${s}>,</span> set<span class="token punctuation"${s}>,</span> cancel<span class="token punctuation"${s}>,</span> updatePosition <span class="token punctuation"${s}>}</span></code></pre>`),p(i(f,null,null,b,s));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token punctuation"},"{"),o(" initialValue"),t("span",{class:"token punctuation"},","),o(" value"),t("span",{class:"token punctuation"},","),o(" validate"),t("span",{class:"token punctuation"},","),o(" set"),t("span",{class:"token punctuation"},","),o(" cancel"),t("span",{class:"token punctuation"},","),o(" updatePosition "),t("span",{class:"token punctuation"},"}")])]),t(f)]}),_:1},l,e)),n(`<div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Do not destructure the slot’s parameters as it will generate linting errors when using the <code class="doc-token"${e}>value</code> prop directly with <code class="doc-token"${e}>v-model</code>.</p></div>`),n(i(a,{title:"Default slot parameters",file:"DefaultSlotParameters"},null,l,e)),n(`<h3 id="textarea-qeditor" class="doc-heading doc-h3"${e}>Textarea / QEditor</h3><p${e}>Since QPopupEdit wraps QInput, you can basically use any type of QInput. For instance, you can also use a text area as shown below in the “Comments” column.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>When using a multi-line control (textarea, QEditor) for input, you’ll need to also use <code class="doc-token"${e}>@keyup.enter.stop</code> on the component in order to stop the enter key from closing the popup. You’ll also need to add buttons for controlling the popup too.</p></div>`),n(i(a,{title:"QInput textarea",file:"TextArea"},null,l,e)),n(i(a,{title:"QEditor",file:"PopupWithEditor"},null,l,e)),n(`<h3 id="validation" class="doc-heading doc-h3"${e}>Validation</h3><p${e}>QPopupEdit also allows for simple validation of the input. To use it, you give it a callback function in the form of an arrow function and it should return a Boolean. <code class="doc-token"${e}>(value) =&gt; Boolean</code>. This is <strong${e}>demonstrated in the “Calories” column</strong> below.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>Tip 1</p><p${e}>Notice we are using the <code class="doc-token"${e}>hide</code> event to also revalidate the input. If we don’t, QInput’s error prop will ‘hang’ in an invalid state.</p></div><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>Tip 2</p><p${e}>With this example, we are using QInput’s external error handling. We could also use QInput’s validation prop and emit the value to QPopupEdit’s validation prop. The same concept can be implemented, when using Vuelidate too. In other words, the value given to QPopupEdit’s validate function can come from anywhere.</p></div>`),n(i(a,{title:"Edit with validation",file:"WithValidation"},null,l,e));else return[t("p",null,"The QPopupEdit component can be used to edit a value “in place”, like for example a cell in QTable. By default, a cell is displayed as a String, then if you are using QPopupEdit and a user clicks/taps on the table cell, a popup will open where the user will be able to edit the value using a textfield."),t("p",null,[o("This component injects a "),t(v,{to:"/vue-components/menu"},{default:r(()=>[o("QMenu")]),_:1}),o(" into its parent DOM element and enables the behavior described above, so "),t("strong",null,"it can be used anywhere"),o(", not only in QTable.")]),t(w,{file:"QPopupEdit"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:d=>c(u)("usage")},"Usage",8,["onClick"]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,"If used on a QTable, QPopupEdit won’t work with cell scoped slots.")]),t("h3",{id:"standalone",class:"doc-heading doc-h3",onClick:d=>c(u)("standalone")},"Standalone",8,["onClick"]),t(a,{title:"Click on text",file:"Standalone"}),t("h3",{id:"with-qtable",class:"doc-heading doc-h3",onClick:d=>c(u)("with-qtable")},"With QTable",8,["onClick"]),t("p",null,[o("Click on the cells to see the popup editor. The column “Name” demonstrates the "),t("code",{class:"doc-token"},"title"),o(" prop. The column “Calories” displays a numeric value usage. The column “Fat” also demonstrates the "),t("code",{class:"doc-token"},"disable"),o(" prop. If you look at the source code, you’ll see the cell for “fat” is using QPopupEdit, yet when clicking on the cell, the popup doesn’t show.")]),t(a,{title:"Edit first columns",file:"WithTable"}),t("h3",{id:"customizing",class:"doc-heading doc-h3",onClick:d=>c(u)("customizing")},"Customizing",8,["onClick"]),t(a,{title:"Customizing QPopupEdit",file:"Customizing"}),t("h3",{id:"persistent-and-with-buttons",class:"doc-heading doc-h3",onClick:d=>c(u)("persistent-and-with-buttons")},"Persistent and with buttons",8,["onClick"]),t("p",null,[o("You can also add two buttons with the "),t("code",{class:"doc-token"},"buttons"),o(" prop, “Cancel” and “Set” (the default labels). These buttons help to control the user’s input. Along with the "),t("code",{class:"doc-token"},"buttons"),o(" prop, you also have the "),t("code",{class:"doc-token"},"persistent"),o(" prop, which denies the user from closing the popup with the escape key or clicking/ tapping outside of the popup. Lastly, you can control the labels of the two buttons with the "),t("code",{class:"doc-token"},"label-set"),o(" and "),t("code",{class:"doc-token"},"label-cancel"),o(" props, as seen in the “Protein” column. Notice “Save” is replacing “Set” and “Close” is replacing “Cancel”.")]),t("blockquote",{class:"doc-note"},[t("p",null,[o("The "),t("code",{class:"doc-token"},"persistent"),o(" prop is demonstrated in the “carbs” column.")])]),t(a,{title:"Persistent edit, and with buttons",file:"WithButtons"}),t("h3",{id:"the-default-slot",class:"doc-heading doc-h3",onClick:d=>c(u)("the-default-slot")},"The default slot",8,["onClick"]),t("p",null,"The default slot’s parameters are:"),t(c($),null,{default:r(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token punctuation"},"{"),o(" initialValue"),t("span",{class:"token punctuation"},","),o(" value"),t("span",{class:"token punctuation"},","),o(" validate"),t("span",{class:"token punctuation"},","),o(" set"),t("span",{class:"token punctuation"},","),o(" cancel"),t("span",{class:"token punctuation"},","),o(" updatePosition "),t("span",{class:"token punctuation"},"}")])]),t(f)]),_:1}),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[o("Do not destructure the slot’s parameters as it will generate linting errors when using the "),t("code",{class:"doc-token"},"value"),o(" prop directly with "),t("code",{class:"doc-token"},"v-model"),o(".")])]),t(a,{title:"Default slot parameters",file:"DefaultSlotParameters"}),t("h3",{id:"textarea-qeditor",class:"doc-heading doc-h3",onClick:d=>c(u)("textarea-qeditor")},"Textarea / QEditor",8,["onClick"]),t("p",null,"Since QPopupEdit wraps QInput, you can basically use any type of QInput. For instance, you can also use a text area as shown below in the “Comments” column."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[o("When using a multi-line control (textarea, QEditor) for input, you’ll need to also use "),t("code",{class:"doc-token"},"@keyup.enter.stop"),o(" on the component in order to stop the enter key from closing the popup. You’ll also need to add buttons for controlling the popup too.")])]),t(a,{title:"QInput textarea",file:"TextArea"}),t(a,{title:"QEditor",file:"PopupWithEditor"}),t("h3",{id:"validation",class:"doc-heading doc-h3",onClick:d=>c(u)("validation")},"Validation",8,["onClick"]),t("p",null,[o("QPopupEdit also allows for simple validation of the input. To use it, you give it a callback function in the form of an arrow function and it should return a Boolean. "),t("code",{class:"doc-token"},"(value) => Boolean"),o(". This is "),t("strong",null,"demonstrated in the “Calories” column"),o(" below.")]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"Tip 1"),t("p",null,[o("Notice we are using the "),t("code",{class:"doc-token"},"hide"),o(" event to also revalidate the input. If we don’t, QInput’s error prop will ‘hang’ in an invalid state.")])]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"Tip 2"),t("p",null,"With this example, we are using QInput’s external error handling. We could also use QInput’s validation prop and emit the value to QPopupEdit’s validation prop. The same concept can be implemented, when using Vuelidate too. In other words, the value given to QPopupEdit’s validate function can come from anywhere.")]),t(a,{title:"Edit with validation",file:"WithValidation"})]}),_:1},T))}}},Q=g.setup;g.setup=(k,m)=>{const h=x();return(h.modules||(h.modules=new Set)).add("src/pages/vue-components/popup-edit.md"),Q?Q(k,m):void 0};const tt=S(g,[["__file","popup-edit.md"]]);export{tt as default};
