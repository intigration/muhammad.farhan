import{mergeProps as x,withCtx as r,unref as c,createVNode as n,createTextVNode as s,useSSRContext as S}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import"quasar";import{D as C,a as d}from"./DocPage-DKr-0pQn.js";import{D as u}from"./DocPrerender-DPOnWPFO.js";import{C as p}from"./CopyButton-l3ndfN49.js";import{_ as q}from"../server-entry.js";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const $={__name:"browser-compatibility",__ssrInlineRender:!0,setup(m){const y=[{name:"The quasar.config file",category:"Quasar CLI (with Vite)",path:"/quasar-cli-vite/quasar-config-file"}];return(g,w,h,v)=>{w(l(C,x({title:"Browser compatibility",desc:"(@quasar/app-vite) How to handle the browser support with Quasar CLI.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/browser-compatibility",related:y},v),{default:r((A,e,k,o)=>{if(e)e(`<p${o}>In order to configure the browser compatibility for your app, you will need to edit the <code class="doc-token"${o}>/quasar.config</code> file:</p>`),e(l(c(u),{title:"/quasar.config file"},{default:r((f,a,i,t)=>{if(a)a(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>build</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>target</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
    <span class="token literal-property property"${t}>browser</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>[</span> <span class="token string"${t}>&#39;es2022&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;firefox115&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;chrome115&#39;</span><span class="token punctuation"${t}>,</span> <span class="token string"${t}>&#39;safari14&#39;</span> <span class="token punctuation"${t}>]</span><span class="token punctuation"${t}>,</span>
    <span class="token literal-property property"${t}>node</span><span class="token operator"${t}>:</span> <span class="token string"${t}>&#39;node20&#39;</span>
  <span class="token punctuation"${t}>}</span>
<span class="token punctuation"${t}>}</span></code></pre>`),a(l(p,null,null,i,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"target"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"browser"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token string"},"'es2022'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'firefox115'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'chrome115'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'safari14'"),s(),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"node"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'node20'"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(p)]}),_:1},k,o)),e(`<p${o}>Based on the Quasar Mode that you will be using (SPA/SSR/PWA/Electron/â€¦ etc) you will have client-side files (that run in the browser) and possibly Node.js running files. This is what the two keys of <code class="doc-token"${o}>target</code> Object above are for.</p><p${o}>Also, independent of this configuration, you need to decide if you want the `),e(l(d,{to:"https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill"},{default:r((f,a,i,t)=>{if(a)a("module preload polyfill");else return[s("module preload polyfill")]}),_:1},k,o)),e(" since all the script tags will be injected as modules. By default, the polyfill is NOT included:</p>"),e(l(c(u),{title:"/quasar.config file"},{default:r((f,a,i,t)=>{if(a)a(`<pre class="doc-code"${t}><code${t}><span class="token literal-property property"${t}>build</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>polyfillModulePreload</span><span class="token operator"${t}>:</span> <span class="token boolean"${t}>false</span>
<span class="token punctuation"${t}>}</span></code></pre>`),a(l(p,null,null,i,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"polyfillModulePreload"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"false"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(p)]}),_:1},k,o)),e(`<p${o}>Furthermore, based on your <code class="doc-token"${o}>/postcss.config.cjs</code> file content, your CSS will also pass through <code class="doc-token"${o}>autoprefixer</code> for which you can configure the browser levels that you are interested in:</p>`),e(l(c(u),{title:"/postcss.config.cjs"},{default:r((f,a,i,t)=>{if(a)a(`<pre class="doc-code"${t}><code${t}><span class="token function"${t}>require</span><span class="token punctuation"${t}>(</span><span class="token string"${t}>&#39;autoprefixer&#39;</span><span class="token punctuation"${t}>)</span><span class="token punctuation"${t}>(</span><span class="token punctuation"${t}>{</span>
  <span class="token literal-property property"${t}>overrideBrowserslist</span><span class="token operator"${t}>:</span> <span class="token punctuation"${t}>[</span>
    <span class="token string"${t}>&#39;last 4 Chrome versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 Firefox versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 Edge versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 Safari versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 Android versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 ChromeAndroid versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 FirefoxAndroid versions&#39;</span><span class="token punctuation"${t}>,</span>
    <span class="token string"${t}>&#39;last 4 iOS versions&#39;</span>
  <span class="token punctuation"${t}>]</span>
<span class="token punctuation"${t}>}</span><span class="token punctuation"${t}>)</span></code></pre>`),a(l(p,null,null,i,t));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'autoprefixer'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"overrideBrowserslist"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},"'last 4 Chrome versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Firefox versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Edge versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Safari versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Android versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 ChromeAndroid versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 FirefoxAndroid versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 iOS versions'"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(p)]}),_:1},k,o)),e(`<p${o}>More info on how to specify <code class="doc-token"${o}>autoprefixer</code> browser ranges: `),e(l(d,{to:"https://github.com/browserslist/browserslist"},{default:r((f,a,i,t)=>{if(a)a("browserslist");else return[s("browserslist")]}),_:1},k,o)),e(".</p>");else return[n("p",null,[s("In order to configure the browser compatibility for your app, you will need to edit the "),n("code",{class:"doc-token"},"/quasar.config"),s(" file:")]),n(c(u),{title:"/quasar.config file"},{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"target"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token literal-property property"},"browser"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(),n("span",{class:"token string"},"'es2022'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'firefox115'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'chrome115'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'safari14'"),s(),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token literal-property property"},"node"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token string"},"'node20'"),s(`
  `),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(p)]),_:1}),n("p",null,[s("Based on the Quasar Mode that you will be using (SPA/SSR/PWA/Electron/â€¦ etc) you will have client-side files (that run in the browser) and possibly Node.js running files. This is what the two keys of "),n("code",{class:"doc-token"},"target"),s(" Object above are for.")]),n("p",null,[s("Also, independent of this configuration, you need to decide if you want the "),n(d,{to:"https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill"},{default:r(()=>[s("module preload polyfill")]),_:1}),s(" since all the script tags will be injected as modules. By default, the polyfill is NOT included:")]),n(c(u),{title:"/quasar.config file"},{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"polyfillModulePreload"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token boolean"},"false"),s(`
`),n("span",{class:"token punctuation"},"}")])]),n(p)]),_:1}),n("p",null,[s("Furthermore, based on your "),n("code",{class:"doc-token"},"/postcss.config.cjs"),s(" file content, your CSS will also pass through "),n("code",{class:"doc-token"},"autoprefixer"),s(" for which you can configure the browser levels that you are interested in:")]),n(c(u),{title:"/postcss.config.cjs"},{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'autoprefixer'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token literal-property property"},"overrideBrowserslist"),n("span",{class:"token operator"},":"),s(),n("span",{class:"token punctuation"},"["),s(`
    `),n("span",{class:"token string"},"'last 4 Chrome versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Firefox versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Edge versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Safari versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 Android versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 ChromeAndroid versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 FirefoxAndroid versions'"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token string"},"'last 4 iOS versions'"),s(`
  `),n("span",{class:"token punctuation"},"]"),s(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")")])]),n(p)]),_:1}),n("p",null,[s("More info on how to specify "),n("code",{class:"doc-token"},"autoprefixer"),s(" browser ranges: "),n(d,{to:"https://github.com/browserslist/browserslist"},{default:r(()=>[s("browserslist")]),_:1}),s(".")])]}),_:1},h))}}},b=$.setup;$.setup=(m,y)=>{const g=S();return(g.modules||(g.modules=new Set)).add("src/pages/quasar-cli-vite/browser-compatibility.md"),b?b(m,y):void 0};const V=q($,[["__file","browser-compatibility.md"]]);export{V as default};
