import{provide as D,resolveComponent as S,mergeProps as O,withCtx as h,createTextVNode as n,createVNode as o,unref as d,useSSRContext as x}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D as z,a as m}from"./DocPage-DKr-0pQn.js";import{D as i}from"./DocExample-BcaABDtE.js";import{D as k}from"./DocApi-Df9ryd6x.js";import{_ as R}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const p={__name:"radio",__ssrInlineRender:!0,setup(f){D("_q_ex",{name:"QRadio"});const g=[{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Button Toggle",category:"Form Components",path:"/vue-components/button-toggle"},{name:"Checkbox",category:"Form Components",path:"/vue-components/checkbox"},{name:"Toggle",category:"Form Components",path:"/vue-components/toggle"}],u=[{id:"qradio-api",title:"2. QRadio API",deep:!0},{id:"usage",title:"3. Usage"},{id:"standard",title:"3.1. Standard",sub:!0},{id:"with-custom-icons",title:"3.2. With custom icons",sub:!0},{id:"dense",title:"3.3. Dense",sub:!0},{id:"coloring",title:"3.4. Coloring",sub:!0},{id:"force-dark-mode",title:"3.5. Force dark mode",sub:!0},{id:"disable",title:"3.6. Disable",sub:!0},{id:"label-on-left-side",title:"3.7. Label on left-side",sub:!0},{id:"sizes",title:"3.8. Sizes",sub:!0},{id:"with-qoptiongroup",title:"3.9. With QOptionGroup",sub:!0},{id:"with-qitem",title:"3.10. With QItem",sub:!0},{id:"native-form-submit",title:"3.11. Native form submit",sub:!0}];return(W,w,$,C)=>{const b=S("q-badge");w(l(z,O({title:"Radio",desc:"The QRadio Vue component is a basic element for user input. It can be used to supply a way for the user to pick an option from multiple choices.",heading:"","edit-link":"vue-components/radio",toc:u,related:g},C),{default:h((q,t,a,e)=>{if(t)t(`<p${e}>The QRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Please also refer to the `),t(l(m,{to:"/vue-components/option-group"},{default:h((s,r,Q,y)=>{if(r)r("QOptionGroup");else return[n("QOptionGroup")]}),_:1},a,e)),t(" on other possibilities for creating groups of Radios.</p></div>"),t(l(k,{file:"QRadio"},null,a,e)),t(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="standard" class="doc-heading doc-h3"${e}>Standard</h3>`),t(l(i,{title:"Standard",file:"Standard"},null,a,e)),t(`<h3 id="with-custom-icons" class="doc-heading doc-h3"${e}>With custom icons `),t(l(b,{label:"v2.5+"},null,a,e)),t("</h3>"),t(l(i,{title:"With icons",file:"WithIcons"},null,a,e)),t(`<h3 id="dense" class="doc-heading doc-h3"${e}>Dense</h3>`),t(l(i,{title:"Dense",file:"Dense"},null,a,e)),t(`<h3 id="coloring" class="doc-heading doc-h3"${e}>Coloring</h3><p${e}>In the second row in the example below, the property <code class="doc-token"${e}>keep-color</code> is being used to retain the passed in color when the radio button is not in a toggled state.</p>`),t(l(i,{title:"Coloring",file:"Coloring"},null,a,e)),t(`<h3 id="force-dark-mode" class="doc-heading doc-h3"${e}>Force dark mode</h3>`),t(l(i,{title:"Force dark mode",file:"OnDarkBackground"},null,a,e)),t(`<h3 id="disable" class="doc-heading doc-h3"${e}>Disable</h3>`),t(l(i,{title:"Disable",file:"Disable"},null,a,e)),t(`<h3 id="label-on-left-side" class="doc-heading doc-h3"${e}>Label on left-side</h3>`),t(l(i,{title:"Label on left side",file:"LabelPosition"},null,a,e)),t(`<h3 id="sizes" class="doc-heading doc-h3"${e}>Sizes</h3><p${e}>Apart from the standard sizes below, you can define your own through the <code class="doc-token"${e}>size</code> property (last one is a custom size).</p>`),t(l(i,{title:"Standard sizes",file:"StandardSizes"},null,a,e)),t(`<h3 id="with-qoptiongroup" class="doc-heading doc-h3"${e}>With QOptionGroup</h3><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>You can also use `),t(l(m,{to:"/vue-components/option-group"},{default:h((s,r,Q,y)=>{if(r)r("QOptionGroup");else return[n("QOptionGroup")]}),_:1},a,e)),t(", which simplifies the usage when you have groups of radios, like in example below.</p></div>"),t(l(i,{title:"Usage with QOptionGroup",file:"OptionGroup"},null,a,e)),t(`<h3 id="with-qitem" class="doc-heading doc-h3"${e}>With QItem</h3><p${e}>In the example below, we are rendering a <code class="doc-token"${e}>&lt;label&gt;</code> tag (notice <code class="doc-token"${e}>tag=&quot;label&quot;</code>) so the QRadio will respond to clicks on QItems to change toggle state.</p>`),t(l(i,{title:"With QItem",file:"InaList"},null,a,e)),t(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QRadio, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):</p>`),t(l(i,{title:"Native form",file:"NativeForm"},null,a,e));else return[o("p",null,"The QRadio component is another basic element for user input. You can use this to supply a way for the user to pick an option from multiple choices."),o("div",{class:"doc-note doc-note--tip"},[o("p",{class:"doc-note__title"},"TIP"),o("p",null,[n("Please also refer to the "),o(m,{to:"/vue-components/option-group"},{default:h(()=>[n("QOptionGroup")]),_:1}),n(" on other possibilities for creating groups of Radios.")])]),o(k,{file:"QRadio"}),o("h2",{id:"usage",class:"doc-heading doc-h2",onClick:s=>d(c)("usage")},"Usage",8,["onClick"]),o("h3",{id:"standard",class:"doc-heading doc-h3",onClick:s=>d(c)("standard")},"Standard",8,["onClick"]),o(i,{title:"Standard",file:"Standard"}),o("h3",{id:"with-custom-icons",class:"doc-heading doc-h3",onClick:s=>d(c)("with-custom-icons")},[n("With custom icons "),o(b,{label:"v2.5+"})],8,["onClick"]),o(i,{title:"With icons",file:"WithIcons"}),o("h3",{id:"dense",class:"doc-heading doc-h3",onClick:s=>d(c)("dense")},"Dense",8,["onClick"]),o(i,{title:"Dense",file:"Dense"}),o("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:s=>d(c)("coloring")},"Coloring",8,["onClick"]),o("p",null,[n("In the second row in the example below, the property "),o("code",{class:"doc-token"},"keep-color"),n(" is being used to retain the passed in color when the radio button is not in a toggled state.")]),o(i,{title:"Coloring",file:"Coloring"}),o("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:s=>d(c)("force-dark-mode")},"Force dark mode",8,["onClick"]),o(i,{title:"Force dark mode",file:"OnDarkBackground"}),o("h3",{id:"disable",class:"doc-heading doc-h3",onClick:s=>d(c)("disable")},"Disable",8,["onClick"]),o(i,{title:"Disable",file:"Disable"}),o("h3",{id:"label-on-left-side",class:"doc-heading doc-h3",onClick:s=>d(c)("label-on-left-side")},"Label on left-side",8,["onClick"]),o(i,{title:"Label on left side",file:"LabelPosition"}),o("h3",{id:"sizes",class:"doc-heading doc-h3",onClick:s=>d(c)("sizes")},"Sizes",8,["onClick"]),o("p",null,[n("Apart from the standard sizes below, you can define your own through the "),o("code",{class:"doc-token"},"size"),n(" property (last one is a custom size).")]),o(i,{title:"Standard sizes",file:"StandardSizes"}),o("h3",{id:"with-qoptiongroup",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qoptiongroup")},"With QOptionGroup",8,["onClick"]),o("div",{class:"doc-note doc-note--tip"},[o("p",{class:"doc-note__title"},"TIP"),o("p",null,[n("You can also use "),o(m,{to:"/vue-components/option-group"},{default:h(()=>[n("QOptionGroup")]),_:1}),n(", which simplifies the usage when you have groups of radios, like in example below.")])]),o(i,{title:"Usage with QOptionGroup",file:"OptionGroup"}),o("h3",{id:"with-qitem",class:"doc-heading doc-h3",onClick:s=>d(c)("with-qitem")},"With QItem",8,["onClick"]),o("p",null,[n("In the example below, we are rendering a "),o("code",{class:"doc-token"},"<label>"),n(" tag (notice "),o("code",{class:"doc-token"},'tag="label"'),n(") so the QRadio will respond to clicks on QItems to change toggle state.")]),o(i,{title:"With QItem",file:"InaList"}),o("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:s=>d(c)("native-form-submit")},"Native form submit",8,["onClick"]),o("p",null,[n("When dealing with a native form which has an "),o("code",{class:"doc-token"},"action"),n(" and a "),o("code",{class:"doc-token"},"method"),n(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),o("code",{class:"doc-token"},"name"),n(" property on QRadio, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")]),o(i,{title:"Native form",file:"NativeForm"})]}),_:1},$))}}},v=p.setup;p.setup=(f,g)=>{const u=x();return(u.modules||(u.modules=new Set)).add("src/pages/vue-components/radio.md"),v?v(f,g):void 0};const _=R(p,[["__file","radio.md"]]);export{_ as default};
