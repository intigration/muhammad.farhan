import{provide as y,mergeProps as k,withCtx as C,createVNode as t,unref as n,createTextVNode as c,useSSRContext as $}from"vue";import{ssrRenderComponent as r}from"vue/server-renderer";import{c as l}from"./page-utils-C-QWsEHe.js";import{D as S}from"./DocPage-DKr-0pQn.js";import{D as a}from"./DocExample-BcaABDtE.js";import{D as g}from"./DocApi-Df9ryd6x.js";import{_ as P}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const h={__name:"linear-progress",__ssrInlineRender:!0,setup(m){y("_q_ex",{name:"QLinearProgress"});const u=[{name:"Circular Progress",category:"Vue Components",path:"/vue-components/circular-progress"},{name:"Inner Loading",category:"Vue Components",path:"/vue-components/inner-loading"},{name:"Spinners",category:"Vue Components",path:"/vue-components/spinners"},{name:"Loading",category:"Quasar Plugins",path:"/quasar-plugins/loading"},{name:"Loading Bar",category:"Quasar Plugins",path:"/quasar-plugins/loading-bar"}],d=[{id:"qlinearprogress-api",title:"2. QLinearProgress API",deep:!0},{id:"usage",title:"3. Usage"},{id:"determined-state",title:"3.1. Determined state",sub:!0},{id:"indeterminate-state",title:"3.2. Indeterminate state",sub:!0},{id:"reversed",title:"3.3. Reversed",sub:!0},{id:"style",title:"3.4. Style",sub:!0},{id:"buffer",title:"3.5. Buffer",sub:!0},{id:"with-a-label",title:"3.6. With a label",sub:!0}];return(w,b,p,v)=>{b(r(S,k({title:"Linear Progress",desc:"The QLinearProgress Vue component displays a colored loading bar. The bar can either have a determinate progress or an indeterminate animation.",heading:"","edit-link":"vue-components/linear-progress",toc:d,related:u},v),{default:C((x,i,o,e)=>{if(i)i(`<p${e}>The QLinearProgress component displays a colored loading bar. The bar can either have a determinate progress or an indeterminate animation. It should be used to inform the user that an action is occurring in the background.</p>`),i(r(g,{file:"QLinearProgress"},null,o,e)),i(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="determined-state" class="doc-heading doc-h3"${e}>Determined state</h3>`),i(r(a,{title:"Determined state",file:"Determinate"},null,o,e)),i(`<h3 id="indeterminate-state" class="doc-heading doc-h3"${e}>Indeterminate state</h3>`),i(r(a,{title:"Indeterminate state",file:"Indeterminate"},null,o,e)),i(`<div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>For indeterminate state (above) or query state (below) you don’t need to specify the <code class="doc-token"${e}>value</code> property.</p></div>`),i(r(a,{title:"Query state",file:"Query"},null,o,e)),i(`<h3 id="reversed" class="doc-heading doc-h3"${e}>Reversed</h3>`),i(r(a,{title:"Reverse progress direction",file:"Reverse"},null,o,e)),i(`<h3 id="style" class="doc-heading doc-h3"${e}>Style</h3>`),i(r(a,{title:"Custom height",file:"CustomHeight"},null,o,e)),i(r(a,{title:"Standard sizes",file:"StandardSizes"},null,o,e)),i(r(a,{title:"Stripe",file:"Stripe"},null,o,e)),i(r(a,{title:"Force dark mode",file:"OnDarkBackground"},null,o,e)),i(`<h3 id="buffer" class="doc-heading doc-h3"${e}>Buffer</h3>`),i(r(a,{title:"Buffer",file:"Buffering"},null,o,e)),i(`<h3 id="with-a-label" class="doc-heading doc-h3"${e}>With a label</h3><p${e}>To add a label to the progress bar you can use the default slot. Take care to:</p><ul${e}><li${e}>use a <code class="doc-token"${e}>size</code> big enough to allow showing the label</li><li${e}>set a text color for the label so that it is visible both on the filled and unfilled areas, or use text-shadow CSS, or use a QBadge as in the example below</li></ul>`),i(r(a,{title:"With a label",file:"Label"},null,o,e));else return[t("p",null,"The QLinearProgress component displays a colored loading bar. The bar can either have a determinate progress or an indeterminate animation. It should be used to inform the user that an action is occurring in the background."),t(g,{file:"QLinearProgress"}),t("h2",{id:"usage",class:"doc-heading doc-h2",onClick:s=>n(l)("usage")},"Usage",8,["onClick"]),t("h3",{id:"determined-state",class:"doc-heading doc-h3",onClick:s=>n(l)("determined-state")},"Determined state",8,["onClick"]),t(a,{title:"Determined state",file:"Determinate"}),t("h3",{id:"indeterminate-state",class:"doc-heading doc-h3",onClick:s=>n(l)("indeterminate-state")},"Indeterminate state",8,["onClick"]),t(a,{title:"Indeterminate state",file:"Indeterminate"}),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[c("For indeterminate state (above) or query state (below) you don’t need to specify the "),t("code",{class:"doc-token"},"value"),c(" property.")])]),t(a,{title:"Query state",file:"Query"}),t("h3",{id:"reversed",class:"doc-heading doc-h3",onClick:s=>n(l)("reversed")},"Reversed",8,["onClick"]),t(a,{title:"Reverse progress direction",file:"Reverse"}),t("h3",{id:"style",class:"doc-heading doc-h3",onClick:s=>n(l)("style")},"Style",8,["onClick"]),t(a,{title:"Custom height",file:"CustomHeight"}),t(a,{title:"Standard sizes",file:"StandardSizes"}),t(a,{title:"Stripe",file:"Stripe"}),t(a,{title:"Force dark mode",file:"OnDarkBackground"}),t("h3",{id:"buffer",class:"doc-heading doc-h3",onClick:s=>n(l)("buffer")},"Buffer",8,["onClick"]),t(a,{title:"Buffer",file:"Buffering"}),t("h3",{id:"with-a-label",class:"doc-heading doc-h3",onClick:s=>n(l)("with-a-label")},"With a label",8,["onClick"]),t("p",null,"To add a label to the progress bar you can use the default slot. Take care to:"),t("ul",null,[t("li",null,[c("use a "),t("code",{class:"doc-token"},"size"),c(" big enough to allow showing the label")]),t("li",null,"set a text color for the label so that it is visible both on the filled and unfilled areas, or use text-shadow CSS, or use a QBadge as in the example below")]),t(a,{title:"With a label",file:"Label"})]}),_:1},p))}}},f=h.setup;h.setup=(m,u)=>{const d=$();return(d.modules||(d.modules=new Set)).add("src/pages/vue-components/linear-progress.md"),f?f(m,u):void 0};const K=P(h,[["__file","linear-progress.md"]]);export{K as default};
