import{mergeProps as C,withCtx as r,unref as l,createVNode as n,createTextVNode as e,useSSRContext as F}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as h}from"./page-utils-C-QWsEHe.js";import{D}from"./DocPage-DKr-0pQn.js";import{D as g}from"./DocTree-Kz2iQlb5.js";import{D as p}from"./DocPrerender-DPOnWPFO.js";import{C as c}from"./CopyButton-l3ndfN49.js";import{_ as R}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const y={__name:"electron-accessing-files",__ssrInlineRender:!0,setup(w){const f=[{id:"using-dirname-and-filename",title:"2. Using __dirname & __filename"},{id:"read-and-write-local-files",title:"3. Read & Write Local Files"},{id:"accessing-the-public-folder",title:"4. Accessing the Public Folder"}],u={tree:{l:"app.asar",c:[{l:"dist",c:[{l:"electron-*",c:[{l:"js/..."},{l:"icons/"},{l:"node_modules/"},{l:"index.html"},{l:"package.json"},{l:"electron-main.js"},{l:"electron-preload.js"},{l:"...contents of /public"}]}]}]}};return(W,b,v,P)=>{b(i(D,C({title:"Electron Accessing Files",desc:"(@quasar/app-webpack) How to access files in a Quasar desktop app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-electron-apps/electron-accessing-files",toc:f},P),{default:r((j,o,m,a)=>{if(o)o(`<h2 id="using-dirname-and-filename" class="doc-heading doc-h2"${a}>Using __dirname &amp; __filename</h2><p${a}>Since the main process is bundled using webpack, the use of <code class="doc-token"${a}>__dirname</code> and <code class="doc-token"${a}>__filename</code> will not provide an expected value in production. Referring to the File Tree, you’ll notice that in production the electron-main.js and electron-preload.js files are placed inside the <code class="doc-token"${a}>dist/electron-*</code> folder. Based on this knowledge, use <code class="doc-token"${a}>__dirname</code> &amp; <code class="doc-token"${a}>__filename</code> accordingly.</p>`),o(i(g,{def:u.tree},null,m,a)),o(`<h2 id="read-and-write-local-files" class="doc-heading doc-h2"${a}>Read &amp; Write Local Files</h2><p${a}>One great benefit of using Electron is the ability to access the user’s file system. This enables you to read and write files on the local system. To help avoid Chromium restrictions and writing to your application’s internal files, make sure to make use of electron’s APIs, specifically the app.getPath(name) function. This helper method can get you file paths to system directories such as the user’s desktop, system temporary files, etc.</p><p${a}>We can use the userData directory, which is reserved specifically for our application, so we can have confidence other programs or other user interactions should not tamper with this file space.</p>`),o(i(l(p),{title:"electron-main or electron-preload"},{default:r((k,t,d,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> path <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;path&#39;</span>
<span class="token keyword"${s}>import</span> <span class="token punctuation"${s}>{</span> app <span class="token punctuation"${s}>}</span> <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;@electron/remote&#39;</span>

<span class="token keyword"${s}>const</span> filePath <span class="token operator"${s}>=</span> path<span class="token punctuation"${s}>.</span><span class="token function"${s}>join</span><span class="token punctuation"${s}>(</span>app<span class="token punctuation"${s}>.</span><span class="token function"${s}>getPath</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;userData&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>,</span> <span class="token string"${s}>&#39;/some.file&#39;</span><span class="token punctuation"${s}>)</span></code></pre>`),t(i(c,null,null,d,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),e(" path "),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'path'"),e(`
`),n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" app "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'@electron/remote'"),e(`

`),n("span",{class:"token keyword"},"const"),e(" filePath "),n("span",{class:"token operator"},"="),e(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),e("app"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'userData'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token string"},"'/some.file'"),n("span",{class:"token punctuation"},")")])]),n(c)]}),_:1},m,a)),o(`<p${a}>If you import <code class="doc-token"${a}>@electron/remote</code> in your preload script, then you need to set the following in your <code class="doc-token"${a}>electron-main.js</code> where you instantiate BrowserWindow:</p>`),o(i(l(p),null,{default:r((k,t,d,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>mainWindow <span class="token operator"${s}>=</span> <span class="token keyword"${s}>new</span> <span class="token class-name"${s}>BrowserWindow</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>{</span>
  <span class="token comment"${s}>// ...</span>
  <span class="token literal-property property"${s}>webPreferences</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token comment"${s}>// ...</span>
    <span class="token literal-property property"${s}>sandbox</span><span class="token operator"${s}>:</span> <span class="token boolean"${s}>false</span> <span class="token comment"${s}>// &lt;-- to be able to import @electron/remote in preload script</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(i(c,null,null,d,s));else return[n("pre",{class:"doc-code"},[n("code",null,[e("mainWindow "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"BrowserWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// ..."),e(`
  `),n("span",{class:"token literal-property property"},"webPreferences"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token comment"},"// ..."),e(`
    `),n("span",{class:"token literal-property property"},"sandbox"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token boolean"},"false"),e(),n("span",{class:"token comment"},"// <-- to be able to import @electron/remote in preload script"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}")])]),n(c)]}),_:1},m,a)),o(`<h2 id="accessing-the-public-folder" class="doc-heading doc-h2"${a}>Accessing the Public Folder</h2><p${a}>If for some reason, you have important files that you are storing in the /public folder, you can access those too by following the code below. To understand why you need to access them this way, please read the “Using __dirname &amp; __filename” section above.</p>`),o(i(l(p),{title:"electron-main or electron-preload"},{default:r((k,t,d,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>import</span> path <span class="token keyword"${s}>from</span> <span class="token string"${s}>&#39;path&#39;</span>

<span class="token keyword"${s}>const</span> publicFolder <span class="token operator"${s}>=</span> path<span class="token punctuation"${s}>.</span><span class="token function"${s}>resolve</span><span class="token punctuation"${s}>(</span>__dirname<span class="token punctuation"${s}>,</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>QUASAR_PUBLIC_FOLDER</span><span class="token punctuation"${s}>)</span></code></pre>`),t(i(c,null,null,d,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),e(" path "),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'path'"),e(`

`),n("span",{class:"token keyword"},"const"),e(" publicFolder "),n("span",{class:"token operator"},"="),e(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),e("__dirname"),n("span",{class:"token punctuation"},","),e(" process"),n("span",{class:"token punctuation"},"."),e("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"QUASAR_PUBLIC_FOLDER"),n("span",{class:"token punctuation"},")")])]),n(c)]}),_:1},m,a));else return[n("h2",{id:"using-dirname-and-filename",class:"doc-heading doc-h2",onClick:k=>l(h)("using-dirname-and-filename")},"Using __dirname & __filename",8,["onClick"]),n("p",null,[e("Since the main process is bundled using webpack, the use of "),n("code",{class:"doc-token"},"__dirname"),e(" and "),n("code",{class:"doc-token"},"__filename"),e(" will not provide an expected value in production. Referring to the File Tree, you’ll notice that in production the electron-main.js and electron-preload.js files are placed inside the "),n("code",{class:"doc-token"},"dist/electron-*"),e(" folder. Based on this knowledge, use "),n("code",{class:"doc-token"},"__dirname"),e(" & "),n("code",{class:"doc-token"},"__filename"),e(" accordingly.")]),n(g,{def:u.tree},null,8,["def"]),n("h2",{id:"read-and-write-local-files",class:"doc-heading doc-h2",onClick:k=>l(h)("read-and-write-local-files")},"Read & Write Local Files",8,["onClick"]),n("p",null,"One great benefit of using Electron is the ability to access the user’s file system. This enables you to read and write files on the local system. To help avoid Chromium restrictions and writing to your application’s internal files, make sure to make use of electron’s APIs, specifically the app.getPath(name) function. This helper method can get you file paths to system directories such as the user’s desktop, system temporary files, etc."),n("p",null,"We can use the userData directory, which is reserved specifically for our application, so we can have confidence other programs or other user interactions should not tamper with this file space."),n(l(p),{title:"electron-main or electron-preload"},{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),e(" path "),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'path'"),e(`
`),n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" app "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'@electron/remote'"),e(`

`),n("span",{class:"token keyword"},"const"),e(" filePath "),n("span",{class:"token operator"},"="),e(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"join"),n("span",{class:"token punctuation"},"("),e("app"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getPath"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'userData'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),e(),n("span",{class:"token string"},"'/some.file'"),n("span",{class:"token punctuation"},")")])]),n(c)]),_:1}),n("p",null,[e("If you import "),n("code",{class:"doc-token"},"@electron/remote"),e(" in your preload script, then you need to set the following in your "),n("code",{class:"doc-token"},"electron-main.js"),e(" where you instantiate BrowserWindow:")]),n(l(p),null,{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("mainWindow "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"new"),e(),n("span",{class:"token class-name"},"BrowserWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token comment"},"// ..."),e(`
  `),n("span",{class:"token literal-property property"},"webPreferences"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token comment"},"// ..."),e(`
    `),n("span",{class:"token literal-property property"},"sandbox"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token boolean"},"false"),e(),n("span",{class:"token comment"},"// <-- to be able to import @electron/remote in preload script"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}")])]),n(c)]),_:1}),n("h2",{id:"accessing-the-public-folder",class:"doc-heading doc-h2",onClick:k=>l(h)("accessing-the-public-folder")},"Accessing the Public Folder",8,["onClick"]),n("p",null,"If for some reason, you have important files that you are storing in the /public folder, you can access those too by following the code below. To understand why you need to access them this way, please read the “Using __dirname & __filename” section above."),n(l(p),{title:"electron-main or electron-preload"},{default:r(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"import"),e(" path "),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'path'"),e(`

`),n("span",{class:"token keyword"},"const"),e(" publicFolder "),n("span",{class:"token operator"},"="),e(" path"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"resolve"),n("span",{class:"token punctuation"},"("),e("__dirname"),n("span",{class:"token punctuation"},","),e(" process"),n("span",{class:"token punctuation"},"."),e("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"QUASAR_PUBLIC_FOLDER"),n("span",{class:"token punctuation"},")")])]),n(c)]),_:1})]}),_:1},v))}}},$=y.setup;y.setup=(w,f)=>{const u=F();return(u.modules||(u.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-electron-apps/electron-accessing-files.md"),$?$(w,f):void 0};const G=R(y,[["__file","electron-accessing-files.md"]]);export{G as default};
