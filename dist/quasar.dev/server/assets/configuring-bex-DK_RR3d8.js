import{mergeProps as C,withCtx as i,createTextVNode as e,unref as d,createVNode as n,useSSRContext as B}from"vue";import{ssrRenderComponent as c}from"vue/server-renderer";import{c as h}from"./page-utils-C-QWsEHe.js";import{D as S,a as l}from"./DocPage-DKr-0pQn.js";import{D as k}from"./DocPrerender-DPOnWPFO.js";import{C as f}from"./CopyButton-l3ndfN49.js";import{_ as E}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const v={__name:"configuring-bex",__ssrInlineRender:!0,setup(g){const m=[{id:"ui-in-src",title:"2. UI in /src"},{id:"manifest-json",title:"3. Manifest.json"},{id:"background-and-content-scripts",title:"4. Background And Content Scripts"},{id:"css",title:"5. CSS"}];return(w,y,$,x)=>{y(c(S,C({title:"Configuring BEX",desc:"(@quasar/app-vite) How to manage your Browser Extensions with Quasar CLI.",overline:"Quasar CLI with Vite - @quasar/app-vite",heading:"","edit-link":"quasar-cli-vite/developing-browser-extensions/configuring-bex",toc:m},x),{default:i((X,a,p,t)=>{if(a)a(`<p${t}>Before we can configure anything, we need to understand how the BEX is structured. A BEX can be one (or more) of the following:</p><ol${t}><li${t}>Runs in its own tab in the browser</li><li${t}>Runs in the `),a(c(l,{to:"https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools"},{default:i((r,s,u,o)=>{if(s)s("Developer Tools");else return[e("Developer Tools")]}),_:1},p,t)),a(` window.</li><li${t}>Runs in a `),a(c(l,{to:"https://developer.chrome.com/docs/extensions/develop/ui#popups"},{default:i((r,s,u,o)=>{if(s)s("Popup");else return[e("Popup")]}),_:1},p,t)),a(` window.</li><li${t}>Runs as `),a(c(l,{to:"https://developer.chrome.com/docs/extensions/develop/ui/options-page"},{default:i((r,s,u,o)=>{if(s)s("Options");else return[e("Options")]}),_:1},p,t)),a(` window.</li><li${t}>Runs in the context of a web page (injected into a website)</li></ol><p${t}>You do not need a new Quasar App per BEX type above as a single Quasar Application can run in <strong${t}>all</strong> of the instances above. You can find out more about these in the `),a(c(l,{to:"/quasar-cli-vite/developing-browser-extensions/types-of-bex"},{default:i((r,s,u,o)=>{if(s)s("types section");else return[e("types section")]}),_:1},p,t)),a(`.</p><h2 id="ui-in-src" class="doc-heading doc-h2"${t}>UI in /src</h2><p${t}>Should you want to tamper with the Vite config for UI in /src:</p>`),a(c(d(k),{title:"/quasar.config file"},{default:i((r,s,u,o)=>{if(s)s(`<pre class="doc-code"${o}><code${o}>module<span class="token punctuation"${o}>.</span><span class="token function-variable function"${o}>exports</span> <span class="token operator"${o}>=</span> <span class="token keyword"${o}>function</span> <span class="token punctuation"${o}>(</span><span class="token parameter"${o}>ctx</span><span class="token punctuation"${o}>)</span> <span class="token punctuation"${o}>{</span>
  <span class="token keyword"${o}>return</span> <span class="token punctuation"${o}>{</span>
    <span class="token literal-property property"${o}>build</span><span class="token operator"${o}>:</span> <span class="token punctuation"${o}>{</span>
      <span class="token function"${o}>extendViteConf</span> <span class="token punctuation"${o}>(</span><span class="token parameter"${o}>viteConf</span><span class="token punctuation"${o}>)</span> <span class="token punctuation"${o}>{</span>
        <span class="token keyword"${o}>if</span> <span class="token punctuation"${o}>(</span>ctx<span class="token punctuation"${o}>.</span>mode<span class="token punctuation"${o}>.</span>bex<span class="token punctuation"${o}>)</span> <span class="token punctuation"${o}>{</span>
          <span class="token comment"${o}>// do something with ViteConf</span>
        <span class="token punctuation"${o}>}</span>
      <span class="token punctuation"${o}>}</span>
    <span class="token punctuation"${o}>}</span>
  <span class="token punctuation"${o}>}</span>
<span class="token punctuation"${o}>}</span></code></pre>`),s(c(f,null,null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("module"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"{"),e(`
      `),n("span",{class:"token function"},"extendViteConf"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"viteConf"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("ctx"),n("span",{class:"token punctuation"},"."),e("mode"),n("span",{class:"token punctuation"},"."),e("bex"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
          `),n("span",{class:"token comment"},"// do something with ViteConf"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
      `),n("span",{class:"token punctuation"},"}"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}")])]),n(f)]}),_:1},p,t)),a(`<p${t}>The UI files will be injected and available as <code class="doc-token"${t}>www</code> folder when you build (or develop) the browser extension.</p><h2 id="manifest-json" class="doc-heading doc-h2"${t}>Manifest.json</h2><p${t}>The most important config file for your BEX is <code class="doc-token"${t}>/src-bex/manifest.json</code>. It is recommended that you `),a(c(l,{to:"https://developer.chrome.com/extensions/manifest"},{default:i((r,s,u,o)=>{if(s)s("read up on this file");else return[e("read up on this file")]}),_:1},p,t)),a(` before starting your project.</p><p${t}>When you first add the BEX mode, you will get asked which Browser Extension Manifest version you like:</p>`),a(c(d(k),null,{default:i((r,s,u,o)=>{if(s)s(`<pre class="doc-code"${o}><code${o}>? What version of manifest would you like? (Use arrow keys)
❯ Manifest v2 (works with both Chrome and FF)
  Manifest v3 (works with Chrome only currently)</code></pre>`),s(c(f,null,null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,`? What version of manifest would you like? (Use arrow keys)
❯ Manifest v2 (works with both Chrome and FF)
  Manifest v3 (works with Chrome only currently)`)]),n(f)]}),_:1},p,t)),a(`<h2 id="background-and-content-scripts" class="doc-heading doc-h2"${t}>Background And Content Scripts</h2><p${t}>Behind every BEX is a `),a(c(l,{to:"https://developer.chrome.com/extensions/content_scripts"},{default:i((r,s,u,o)=>{if(s)s("content script");else return[e("content script")]}),_:1},p,t)),a(` and a background script / service-worker. It’s a good idea to understand what each of these are before writing your first BEX.</p><p${t}>In summary:</p><ul${t}><li${t}><strong${t}>Background Script</strong> - runs in the context of the BEX itself and can listen to all available browser extension events. There will only ever be one instance of each background script <em${t}>per BEX</em>.</li><li${t}><strong${t}>Content Script</strong> - runs in the context of the web page. There will be a new content script instance per tab running the extension.</li></ul><div class="doc-note doc-note--tip"${t}><p class="doc-note__title"${t}>TIP</p><p${t}>Given content scripts run in the web page context, this means that only BEX’s that interact with a web page can use content scripts. Popups, Options and Devtools <strong${t}>will not</strong> have a <em${t}>content script</em> running behind them. They will all however have a <em${t}>background script</em>.</p></div><div class="doc-note doc-note--warning"${t}><p class="doc-note__title"${t}>WARNING</p><p${t}>Service worker which is available in `),a(c(l,{to:"https://developer.chrome.com/docs/extensions/mv3/intro/"},{default:i((r,s,u,o)=>{if(s)s("Manifest v3");else return[e("Manifest v3")]}),_:1},p,t)),a(", is implemented in Quasar CLI with Vite only. More details "),a(c(l,{to:"https://github.com/quasarframework/quasar/discussions/8844"},{default:i((r,s,u,o)=>{if(s)s("here");else return[e("here")]}),_:1},p,t)),a(`.</p></div><h2 id="css" class="doc-heading doc-h2"${t}>CSS</h2><p${t}>Any styles you want to be made available to your web page (not your Quasar App) should be included in <code class="doc-token"${t}>src-bex/assets/content.css</code> as this file ia automatically injected into the <code class="doc-token"${t}>manifest.json</code> file.</p><div class="doc-note doc-note--warning"${t}><p class="doc-note__title"${t}>WARNING</p><p${t}>This must be native CSS as it’s not preprocessed via Sass.</p></div>`);else return[n("p",null,"Before we can configure anything, we need to understand how the BEX is structured. A BEX can be one (or more) of the following:"),n("ol",null,[n("li",null,"Runs in its own tab in the browser"),n("li",null,[e("Runs in the "),n(l,{to:"https://developer.chrome.com/docs/extensions/how-to/devtools/extend-devtools"},{default:i(()=>[e("Developer Tools")]),_:1}),e(" window.")]),n("li",null,[e("Runs in a "),n(l,{to:"https://developer.chrome.com/docs/extensions/develop/ui#popups"},{default:i(()=>[e("Popup")]),_:1}),e(" window.")]),n("li",null,[e("Runs as "),n(l,{to:"https://developer.chrome.com/docs/extensions/develop/ui/options-page"},{default:i(()=>[e("Options")]),_:1}),e(" window.")]),n("li",null,"Runs in the context of a web page (injected into a website)")]),n("p",null,[e("You do not need a new Quasar App per BEX type above as a single Quasar Application can run in "),n("strong",null,"all"),e(" of the instances above. You can find out more about these in the "),n(l,{to:"/quasar-cli-vite/developing-browser-extensions/types-of-bex"},{default:i(()=>[e("types section")]),_:1}),e(".")]),n("h2",{id:"ui-in-src",class:"doc-heading doc-h2",onClick:r=>d(h)("ui-in-src")},"UI in /src",8,["onClick"]),n("p",null,"Should you want to tamper with the Vite config for UI in /src:"),n(d(k),{title:"/quasar.config file"},{default:i(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("module"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),e(),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"function"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
  `),n("span",{class:"token keyword"},"return"),e(),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token punctuation"},"{"),e(`
      `),n("span",{class:"token function"},"extendViteConf"),e(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"viteConf"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
        `),n("span",{class:"token keyword"},"if"),e(),n("span",{class:"token punctuation"},"("),e("ctx"),n("span",{class:"token punctuation"},"."),e("mode"),n("span",{class:"token punctuation"},"."),e("bex"),n("span",{class:"token punctuation"},")"),e(),n("span",{class:"token punctuation"},"{"),e(`
          `),n("span",{class:"token comment"},"// do something with ViteConf"),e(`
        `),n("span",{class:"token punctuation"},"}"),e(`
      `),n("span",{class:"token punctuation"},"}"),e(`
    `),n("span",{class:"token punctuation"},"}"),e(`
  `),n("span",{class:"token punctuation"},"}"),e(`
`),n("span",{class:"token punctuation"},"}")])]),n(f)]),_:1}),n("p",null,[e("The UI files will be injected and available as "),n("code",{class:"doc-token"},"www"),e(" folder when you build (or develop) the browser extension.")]),n("h2",{id:"manifest-json",class:"doc-heading doc-h2",onClick:r=>d(h)("manifest-json")},"Manifest.json",8,["onClick"]),n("p",null,[e("The most important config file for your BEX is "),n("code",{class:"doc-token"},"/src-bex/manifest.json"),e(". It is recommended that you "),n(l,{to:"https://developer.chrome.com/extensions/manifest"},{default:i(()=>[e("read up on this file")]),_:1}),e(" before starting your project.")]),n("p",null,"When you first add the BEX mode, you will get asked which Browser Extension Manifest version you like:"),n(d(k),null,{default:i(()=>[n("pre",{class:"doc-code"},[n("code",null,`? What version of manifest would you like? (Use arrow keys)
❯ Manifest v2 (works with both Chrome and FF)
  Manifest v3 (works with Chrome only currently)`)]),n(f)]),_:1}),n("h2",{id:"background-and-content-scripts",class:"doc-heading doc-h2",onClick:r=>d(h)("background-and-content-scripts")},"Background And Content Scripts",8,["onClick"]),n("p",null,[e("Behind every BEX is a "),n(l,{to:"https://developer.chrome.com/extensions/content_scripts"},{default:i(()=>[e("content script")]),_:1}),e(" and a background script / service-worker. It’s a good idea to understand what each of these are before writing your first BEX.")]),n("p",null,"In summary:"),n("ul",null,[n("li",null,[n("strong",null,"Background Script"),e(" - runs in the context of the BEX itself and can listen to all available browser extension events. There will only ever be one instance of each background script "),n("em",null,"per BEX"),e(".")]),n("li",null,[n("strong",null,"Content Script"),e(" - runs in the context of the web page. There will be a new content script instance per tab running the extension.")])]),n("div",{class:"doc-note doc-note--tip"},[n("p",{class:"doc-note__title"},"TIP"),n("p",null,[e("Given content scripts run in the web page context, this means that only BEX’s that interact with a web page can use content scripts. Popups, Options and Devtools "),n("strong",null,"will not"),e(" have a "),n("em",null,"content script"),e(" running behind them. They will all however have a "),n("em",null,"background script"),e(".")])]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,[e("Service worker which is available in "),n(l,{to:"https://developer.chrome.com/docs/extensions/mv3/intro/"},{default:i(()=>[e("Manifest v3")]),_:1}),e(", is implemented in Quasar CLI with Vite only. More details "),n(l,{to:"https://github.com/quasarframework/quasar/discussions/8844"},{default:i(()=>[e("here")]),_:1}),e(".")])]),n("h2",{id:"css",class:"doc-heading doc-h2",onClick:r=>d(h)("css")},"CSS",8,["onClick"]),n("p",null,[e("Any styles you want to be made available to your web page (not your Quasar App) should be included in "),n("code",{class:"doc-token"},"src-bex/assets/content.css"),e(" as this file ia automatically injected into the "),n("code",{class:"doc-token"},"manifest.json"),e(" file.")]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,"This must be native CSS as it’s not preprocessed via Sass.")])]}),_:1},$))}}},b=v.setup;v.setup=(g,m)=>{const w=B();return(w.modules||(w.modules=new Set)).add("src/pages/quasar-cli-vite/developing-browser-extensions/configuring-bex.md"),b?b(g,m):void 0};const G=E(v,[["__file","configuring-bex.md"]]);export{G as default};
