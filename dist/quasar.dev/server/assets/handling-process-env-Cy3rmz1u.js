import{resolveComponent as C,mergeProps as D,withCtx as c,createVNode as n,createTextVNode as a,unref as l,useSSRContext as B}from"vue";import{ssrRenderComponent as p}from"vue/server-renderer";import{c as v}from"./page-utils-C-QWsEHe.js";import{D as F,a as h}from"./DocPage-DKr-0pQn.js";import{D as r}from"./DocPrerender-DPOnWPFO.js";import{C as e}from"./CopyButton-l3ndfN49.js";import{_ as T}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const q={__name:"handling-process-env",__ssrInlineRender:!0,setup(O){const y=[{id:"values-supplied-by-quasar-cli",title:"2. Values supplied by Quasar CLI"},{id:"example",title:"3. Example"},{id:"stripping-out-code",title:"4. Stripping out code"},{id:"import-based-on-process-env",title:"5. Import based on process.env"},{id:"adding-to-process-env",title:"6. Adding to process.env"},{id:"troubleshooting",title:"7. Troubleshooting"},{id:"wrong-usage",title:"7.1. Wrong usage",sub:!0},{id:"misconfiguration",title:"7.2. Misconfiguration",sub:!0}];return(b,E,A,M)=>{const x=C("q-markup-table"),f=C("q-tab-panel");E(p(F,D({title:"Handling process.env",desc:"(@quasar/app-webpack) How to differentiate the runtime procedure based on process.env in a Quasar app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/handling-process-env",toc:y},M),{default:c((N,i,m,o)=>{if(i)i(`<p${o}>Accessing <code class="doc-token"${o}>process.env</code> can help you in many ways:</p><ul${o}><li${o}>differentiating runtime procedure depending on Quasar Mode (SPA/PWA/Cordova/Electron)</li><li${o}>differentiating runtime procedure depending if running a dev or production build</li><li${o}>adding flags to it based on terminal environment variables at build time</li></ul><h2 id="values-supplied-by-quasar-cli" class="doc-heading doc-h2"${o}>Values supplied by Quasar CLI</h2>`),i(p(x,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:c((k,t,u,s)=>{if(t)t(`<thead${s}><tr${s}><th class="text-left"${s}><code class="doc-token"${s}>process∙env∙&lt;name&gt;</code></th><th class="text-left"${s}>Type</th><th class="text-left"${s}>Meaning</th></tr></thead><tbody${s}><tr${s}><td${s}><code class="doc-token"${s}>DEV</code></td><td${s}>Boolean</td><td${s}>Code runs in development mode</td></tr><tr${s}><td${s}><code class="doc-token"${s}>PROD</code></td><td${s}>Boolean</td><td${s}>Code runs in production mode</td></tr><tr${s}><td${s}><code class="doc-token"${s}>DEBUGGING</code></td><td${s}>Boolean</td><td${s}>Code runs in development mode or <code class="doc-token"${s}>--debug</code> flag was set for production mode</td></tr><tr${s}><td${s}><code class="doc-token"${s}>CLIENT</code></td><td${s}>Boolean</td><td${s}>Code runs on client (not on server)</td></tr><tr${s}><td${s}><code class="doc-token"${s}>SERVER</code></td><td${s}>Boolean</td><td${s}>Code runs on server (not on client)</td></tr><tr${s}><td${s}><code class="doc-token"${s}>MODE</code></td><td${s}>String</td><td${s}>Quasar CLI mode (<code class="doc-token"${s}>spa</code>, <code class="doc-token"${s}>pwa</code>, …)</td></tr><tr${s}><td${s}><code class="doc-token"${s}>NODE_ENV</code></td><td${s}>String</td><td${s}>Has two possible values: <code class="doc-token"${s}>production</code> or <code class="doc-token"${s}>development</code></td></tr></tbody>`);else return[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},[n("code",{class:"doc-token"},"process∙env∙<name>")]),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Meaning")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEV")]),n("td",null,"Boolean"),n("td",null,"Code runs in development mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"PROD")]),n("td",null,"Boolean"),n("td",null,"Code runs in production mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEBUGGING")]),n("td",null,"Boolean"),n("td",null,[a("Code runs in development mode or "),n("code",{class:"doc-token"},"--debug"),a(" flag was set for production mode")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"CLIENT")]),n("td",null,"Boolean"),n("td",null,"Code runs on client (not on server)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"SERVER")]),n("td",null,"Boolean"),n("td",null,"Code runs on server (not on client)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"MODE")]),n("td",null,"String"),n("td",null,[a("Quasar CLI mode ("),n("code",{class:"doc-token"},"spa"),a(", "),n("code",{class:"doc-token"},"pwa"),a(", …)")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"NODE_ENV")]),n("td",null,"String"),n("td",null,[a("Has two possible values: "),n("code",{class:"doc-token"},"production"),a(" or "),n("code",{class:"doc-token"},"development")])])])]}),_:1},m,o)),i(`<h2 id="example" class="doc-heading doc-h2"${o}>Example</h2>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>if</span> <span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>DEV</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token template-string"${s}><span class="token template-punctuation string"${s}>\`</span><span class="token string"${s}>I&#39;m on a development build</span><span class="token template-punctuation string"${s}>\`</span></span><span class="token punctuation"${s}>)</span>
<span class="token punctuation"${s}>}</span>

<span class="token comment"${s}>// process∙env∙MODE is the &lt;mode&gt; in</span>
<span class="token comment"${s}>// &quot;quasar dev/build -m &lt;mode&gt;&quot;</span>
<span class="token comment"${s}>// (defaults to &#39;spa&#39; if -m parameter is not specified)</span>

<span class="token keyword"${s}>if</span> <span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>MODE</span> <span class="token operator"${s}>===</span> <span class="token string"${s}>&#39;electron&#39;</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  <span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> BrowserWindow <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;@electron/remote&#39;</span><span class="token punctuation"${s}>)</span>
  <span class="token keyword"${s}>const</span> win <span class="token operator"${s}>=</span> BrowserWindow<span class="token punctuation"${s}>.</span><span class="token function"${s}>getFocusedWindow</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>

  <span class="token keyword"${s}>if</span> <span class="token punctuation"${s}>(</span>win<span class="token punctuation"${s}>.</span><span class="token function"${s}>isMaximized</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
    win<span class="token punctuation"${s}>.</span><span class="token function"${s}>unmaximize</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span>
  <span class="token keyword"${s}>else</span> <span class="token punctuation"${s}>{</span>
    win<span class="token punctuation"${s}>.</span><span class="token function"${s}>maximize</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"I'm on a development build"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token comment"},"// process∙env∙MODE is the <mode> in"),a(`
`),n("span",{class:"token comment"},'// "quasar dev/build -m <mode>"'),a(`
`),n("span",{class:"token comment"},"// (defaults to 'spa' if -m parameter is not specified)"),a(`

`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" BrowserWindow "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@electron/remote'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token keyword"},"const"),a(" win "),n("span",{class:"token operator"},"="),a(" BrowserWindow"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getFocusedWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("win"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isMaximized"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unmaximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"maximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<h2 id="stripping-out-code" class="doc-heading doc-h2"${o}>Stripping out code</h2><p${o}>When compiling your website/app, <code class="doc-token"${o}>if ()</code> branches depending on process.env are evaluated and if the expression is <code class="doc-token"${o}>false</code> then they get stripped out of the file. Example:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>if</span> <span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>DEV</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;dev&#39;</span><span class="token punctuation"${s}>)</span>
<span class="token punctuation"${s}>}</span>
<span class="token keyword"${s}>else</span> <span class="token punctuation"${s}>{</span>
  console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;build&#39;</span><span class="token punctuation"${s}>)</span>
<span class="token punctuation"${s}>}</span>

<span class="token comment"${s}>// running with &quot;quasar dev&quot; will result in:</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;dev&#39;</span><span class="token punctuation"${s}>)</span>
<span class="token comment"${s}>// while running with &quot;quasar build&quot; will result in:</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;build&#39;</span><span class="token punctuation"${s}>)</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token comment"},'// running with "quasar dev" will result in:'),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},'// while running with "quasar build" will result in:'),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")")])]),n(e)]}),_:1},m,o)),i(`<p${o}>Notice above that the <code class="doc-token"${o}>if</code>s are evaluated and also completely stripped out at compile-time, resulting in a smaller bundle.</p><h2 id="import-based-on-process-env" class="doc-heading doc-h2"${o}>Import based on process.env</h2><p${o}>You can combine what you learned in the section above with dynamic imports:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>if</span> <span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>MODE</span> <span class="token operator"${s}>===</span> <span class="token string"${s}>&#39;electron&#39;</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  <span class="token keyword"${s}>import</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;my-fancy-npm-package&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span><span class="token function"${s}>then</span><span class="token punctuation"${s}>(</span><span class="token parameter"${s}><span class="token keyword"${s}>package</span></span> <span class="token operator"${s}>=&gt;</span> <span class="token punctuation"${s}>{</span>
    <span class="token comment"${s}>// notice &quot;default&quot; below, which is the prop with which</span>
    <span class="token comment"${s}>// you can access what your npm imported package exports</span>
    <span class="token keyword"${s}>package</span><span class="token punctuation"${s}>.</span>default<span class="token punctuation"${s}>.</span><span class="token function"${s}>doSomething</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>
  <span class="token punctuation"${s}>}</span><span class="token punctuation"${s}>)</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'my-fancy-npm-package'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token keyword"},"package")]),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},'// notice "default" below, which is the prop with which'),a(`
    `),n("span",{class:"token comment"},"// you can access what your npm imported package exports"),a(`
    `),n("span",{class:"token keyword"},"package"),n("span",{class:"token punctuation"},"."),a("default"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<h2 id="adding-to-process-env" class="doc-heading doc-h2"${o}>Adding to process.env</h2><p${o}>You can add your own definitions to <code class="doc-token"${o}>process.env</code> through the <code class="doc-token"${o}>/quasar.config</code> file.</p><p${o}>But first, there’s two concepts that need to be understood here. The env variables from the terminal that are available in the <code class="doc-token"${o}>/quasar.config</code> file itself and the environment variables that you pass to your UI code.</p>`),i(p(l(r),{title:"/quasar.config file"},{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}>// Accessing terminal variables</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>)</span>

module<span class="token punctuation"${s}>.</span><span class="token function-variable function"${s}>exports</span> <span class="token operator"${s}>=</span> <span class="token keyword"${s}>function</span> <span class="token punctuation"${s}>(</span><span class="token parameter"${s}>ctx</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  <span class="token keyword"${s}>return</span> <span class="token punctuation"${s}>{</span>
    <span class="token comment"${s}>// ...</span>

    <span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
      <span class="token comment"${s}>// passing down to UI code from the quasar.config file</span>
      <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
        <span class="token constant"${s}>API</span><span class="token operator"${s}>:</span> ctx<span class="token punctuation"${s}>.</span>dev
          <span class="token operator"${s}>?</span> <span class="token string"${s}>&#39;https://dev.api.com&#39;</span>
          <span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;https://prod.api.com&#39;</span>
      <span class="token punctuation"${s}>}</span>
    <span class="token punctuation"${s}>}</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Accessing terminal variables"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},")"),a(`

module`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// ..."),a(`

    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// passing down to UI code from the quasar.config file"),a(`
      `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),a(" ctx"),n("span",{class:"token punctuation"},"."),a(`dev
          `),n("span",{class:"token operator"},"?"),a(),n("span",{class:"token string"},"'https://dev.api.com'"),a(`
          `),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'https://prod.api.com'"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<p${o}>Then in your website/app you can access <code class="doc-token"${o}>process∙env∙API</code> and it’s gonna point to one of those two links above, based on dev or production build type.</p><p${o}>You can even go one step further. Supply it with values taken from the <code class="doc-token"${o}>quasar dev/build</code> env variables:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}># we set an env variable in terminal</span>
$ <span class="token assign-left variable"${s}>MY_API</span><span class="token operator"${s}>=</span>api.com quasar build</code></pre>`),t(p(e,{lang:"bash"},null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"# we set an env variable in terminal"),a(`
$ `),n("span",{class:"token assign-left variable"},"MY_API"),n("span",{class:"token operator"},"="),a("api.com quasar build")])]),n(e,{lang:"bash"})]}),_:1},m,o)),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}>// then we pick it up in the /quasar.config file</span>
<span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token constant"${s}>API</span><span class="token operator"${s}>:</span> ctx<span class="token punctuation"${s}>.</span>dev
      <span class="token operator"${s}>?</span> <span class="token string"${s}>&#39;https://dev.&#39;</span> <span class="token operator"${s}>+</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>MY_API</span>
      <span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;https://prod.&#39;</span> <span class="token operator"${s}>+</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>MY_API</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// then we pick it up in the /quasar.config file"),a(`
`),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),a(" ctx"),n("span",{class:"token punctuation"},"."),a(`dev
      `),n("span",{class:"token operator"},"?"),a(),n("span",{class:"token string"},"'https://dev.'"),a(),n("span",{class:"token operator"},"+"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),a(`
      `),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'https://prod.'"),a(),n("span",{class:"token operator"},"+"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<h4 id="using-dotenv" class="doc-heading doc-h4"${o}>Using dotenv</h4><p${o}>Should you wish to use <code class="doc-token"${o}>.env</code> file(s), you can use the `),i(p(h,{to:"https://www.npmjs.com/package/dotenv"},{default:c((k,t,u,s)=>{if(t)t("dotenv");else return[a("dotenv")]}),_:1},m,o)),i(` package. The following is an example that passes env variables from the <code class="doc-token"${o}>.env</code> file to your UI code:</p>`),i(p(l(r),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:c((k,t,u,s)=>{if(t)t(p(f,{class:"q-pa-none",name:"Yarn"},{default:c((w,$,g,d)=>{if($)$(`<pre class="doc-code"${d}><code${d}>$ <span class="token function"${d}>yarn</span> <span class="token function"${d}>add</span> <span class="token parameter variable"${d}>--dev</span> dotenv</code></pre>`),$(p(e,{lang:"bash"},null,g,d));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]}),_:1},u,s)),t(p(f,{class:"q-pa-none",name:"NPM"},{default:c((w,$,g,d)=>{if($)$(`<pre class="doc-code"${d}><code${d}>$ <span class="token function"${d}>npm</span> <span class="token function"${d}>install</span> --save-dev dotenv</code></pre>`),$(p(e,{lang:"bash"},null,g,d));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev dotenv")])]),n(e,{lang:"bash"})]}),_:1},u,s)),t(p(f,{class:"q-pa-none",name:"PNPM"},{default:c((w,$,g,d)=>{if($)$(`<pre class="doc-code"${d}><code${d}>$ <span class="token function"${d}>pnpm</span> <span class="token function"${d}>add</span> <span class="token parameter variable"${d}>-D</span> dotenv</code></pre>`),$(p(e,{lang:"bash"},null,g,d));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" dotenv")])]),n(e,{lang:"bash"})]}),_:1},u,s)),t(p(f,{class:"q-pa-none",name:"Bun"},{default:c((w,$,g,d)=>{if($)$(`<pre class="doc-code"${d}><code${d}>$ bun <span class="token function"${d}>add</span> <span class="token parameter variable"${d}>--dev</span> dotenv</code></pre>`),$(p(e,{lang:"bash"},null,g,d));else return[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]}),_:1},u,s));else return[n(f,{class:"q-pa-none",name:"Yarn"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"NPM"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"PNPM"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"Bun"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1})]}),_:1},m,o)),i(`<p${o}>Then, in your <code class="doc-token"${o}>/quasar.config</code> file:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;dotenv&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span><span class="token function"${s}>config</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span>parsed
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),a(`parsed
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<p${o}>Be sure to read the `),i(p(h,{to:"https://www.npmjs.com/package/dotenv"},{default:c((k,t,u,s)=>{if(t)t("dotenv documentation");else return[a("dotenv documentation")]}),_:1},m,o)),i(` and create the necessary <code class="doc-token"${o}>.env</code> file(s) in the root of your Quasar CLI project.</p><p${o}>Note that the approach above will pass only what’s defined in the <code class="doc-token"${o}>.env</code> file and nothing else. So, the ones defined in the terminal(<em${o}>e.g. <code class="doc-token"${o}>MY_API=api.com quasar build</code></em>) will not be passed nor used to override the <code class="doc-token"${o}>.env</code> file.</p><p${o}>If you want to be able to override what’s inside <code class="doc-token"${o}>.env</code> or want to make the <code class="doc-token"${o}>.env</code> file completely optional, you have to follow another approach. If you are using CI/CD, Docker, etc. you probably don’t want to stay limited to the <code class="doc-token"${o}>.env</code> file. Here is an example:</p>`),i(p(l(r),{title:"/quasar.config file"},{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token comment"${s}>// This will load from \`.env\` if it exists, but not override existing \`process∙env∙*\` values</span>
<span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;dotenv&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span><span class="token function"${s}>config</span><span class="token punctuation"${s}>(</span><span class="token punctuation"${s}>)</span>

<span class="token comment"${s}>// process.env now contains the terminal variables and the ones from the .env file</span>
<span class="token comment"${s}>// Precedence:</span>
<span class="token comment"${s}>//   1. Terminal variables (API_URL=https://api.com quasar build)</span>
<span class="token comment"${s}>//   2. \`.env\` file</span>
<span class="token comment"${s}>// If you want .env file to override the terminal variables,</span>
<span class="token comment"${s}>// use \`require(&#39;dotenv&#39;).config({ override: true })\` instead</span>

<span class="token keyword"${s}>return</span> <span class="token punctuation"${s}>{</span>
<span class="token comment"${s}>// ...</span>
  <span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
      <span class="token comment"${s}>// You have to manually define all the variables you want to pass in</span>
      <span class="token constant"${s}>API_URL</span><span class="token operator"${s}>:</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>API_URL</span><span class="token punctuation"${s}>,</span>
      <span class="token comment"${s}>// ...</span>
    <span class="token punctuation"${s}>}</span>
  <span class="token punctuation"${s}>}</span>
<span class="token comment"${s}>// ...</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// This will load from `.env` if it exists, but not override existing `process∙env∙*` values"),a(`
`),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// process.env now contains the terminal variables and the ones from the .env file"),a(`
`),n("span",{class:"token comment"},"// Precedence:"),a(`
`),n("span",{class:"token comment"},"//   1. Terminal variables (API_URL=https://api.com quasar build)"),a(`
`),n("span",{class:"token comment"},"//   2. `.env` file"),a(`
`),n("span",{class:"token comment"},"// If you want .env file to override the terminal variables,"),a(`
`),n("span",{class:"token comment"},"// use `require('dotenv').config({ override: true })` instead"),a(`

`),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
`),n("span",{class:"token comment"},"// ..."),a(`
  `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// You have to manually define all the variables you want to pass in"),a(`
      `),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token operator"},":"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token comment"},"// ..."),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token comment"},"// ...")])]),n(e)]}),_:1},m,o)),i(`<h2 id="troubleshooting" class="doc-heading doc-h2"${o}>Troubleshooting</h2><p${o}>You might be getting <code class="doc-token"${o}>process is not defined</code> errors in the browser console if you are accessing the variables wrong or if you have a misconfiguration.</p><h3 id="wrong-usage" class="doc-heading doc-h3"${o}>Wrong usage</h3>`),i(p(l(r),{title:"/quasar.config file > build"},{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token constant"${s}>FOO</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;hello&#39;</span><span class="token punctuation"${s}>,</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token keyword"${s}>const</span> <span class="token punctuation"${s}>{</span> <span class="token constant"${s}>FOO</span> <span class="token punctuation"${s}>}</span> <span class="token operator"${s}>=</span> process<span class="token punctuation"${s}>.</span>env <span class="token comment"${s}>// ❌ It doesn&#39;t allow destructuring or similar</span>
process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>FOO</span>             <span class="token comment"${s}>// ✅ It can only replace direct usage like this</span>

<span class="token keyword"${s}>function</span> <span class="token function"${s}>getEnv</span><span class="token punctuation"${s}>(</span><span class="token parameter"${s}>name</span><span class="token punctuation"${s}>)</span> <span class="token punctuation"${s}>{</span>
  <span class="token keyword"${s}>return</span> process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>[</span>name<span class="token punctuation"${s}>]</span> <span class="token comment"${s}>// ❌ It can&#39;t analyze dynamic usage</span>
<span class="token punctuation"${s}>}</span>

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>)</span>     <span class="token comment"${s}>// ❌</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌</span>
<span class="token comment"${s}>// If you want to see a list of available env variables,</span>
<span class="token comment"${s}>// you can log the object you are passing to \`build &gt; env\` inside the \`/quasar.config\` file</span>

console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>FOO</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ✅</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span>foo<span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌ Case sensitive</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>F0O</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌ Typo in the variable name (middle o is 0(zero))</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token constant"},"FOO"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(" process"),n("span",{class:"token punctuation"},"."),a("env "),n("span",{class:"token comment"},"// ❌ It doesn't allow destructuring or similar"),a(`
process`),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),a("             "),n("span",{class:"token comment"},"// ✅ It can only replace direct usage like this"),a(`

`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"getEnv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"["),a("name"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token comment"},"// ❌ It can't analyze dynamic usage"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},")"),a("     "),n("span",{class:"token comment"},"// ❌"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌"),a(`
`),n("span",{class:"token comment"},"// If you want to see a list of available env variables,"),a(`
`),n("span",{class:"token comment"},"// you can log the object you are passing to `build > env` inside the `/quasar.config` file"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),a("foo"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ Case sensitive"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"F0O"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ Typo in the variable name (middle o is 0(zero))")])]),n(e)]}),_:1},m,o)),i(`<h3 id="misconfiguration" class="doc-heading doc-h3"${o}>Misconfiguration</h3><h4 id="manual-definition" class="doc-heading doc-h4"${o}>Manual definition</h4>`),i(p(l(r),{title:"/quasar.config file"},{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
    <span class="token constant"${s}>FOO</span><span class="token operator"${s}>:</span> <span class="token string"${s}>&#39;hello&#39;</span><span class="token punctuation"${s}>,</span>
  <span class="token punctuation"${s}>}</span>
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>FOO</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ✅</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>BAR</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌ It&#39;s not defined in \`build &gt; env\`</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ It's not defined in `build > env`")])]),n(e)]}),_:1},m,o)),i(`<h4 id="dotenv" class="doc-heading doc-h4"${o}>dotenv</h4>`),i(p(l(r),{title:"/quasar.config file"},{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token literal-property property"${s}>build</span><span class="token operator"${s}>:</span> <span class="token punctuation"${s}>{</span>
  <span class="token literal-property property"${s}>env</span><span class="token operator"${s}>:</span> <span class="token function"${s}>require</span><span class="token punctuation"${s}>(</span><span class="token string"${s}>&#39;dotenv&#39;</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span><span class="token function"${s}>config</span><span class="token punctuation"${s}>(</span><span class="token comment"${s}>/* ... */</span><span class="token punctuation"${s}>)</span><span class="token punctuation"${s}>.</span>parsed
<span class="token punctuation"${s}>}</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token comment"},"/* ... */"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),a(`parsed
`),n("span",{class:"token punctuation"},"}")])]),n(e)]}),_:1},m,o)),i(`<p${o}>If the <code class="doc-token"${o}>.env</code> doesn’t exist or there is a typo in the file name:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>FOO</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌ The .env file is not loaded, this will fail</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ The .env file is not loaded, this will fail")])]),n(e)]}),_:1},m,o)),i(`<p${o}>If the <code class="doc-token"${o}>.env</code> file exists with the correct name, and has the following content:</p>`),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}><span class="token assign-left variable"${s}>FOO</span><span class="token operator"${s}>=</span>hello</code></pre>`),t(p(e,{lang:"bash"},null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token assign-left variable"},"FOO"),n("span",{class:"token operator"},"="),a("hello")])]),n(e,{lang:"bash"})]}),_:1},m,o)),i(p(l(r),null,{default:c((k,t,u,s)=>{if(t)t(`<pre class="doc-code"${s}><code${s}>console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>FOO</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ✅ It&#39;s loaded correctly from the \`.env\` file</span>
console<span class="token punctuation"${s}>.</span><span class="token function"${s}>log</span><span class="token punctuation"${s}>(</span>process<span class="token punctuation"${s}>.</span>env<span class="token punctuation"${s}>.</span><span class="token constant"${s}>BAR</span><span class="token punctuation"${s}>)</span> <span class="token comment"${s}>// ❌ It&#39;s not defined in the \`.env\` file</span></code></pre>`),t(p(e,null,null,u,s));else return[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅ It's loaded correctly from the `.env` file"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ It's not defined in the `.env` file")])]),n(e)]}),_:1},m,o));else return[n("p",null,[a("Accessing "),n("code",{class:"doc-token"},"process.env"),a(" can help you in many ways:")]),n("ul",null,[n("li",null,"differentiating runtime procedure depending on Quasar Mode (SPA/PWA/Cordova/Electron)"),n("li",null,"differentiating runtime procedure depending if running a dev or production build"),n("li",null,"adding flags to it based on terminal environment variables at build time")]),n("h2",{id:"values-supplied-by-quasar-cli",class:"doc-heading doc-h2",onClick:k=>l(v)("values-supplied-by-quasar-cli")},"Values supplied by Quasar CLI",8,["onClick"]),n(x,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:c(()=>[n("thead",null,[n("tr",null,[n("th",{class:"text-left"},[n("code",{class:"doc-token"},"process∙env∙<name>")]),n("th",{class:"text-left"},"Type"),n("th",{class:"text-left"},"Meaning")])]),n("tbody",null,[n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEV")]),n("td",null,"Boolean"),n("td",null,"Code runs in development mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"PROD")]),n("td",null,"Boolean"),n("td",null,"Code runs in production mode")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"DEBUGGING")]),n("td",null,"Boolean"),n("td",null,[a("Code runs in development mode or "),n("code",{class:"doc-token"},"--debug"),a(" flag was set for production mode")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"CLIENT")]),n("td",null,"Boolean"),n("td",null,"Code runs on client (not on server)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"SERVER")]),n("td",null,"Boolean"),n("td",null,"Code runs on server (not on client)")]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"MODE")]),n("td",null,"String"),n("td",null,[a("Quasar CLI mode ("),n("code",{class:"doc-token"},"spa"),a(", "),n("code",{class:"doc-token"},"pwa"),a(", …)")])]),n("tr",null,[n("td",null,[n("code",{class:"doc-token"},"NODE_ENV")]),n("td",null,"String"),n("td",null,[a("Has two possible values: "),n("code",{class:"doc-token"},"production"),a(" or "),n("code",{class:"doc-token"},"development")])])])]),_:1}),n("h2",{id:"example",class:"doc-heading doc-h2",onClick:k=>l(v)("example")},"Example",8,["onClick"]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token template-string"},[n("span",{class:"token template-punctuation string"},"`"),n("span",{class:"token string"},"I'm on a development build"),n("span",{class:"token template-punctuation string"},"`")]),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token comment"},"// process∙env∙MODE is the <mode> in"),a(`
`),n("span",{class:"token comment"},'// "quasar dev/build -m <mode>"'),a(`
`),n("span",{class:"token comment"},"// (defaults to 'spa' if -m parameter is not specified)"),a(`

`),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(" BrowserWindow "),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'@electron/remote'"),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token keyword"},"const"),a(" win "),n("span",{class:"token operator"},"="),a(" BrowserWindow"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"getFocusedWindow"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

  `),n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("win"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"isMaximized"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unmaximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(`
    win`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"maximize"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("h2",{id:"stripping-out-code",class:"doc-heading doc-h2",onClick:k=>l(v)("stripping-out-code")},"Stripping out code",8,["onClick"]),n("p",null,[a("When compiling your website/app, "),n("code",{class:"doc-token"},"if ()"),a(" branches depending on process.env are evaluated and if the expression is "),n("code",{class:"doc-token"},"false"),a(" then they get stripped out of the file. Example:")]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"DEV"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token keyword"},"else"),a(),n("span",{class:"token punctuation"},"{"),a(`
  console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

`),n("span",{class:"token comment"},'// running with "quasar dev" will result in:'),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dev'"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token comment"},'// while running with "quasar build" will result in:'),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'build'"),n("span",{class:"token punctuation"},")")])]),n(e)]),_:1}),n("p",null,[a("Notice above that the "),n("code",{class:"doc-token"},"if"),a("s are evaluated and also completely stripped out at compile-time, resulting in a smaller bundle.")]),n("h2",{id:"import-based-on-process-env",class:"doc-heading doc-h2",onClick:k=>l(v)("import-based-on-process-env")},"Import based on process.env",8,["onClick"]),n("p",null,"You can combine what you learned in the section above with dynamic imports:"),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"if"),a(),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MODE"),a(),n("span",{class:"token operator"},"==="),a(),n("span",{class:"token string"},"'electron'"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"import"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'my-fancy-npm-package'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"then"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[n("span",{class:"token keyword"},"package")]),a(),n("span",{class:"token operator"},"=>"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},'// notice "default" below, which is the prop with which'),a(`
    `),n("span",{class:"token comment"},"// you can access what your npm imported package exports"),a(`
    `),n("span",{class:"token keyword"},"package"),n("span",{class:"token punctuation"},"."),a("default"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"doSomething"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`
  `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("h2",{id:"adding-to-process-env",class:"doc-heading doc-h2",onClick:k=>l(v)("adding-to-process-env")},"Adding to process.env",8,["onClick"]),n("p",null,[a("You can add your own definitions to "),n("code",{class:"doc-token"},"process.env"),a(" through the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file.")]),n("p",null,[a("But first, there’s two concepts that need to be understood here. The env variables from the terminal that are available in the "),n("code",{class:"doc-token"},"/quasar.config"),a(" file itself and the environment variables that you pass to your UI code.")]),n(l(r),{title:"/quasar.config file"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// Accessing terminal variables"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},")"),a(`

module`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function-variable function"},"exports"),a(),n("span",{class:"token operator"},"="),a(),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"ctx"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token comment"},"// ..."),a(`

    `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// passing down to UI code from the quasar.config file"),a(`
      `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
        `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),a(" ctx"),n("span",{class:"token punctuation"},"."),a(`dev
          `),n("span",{class:"token operator"},"?"),a(),n("span",{class:"token string"},"'https://dev.api.com'"),a(`
          `),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'https://prod.api.com'"),a(`
      `),n("span",{class:"token punctuation"},"}"),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("p",null,[a("Then in your website/app you can access "),n("code",{class:"doc-token"},"process∙env∙API"),a(" and it’s gonna point to one of those two links above, based on dev or production build type.")]),n("p",null,[a("You can even go one step further. Supply it with values taken from the "),n("code",{class:"doc-token"},"quasar dev/build"),a(" env variables:")]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"# we set an env variable in terminal"),a(`
$ `),n("span",{class:"token assign-left variable"},"MY_API"),n("span",{class:"token operator"},"="),a("api.com quasar build")])]),n(e,{lang:"bash"})]),_:1}),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// then we pick it up in the /quasar.config file"),a(`
`),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token constant"},"API"),n("span",{class:"token operator"},":"),a(" ctx"),n("span",{class:"token punctuation"},"."),a(`dev
      `),n("span",{class:"token operator"},"?"),a(),n("span",{class:"token string"},"'https://dev.'"),a(),n("span",{class:"token operator"},"+"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),a(`
      `),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'https://prod.'"),a(),n("span",{class:"token operator"},"+"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"MY_API"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("h4",{id:"using-dotenv",class:"doc-heading doc-h4",onClick:k=>l(v)("using-dotenv")},"Using dotenv",8,["onClick"]),n("p",null,[a("Should you wish to use "),n("code",{class:"doc-token"},".env"),a(" file(s), you can use the "),n(h,{to:"https://www.npmjs.com/package/dotenv"},{default:c(()=>[a("dotenv")]),_:1}),a(" package. The following is an example that passes env variables from the "),n("code",{class:"doc-token"},".env"),a(" file to your UI code:")]),n(l(r),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:c(()=>[n(f,{class:"q-pa-none",name:"Yarn"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"yarn"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"NPM"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"npm"),a(),n("span",{class:"token function"},"install"),a(" --save-dev dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"PNPM"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ "),n("span",{class:"token function"},"pnpm"),a(),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"-D"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"Bun"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("$ bun "),n("span",{class:"token function"},"add"),a(),n("span",{class:"token parameter variable"},"--dev"),a(" dotenv")])]),n(e,{lang:"bash"})]),_:1})]),_:1}),n("p",null,[a("Then, in your "),n("code",{class:"doc-token"},"/quasar.config"),a(" file:")]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),a(`parsed
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("p",null,[a("Be sure to read the "),n(h,{to:"https://www.npmjs.com/package/dotenv"},{default:c(()=>[a("dotenv documentation")]),_:1}),a(" and create the necessary "),n("code",{class:"doc-token"},".env"),a(" file(s) in the root of your Quasar CLI project.")]),n("p",null,[a("Note that the approach above will pass only what’s defined in the "),n("code",{class:"doc-token"},".env"),a(" file and nothing else. So, the ones defined in the terminal("),n("em",null,[a("e.g. "),n("code",{class:"doc-token"},"MY_API=api.com quasar build")]),a(") will not be passed nor used to override the "),n("code",{class:"doc-token"},".env"),a(" file.")]),n("p",null,[a("If you want to be able to override what’s inside "),n("code",{class:"doc-token"},".env"),a(" or want to make the "),n("code",{class:"doc-token"},".env"),a(" file completely optional, you have to follow another approach. If you are using CI/CD, Docker, etc. you probably don’t want to stay limited to the "),n("code",{class:"doc-token"},".env"),a(" file. Here is an example:")]),n(l(r),{title:"/quasar.config file"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// This will load from `.env` if it exists, but not override existing `process∙env∙*` values"),a(`
`),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),a(`

`),n("span",{class:"token comment"},"// process.env now contains the terminal variables and the ones from the .env file"),a(`
`),n("span",{class:"token comment"},"// Precedence:"),a(`
`),n("span",{class:"token comment"},"//   1. Terminal variables (API_URL=https://api.com quasar build)"),a(`
`),n("span",{class:"token comment"},"//   2. `.env` file"),a(`
`),n("span",{class:"token comment"},"// If you want .env file to override the terminal variables,"),a(`
`),n("span",{class:"token comment"},"// use `require('dotenv').config({ override: true })` instead"),a(`

`),n("span",{class:"token keyword"},"return"),a(),n("span",{class:"token punctuation"},"{"),a(`
`),n("span",{class:"token comment"},"// ..."),a(`
  `),n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
      `),n("span",{class:"token comment"},"// You have to manually define all the variables you want to pass in"),a(`
      `),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token operator"},":"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"API_URL"),n("span",{class:"token punctuation"},","),a(`
      `),n("span",{class:"token comment"},"// ..."),a(`
    `),n("span",{class:"token punctuation"},"}"),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token comment"},"// ...")])]),n(e)]),_:1}),n("h2",{id:"troubleshooting",class:"doc-heading doc-h2",onClick:k=>l(v)("troubleshooting")},"Troubleshooting",8,["onClick"]),n("p",null,[a("You might be getting "),n("code",{class:"doc-token"},"process is not defined"),a(" errors in the browser console if you are accessing the variables wrong or if you have a misconfiguration.")]),n("h3",{id:"wrong-usage",class:"doc-heading doc-h3",onClick:k=>l(v)("wrong-usage")},"Wrong usage",8,["onClick"]),n(l(r),{title:"/quasar.config file > build"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),a(),n("span",{class:"token punctuation"},"{"),a(),n("span",{class:"token constant"},"FOO"),a(),n("span",{class:"token punctuation"},"}"),a(),n("span",{class:"token operator"},"="),a(" process"),n("span",{class:"token punctuation"},"."),a("env "),n("span",{class:"token comment"},"// ❌ It doesn't allow destructuring or similar"),a(`
process`),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),a("             "),n("span",{class:"token comment"},"// ✅ It can only replace direct usage like this"),a(`

`),n("span",{class:"token keyword"},"function"),a(),n("span",{class:"token function"},"getEnv"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"name"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token keyword"},"return"),a(" process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"["),a("name"),n("span",{class:"token punctuation"},"]"),a(),n("span",{class:"token comment"},"// ❌ It can't analyze dynamic usage"),a(`
`),n("span",{class:"token punctuation"},"}"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},")"),a("     "),n("span",{class:"token comment"},"// ❌"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌"),a(`
`),n("span",{class:"token comment"},"// If you want to see a list of available env variables,"),a(`
`),n("span",{class:"token comment"},"// you can log the object you are passing to `build > env` inside the `/quasar.config` file"),a(`

console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),a("foo"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ Case sensitive"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"F0O"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ Typo in the variable name (middle o is 0(zero))")])]),n(e)]),_:1}),n("h3",{id:"misconfiguration",class:"doc-heading doc-h3",onClick:k=>l(v)("misconfiguration")},"Misconfiguration",8,["onClick"]),n("h4",{id:"manual-definition",class:"doc-heading doc-h4",onClick:k=>l(v)("manual-definition")},"Manual definition",8,["onClick"]),n(l(r),{title:"/quasar.config file"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
    `),n("span",{class:"token constant"},"FOO"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token string"},"'hello'"),n("span",{class:"token punctuation"},","),a(`
  `),n("span",{class:"token punctuation"},"}"),a(`
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ It's not defined in `build > env`")])]),n(e)]),_:1}),n("h4",{id:"dotenv",class:"doc-heading doc-h4",onClick:k=>l(v)("dotenv")},"dotenv",8,["onClick"]),n(l(r),{title:"/quasar.config file"},{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token literal-property property"},"build"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token punctuation"},"{"),a(`
  `),n("span",{class:"token literal-property property"},"env"),n("span",{class:"token operator"},":"),a(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'dotenv'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"config"),n("span",{class:"token punctuation"},"("),n("span",{class:"token comment"},"/* ... */"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),a(`parsed
`),n("span",{class:"token punctuation"},"}")])]),n(e)]),_:1}),n("p",null,[a("If the "),n("code",{class:"doc-token"},".env"),a(" doesn’t exist or there is a typo in the file name:")]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ The .env file is not loaded, this will fail")])]),n(e)]),_:1}),n("p",null,[a("If the "),n("code",{class:"doc-token"},".env"),a(" file exists with the correct name, and has the following content:")]),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token assign-left variable"},"FOO"),n("span",{class:"token operator"},"="),a("hello")])]),n(e,{lang:"bash"})]),_:1}),n(l(r),null,{default:c(()=>[n("pre",{class:"doc-code"},[n("code",null,[a("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"FOO"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ✅ It's loaded correctly from the `.env` file"),a(`
console`),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),a("process"),n("span",{class:"token punctuation"},"."),a("env"),n("span",{class:"token punctuation"},"."),n("span",{class:"token constant"},"BAR"),n("span",{class:"token punctuation"},")"),a(),n("span",{class:"token comment"},"// ❌ It's not defined in the `.env` file")])]),n(e)]),_:1})]}),_:1},A))}}},P=q.setup;q.setup=(O,y)=>{const b=B();return(b.modules||(b.modules=new Set)).add("src/pages/quasar-cli-webpack/handling-process-env.md"),P?P(O,y):void 0};const X=T(q,[["__file","handling-process-env.md"]]);export{X as default};
