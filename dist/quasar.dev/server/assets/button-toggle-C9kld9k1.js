import{provide as y,mergeProps as k,withCtx as C,createVNode as o,unref as l,createTextVNode as i,useSSRContext as B}from"vue";import{ssrRenderComponent as s}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D as T}from"./DocPage-DKr-0pQn.js";import{D as n}from"./DocExample-BcaABDtE.js";import{D as h}from"./DocApi-Df9ryd6x.js";import{_ as $}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const m={__name:"button-toggle",__ssrInlineRender:!0,setup(g){y("_q_ex",{name:"QBtnToggle"});const u=[{name:"Button",category:"Buttons",path:"/vue-components/button"},{name:"Tabs",category:"Vue Components",path:"/vue-components/tabs"},{name:"Option Group",category:"Form Components",path:"/vue-components/option-group"},{name:"Radio",category:"Form Components",path:"/vue-components/radio"},{name:"Checkbox",category:"Form Components",path:"/vue-components/checkbox"},{name:"Toggle",category:"Form Components",path:"/vue-components/toggle"}],r=[{id:"qbtntoggle-api",title:"2. QBtnToggle API",deep:!0},{id:"usage",title:"3. Usage"},{id:"basic",title:"3.1. Basic",sub:!0},{id:"design",title:"3.2. Design",sub:!0},{id:"custom-content",title:"3.3. Custom content",sub:!0},{id:"disable-and-readonly",title:"3.4. Disable and readonly",sub:!0},{id:"native-form-submit",title:"3.5. Native form submit",sub:!0}];return(Q,b,f,v)=>{b(s(T,k({title:"Button Toggle",desc:"The QBtnToggle Vue component is a basic element for user input, similar to QRadio but with buttons.",heading:"","edit-link":"vue-components/button-toggle",toc:r,related:u},v),{default:C((w,t,a,e)=>{if(t)t(`<p${e}>The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices.</p>`),t(s(h,{file:"QBtnToggle"},null,a,e)),t(`<h2 id="usage" class="doc-heading doc-h2"${e}>Usage</h2><h3 id="basic" class="doc-heading doc-h3"${e}>Basic</h3>`),t(s(n,{title:"Basic",file:"Basic"},null,a,e)),t(`<h3 id="design" class="doc-heading doc-h3"${e}>Design</h3><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Since QBtnToggle uses QBtn, you can use design related props of QBtn to style this component.</p></div>`),t(s(n,{title:"Some design examples",file:"Design"},null,a,e)),t(s(n,{title:"Spread horizontally",file:"Spread"},null,a,e)),t(`<h3 id="custom-content" class="doc-heading doc-h3"${e}>Custom content</h3><p${e}>First QBtnToggle below has tooltips on each button. Second QBtnToggle has customized the content. Notice the <code class="doc-token"${e}>slot</code> prop in the <code class="doc-token"${e}>options</code> Object definition. When you use this <code class="doc-token"${e}>slot</code> prop, you don’t necessary need the <code class="doc-token"${e}>label</code> / <code class="doc-token"${e}>icon</code> props in <code class="doc-token"${e}>options</code>.</p>`),t(s(n,{title:"Custom buttons content",file:"CustomContent"},null,a,e)),t(`<h3 id="disable-and-readonly" class="doc-heading doc-h3"${e}>Disable and readonly</h3>`),t(s(n,{title:"Disable and readonly",file:"DisableReadonly"},null,a,e)),t(`<h3 id="native-form-submit" class="doc-heading doc-h3"${e}>Native form submit</h3><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QBtnToggle, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):</p>`),t(s(n,{title:"Native form",file:"NativeForm"},null,a,e));else return[o("p",null,"The QBtnToggle component is another basic element for user input, similar to QRadio but with buttons. You can use this to supply a way for the user to pick an option from multiple choices."),o(h,{file:"QBtnToggle"}),o("h2",{id:"usage",class:"doc-heading doc-h2",onClick:d=>l(c)("usage")},"Usage",8,["onClick"]),o("h3",{id:"basic",class:"doc-heading doc-h3",onClick:d=>l(c)("basic")},"Basic",8,["onClick"]),o(n,{title:"Basic",file:"Basic"}),o("h3",{id:"design",class:"doc-heading doc-h3",onClick:d=>l(c)("design")},"Design",8,["onClick"]),o("div",{class:"doc-note doc-note--tip"},[o("p",{class:"doc-note__title"},"TIP"),o("p",null,"Since QBtnToggle uses QBtn, you can use design related props of QBtn to style this component.")]),o(n,{title:"Some design examples",file:"Design"}),o(n,{title:"Spread horizontally",file:"Spread"}),o("h3",{id:"custom-content",class:"doc-heading doc-h3",onClick:d=>l(c)("custom-content")},"Custom content",8,["onClick"]),o("p",null,[i("First QBtnToggle below has tooltips on each button. Second QBtnToggle has customized the content. Notice the "),o("code",{class:"doc-token"},"slot"),i(" prop in the "),o("code",{class:"doc-token"},"options"),i(" Object definition. When you use this "),o("code",{class:"doc-token"},"slot"),i(" prop, you don’t necessary need the "),o("code",{class:"doc-token"},"label"),i(" / "),o("code",{class:"doc-token"},"icon"),i(" props in "),o("code",{class:"doc-token"},"options"),i(".")]),o(n,{title:"Custom buttons content",file:"CustomContent"}),o("h3",{id:"disable-and-readonly",class:"doc-heading doc-h3",onClick:d=>l(c)("disable-and-readonly")},"Disable and readonly",8,["onClick"]),o(n,{title:"Disable and readonly",file:"DisableReadonly"}),o("h3",{id:"native-form-submit",class:"doc-heading doc-h3",onClick:d=>l(c)("native-form-submit")},"Native form submit",8,["onClick"]),o("p",null,[i("When dealing with a native form which has an "),o("code",{class:"doc-token"},"action"),i(" and a "),o("code",{class:"doc-token"},"method"),i(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),o("code",{class:"doc-token"},"name"),i(" property on QBtnToggle, otherwise formData will not contain it (if it should) - all value are converted to string (native behaviour, so do not use Object values):")]),o(n,{title:"Native form",file:"NativeForm"})]}),_:1},f))}}},p=m.setup;m.setup=(g,u)=>{const r=B();return(r.modules||(r.modules=new Set)).add("src/pages/vue-components/button-toggle.md"),p?p(g,u):void 0};const K=$(m,[["__file","button-toggle.md"]]);export{K as default};
