import{provide as T,resolveComponent as Q,mergeProps as F,withCtx as p,createTextVNode as a,createVNode as t,unref as r,useSSRContext as V}from"vue";import{ssrRenderComponent as l}from"vue/server-renderer";import{c as d}from"./page-utils-C-QWsEHe.js";import{D as A,a as h}from"./DocPage-DKr-0pQn.js";import{D as o}from"./DocExample-BcaABDtE.js";import{D as w}from"./DocApi-Df9ryd6x.js";import{D as f}from"./DocPrerender-DPOnWPFO.js";import{C as m}from"./CopyButton-l3ndfN49.js";import{_ as D}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const v={__name:"input",__ssrInlineRender:!0,setup(y){T("_q_ex",{name:"QInput"});const $=[{id:"qinput-api",title:"2. QInput API",deep:!0},{id:"design",title:"3. Design"},{id:"coloring",title:"3.1. Coloring",sub:!0},{id:"standard",title:"3.2. Standard",sub:!0},{id:"filled",title:"3.3. Filled",sub:!0},{id:"outlined",title:"3.4. Outlined",sub:!0},{id:"standout",title:"3.5. Standout",sub:!0},{id:"borderless",title:"3.6. Borderless",sub:!0},{id:"rounded-design",title:"3.7. Rounded design",sub:!0},{id:"square-borders",title:"3.8. Square borders",sub:!0},{id:"force-dark-mode",title:"3.9. Force dark mode",sub:!0},{id:"basic-features",title:"4. Basic features"},{id:"native-attributes",title:"4.1. Native attributes",sub:!0},{id:"clearable",title:"4.2. Clearable",sub:!0},{id:"input-types",title:"4.3. Input types",sub:!0},{id:"textarea",title:"4.4. Textarea",sub:!0},{id:"prefix-and-suffix",title:"4.5. Prefix and suffix",sub:!0},{id:"custom-label",title:"4.6. Custom Label",sub:!0},{id:"shadow-text",title:"4.7. Shadow text",sub:!0},{id:"slots-with-qbtn-type-submit",title:"4.8. Slots with QBtn type “submit”",sub:!0},{id:"debouncing-model",title:"4.9. Debouncing model",sub:!0},{id:"loading-state",title:"4.10. Loading state",sub:!0},{id:"mask",title:"5. Mask"},{id:"using-third-party-mask-processors",title:"5.1. Using third party mask processors",sub:!0},{id:"validation",title:"6. Validation"},{id:"internal-validation",title:"6.1. Internal validation",sub:!0},{id:"external-validation",title:"6.2. External validation",sub:!0},{id:"native-form-submit",title:"7. Native form submit"}];return(g,x,C,S)=>{const b=Q("q-markup-table");x(l(A,F({title:"Input",desc:"The QInput Vue component is used to capture text input from the user.",heading:"","edit-link":"vue-components/input",toc:$},S),{default:p((N,s,c,e)=>{if(s)s(`<p${e}>The QInput component is used to capture text input from the user. It uses <code class="doc-token"${e}>v-model</code>, similar to a regular input. It has support for errors and validation, and comes in a variety of styles, colors, and types.</p>`),s(l(w,{file:"QInput"},null,c,e)),s(`<h2 id="design" class="doc-heading doc-h2"${e}>Design</h2><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>For your QInput you can use only one of the main designs (<code class="doc-token"${e}>filled</code>, <code class="doc-token"${e}>outlined</code>, <code class="doc-token"${e}>standout</code>, <code class="doc-token"${e}>borderless</code>). You cannot use multiple as they are self-exclusive.</p></div>`),s(l(o,{title:"Design Overview",file:"DesignOverview"},null,c,e)),s(`<h3 id="coloring" class="doc-heading doc-h3"${e}>Coloring</h3>`),s(l(o,{title:"Coloring",file:"Coloring"},null,c,e)),s(`<h3 id="standard" class="doc-heading doc-h3"${e}>Standard</h3>`),s(l(o,{title:"Standard",file:"DesignStandard"},null,c,e)),s(`<h3 id="filled" class="doc-heading doc-h3"${e}>Filled</h3>`),s(l(o,{title:"Filled",file:"DesignFilled"},null,c,e)),s(`<h3 id="outlined" class="doc-heading doc-h3"${e}>Outlined</h3>`),s(l(o,{title:"Outlined",file:"DesignOutlined"},null,c,e)),s(`<h3 id="standout" class="doc-heading doc-h3"${e}>Standout</h3>`),s(l(o,{title:"Standout",file:"DesignStandout"},null,c,e)),s(`<p${e}>One of the most appropriate use cases for Standout design is in a QToolbar:</p>`),s(l(o,{title:"Standout in QToolbar",file:"StandoutToolbar"},null,c,e)),s(`<h3 id="borderless" class="doc-heading doc-h3"${e}>Borderless</h3><p${e}>The <code class="doc-token"${e}>borderless</code> design allows you to seamlessly integrate your QInput into other components without QInput drawing a border around itself or changing its background color:</p>`),s(l(o,{title:"Borderless",file:"Borderless"},null,c,e)),s(`<h3 id="rounded-design" class="doc-heading doc-h3"${e}>Rounded design</h3><p${e}>The <code class="doc-token"${e}>rounded</code> prop only works along with Filled, Outlined and Standout designs, as showcased in the example below:</p>`),s(l(o,{title:"Rounded",file:"Rounded"},null,c,e)),s(`<h3 id="square-borders" class="doc-heading doc-h3"${e}>Square borders</h3><p${e}>The <code class="doc-token"${e}>square</code> prop only makes sense along with Filled, Outlined and Standout designs, as showcased in the example below:</p>`),s(l(o,{title:"Square borders",file:"SquareBorders"},null,c,e)),s(`<h3 id="force-dark-mode" class="doc-heading doc-h3"${e}>Force dark mode</h3>`),s(l(o,{title:"Force dark mode",file:"Dark"},null,c,e)),s(`<h2 id="basic-features" class="doc-heading doc-h2"${e}>Basic features</h2><h3 id="native-attributes" class="doc-heading doc-h3"${e}>Native attributes</h3><p${e}>All the attributes set on <code class="doc-token"${e}>QInput</code> that are not in the list of <code class="doc-token"${e}>props</code> in the <strong${e}>API</strong> will be passed to the native field (<code class="doc-token"${e}>input</code> or <code class="doc-token"${e}>textarea</code>). Some examples: autocomplete, placeholder.</p><p${e}>Please check these resources for more information about native attributes (for input check also the specific attributes for each type):</p><ul${e}><li${e}>`),s(l(h,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"},{default:p((u,i,k,n)=>{if(i)i("input");else return[a("input")]}),_:1},c,e)),s(`</li><li${e}>`),s(l(h,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"},{default:p((u,i,k,n)=>{if(i)i("textarea");else return[a("textarea")]}),_:1},c,e)),s(`</li></ul><h3 id="clearable" class="doc-heading doc-h3"${e}>Clearable</h3><p${e}>As a helper, you can use <code class="doc-token"${e}>clearable</code> prop so user can reset model to <code class="doc-token"${e}>null</code> through an appended icon. The second QInput in the example below is the equivalent of using <code class="doc-token"${e}>clearable</code>.</p><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Won’t work with <code class="doc-token"${e}>v-model</code> managed input modifiers such as <code class="doc-token"${e}>.trim</code> because in that case Vue doesn’t handle <code class="doc-token"${e}>null</code> values.</p></div>`),s(l(o,{title:"Clearable",file:"Clearable"},null,c,e)),s(`<h3 id="input-types" class="doc-heading doc-h3"${e}>Input types</h3><p${e}>The following QInputs make use of the <code class="doc-token"${e}>type</code> prop in order to render native equivalent <code class="doc-token"${e}>&lt;input type=&quot;...&quot;&gt;</code> inside of them.</p><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Support and behavior is the subject entirely of the browser rendering the page and not Quasar’s core code.</p></div>`),s(l(o,{title:"Input types",file:"InputTypes"},null,c,e)),s(`<div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Some input types (like <code class="doc-token"${e}>date</code> or <code class="doc-token"${e}>time</code>) always render some controls, so you if you’re using a <code class="doc-token"${e}>label</code> then you might want to set it along with <code class="doc-token"${e}>stack-label</code>, otherwise the label will overlap native browser controls.</p></div><h4 id="input-of-number-type" class="doc-heading doc-h4"${e}>Input of number type</h4><p${e}>You’ll be using <code class="doc-token"${e}>v-model.number</code> (notice the <code class="doc-token"${e}>number</code> modifier) along with <code class="doc-token"${e}>type=&quot;number&quot;</code> prop:</p>`),s(l(o,{title:"Input of number type",file:"InputTypeNumber"},null,c,e)),s(`<h4 id="input-of-file-type" class="doc-heading doc-h4"${e}>Input of file type</h4><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>ALTERNATIVES</p><p${e}><strong${e}>Instead of using a QInput with <code class="doc-token"${e}>type=&quot;file&quot;</code>, you might want to use `),s(l(h,{to:"/vue-components/file"},{default:p((u,i,k,n)=>{if(i)i("QFile");else return[a("QFile")]}),_:1},c,e)),s(" picker instead or even "),s(l(h,{to:"/vue-components/uploader"},{default:p((u,i,k,n)=>{if(i)i("QUploader");else return[a("QUploader")]}),_:1},c,e)),s(`</strong>. However, should you wish to use QInput, please read the warning below.</p></div><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Do NOT use a <code class="doc-token"${e}>v-model</code> when QInput is of <code class="doc-token"${e}>type=&quot;file&quot;</code>. Browser security policy does not allow a value to be set to such an input. As a result, you can only read it (attach an <code class="doc-token"${e}>@update:model-value</code> event), but not write it.</p></div>`),s(l(o,{title:"Input of file type",file:"InputTypeFile"},null,c,e)),s(`<h3 id="textarea" class="doc-heading doc-h3"${e}>Textarea</h3>`),s(l(o,{title:"Textarea",file:"Textarea"},null,c,e)),s(`<p${e}>When you need QInput to grow along with its content, then use the <code class="doc-token"${e}>autogrow</code> prop like in the example below:</p>`),s(l(o,{title:"Autogrow",file:"Autogrow"},null,c,e)),s(`<h3 id="prefix-and-suffix" class="doc-heading doc-h3"${e}>Prefix and suffix</h3>`),s(l(o,{title:"Prefix and suffix",file:"PrefixSuffix"},null,c,e)),s(`<h3 id="custom-label" class="doc-heading doc-h3"${e}>Custom Label</h3><p${e}>Using the <code class="doc-token"${e}>label</code> slot you can customize the aspect of the label or add special features as <code class="doc-token"${e}>QTooltip</code>.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Do not forget to set the <code class="doc-token"${e}>label-slot</code> property.</p><p${e}>If you want to interact with the content of the label (QTooltip) add the <code class="doc-token"${e}>all-pointer-events</code> class on the element in the slot.</p></div>`),s(l(o,{title:"Custom label",file:"CustomLabel"},null,c,e)),s(`<h3 id="shadow-text" class="doc-heading doc-h3"${e}>Shadow text</h3>`),s(l(o,{title:"Shadow text",file:"ShadowText"},null,c,e)),s(`<h3 id="slots-with-qbtn-type-submit" class="doc-heading doc-h3"${e}>Slots with QBtn type “submit”</h3><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a <code class="doc-token"${e}>@click</code> listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.</p></div><h3 id="debouncing-model" class="doc-heading doc-h3"${e}>Debouncing model</h3><p${e}>The role of debouncing is for times when you watch the model and do expensive operations on it. So you want to first let user type out before triggering the model update, rather than updating the model on each keystroke.</p>`),s(l(o,{title:"Debounce model",file:"Debouncing"},null,c,e)),s(`<h3 id="loading-state" class="doc-heading doc-h3"${e}>Loading state</h3>`),s(l(o,{title:"Loading state",file:"LoadingState"},null,c,e)),s(`<h2 id="mask" class="doc-heading doc-h2"${e}>Mask</h2><p${e}>You can force/help the user to input a specific format with help from <code class="doc-token"${e}>mask</code> prop.</p><div class="doc-note doc-note--warning"${e}><p class="doc-note__title"${e}>WARNING</p><p${e}>Mask is only available if the <code class="doc-token"${e}>type</code> is one of ‘text’ (default), ‘search’, ‘url’, ‘tel’, or ‘password’.</p></div><p${e}>Below are mask tokens:</p>`),s(l(b,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:p((u,i,k,n)=>{if(i)i(`<thead${n}><tr${n}><th class="text-left"${n}>Token</th><th class="text-left"${n}>Description</th></tr></thead><tbody${n}><tr${n}><td${n}><code class="doc-token"${n}>#</code></td><td${n}>Numeric</td></tr><tr${n}><td${n}><code class="doc-token"${n}>S</code></td><td${n}>Letter, a to z, case insensitive</td></tr><tr${n}><td${n}><code class="doc-token"${n}>N</code></td><td${n}>Alphanumeric, case insensitive for letters</td></tr><tr${n}><td${n}><code class="doc-token"${n}>A</code></td><td${n}>Letter, transformed to uppercase</td></tr><tr${n}><td${n}><code class="doc-token"${n}>a</code></td><td${n}>Letter, transformed to lowercase</td></tr><tr${n}><td${n}><code class="doc-token"${n}>X</code></td><td${n}>Alphanumeric, transformed to uppercase for letters</td></tr><tr${n}><td${n}><code class="doc-token"${n}>x</code></td><td${n}>Alphanumeric, transformed to lowercase for letters</td></tr></tbody>`);else return[t("thead",null,[t("tr",null,[t("th",{class:"text-left"},"Token"),t("th",{class:"text-left"},"Description")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"#")]),t("td",null,"Numeric")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"S")]),t("td",null,"Letter, a to z, case insensitive")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"N")]),t("td",null,"Alphanumeric, case insensitive for letters")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"A")]),t("td",null,"Letter, transformed to uppercase")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"a")]),t("td",null,"Letter, transformed to lowercase")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"X")]),t("td",null,"Alphanumeric, transformed to uppercase for letters")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"x")]),t("td",null,"Alphanumeric, transformed to lowercase for letters")])])]}),_:1},c,e)),s(`<p${e}>There are <strong${e}>helpers</strong> for QInput <code class="doc-token"${e}>mask</code> prop: `),s(l(h,{to:"https://github.com/quasarframework/quasar/blob/dev/ui/src/components/input/use-mask.js#L6"},{default:p((u,i,k,n)=>{if(i)i("full list");else return[a("full list")]}),_:1},c,e)),s(". You can use these for convenience (examples: “phone”, “card”) or write the string specifying your custom needs.</p>"),s(l(o,{title:"Basic",file:"MaskBasic"},null,c,e)),s(l(o,{title:"Filling the mask",file:"MaskFill"},null,c,e)),s(`<p${e}>The <code class="doc-token"${e}>unmasked-value</code> is useful if for example you want to force the user type a certain format, but you want the model to contain the raw value:</p>`),s(l(o,{title:"Unmasked model",file:"MaskUnmaskedModel"},null,c,e)),s(`<p${e}>The <code class="doc-token"${e}>reverse-fill-mask</code> is useful if you want to force the user to fill the mask from the end and allow non-fixed length of input:</p>`),s(l(o,{title:"Filling the mask in reverse",file:"MaskFillReverse"},null,c,e)),s(`<h3 id="using-third-party-mask-processors" class="doc-heading doc-h3"${e}>Using third party mask processors</h3><p${e}>You can easily use any third party mask processor by doing a few small adjustments to your QInput.</p><p${e}>Starting from a QInput like this:</p>`),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>q-input</span>
  <span class="token attr-name"${n}>filled</span>
  <span class="token attr-name"${n}>v-model</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>price<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>label</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Price with 2 decimals<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>mask</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>#.##<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>fill-mask</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>#<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>reverse-fill-mask</span>
  <span class="token attr-name"${n}>hint</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Mask: #.00<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>input-class</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>text-right<span class="token punctuation"${n}>&quot;</span></span>
<span class="token punctuation"${n}>/&gt;</span></span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-input")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with 2 decimals"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"mask"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("#.##"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"fill-mask"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("#"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"reverse-fill-mask"),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: #.00"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"input-class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("text-right"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},"/>")])])]),t(m)]}),_:1},c,e)),s(`<p${e}>You can use v-money directive:</p>`),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>q-field</span>
  <span class="token attr-name"${n}>filled</span>
  <span class="token attr-name"${n}>v-model</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>price<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>label</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Price with v-money directive<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>hint</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Mask: $ #,###.00 #<span class="token punctuation"${n}>&quot;</span></span>
<span class="token punctuation"${n}>&gt;</span></span>
  <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>template</span> <span class="token attr-name"${n}><span class="token namespace"${n}>v-slot:</span>control</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>{ id, floatingLabel, modelValue, emitValue }<span class="token punctuation"${n}>&quot;</span></span><span class="token punctuation"${n}>&gt;</span></span>
    <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>input</span> <span class="token attr-name"${n}>:id</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>id<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>class</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>q-field__input text-right<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>:value</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>modelValue<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>@change</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>e =&gt; emitValue(e.target.value)<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>v-money</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>moneyFormatForDirective<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>v-show</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>floatingLabel<span class="token punctuation"${n}>&quot;</span></span><span class="token punctuation"${n}>&gt;</span></span>
  <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>template</span><span class="token punctuation"${n}>&gt;</span></span>
<span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>q-field</span><span class="token punctuation"${n}>&gt;</span></span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-field")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with v-money directive"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: $ #,###.00 #"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("template")]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"v-slot:"),a("control")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("{ id, floatingLabel, modelValue, emitValue }"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("input")]),a(),t("span",{class:"token attr-name"},":id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("id"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("q-field__input text-right"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},":value"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("modelValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"@change"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("e => emitValue(e.target.value)"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-money"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("moneyFormatForDirective"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-show"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("floatingLabel"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("template")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("q-field")]),t("span",{class:"token punctuation"},">")])])]),t(m)]}),_:1},c,e)),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token literal-property property"${n}>moneyFormatForDirective</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token literal-property property"${n}>decimal</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;.&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>thousands</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;,&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>prefix</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;$ &#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>suffix</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39; #&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>precision</span><span class="token operator"${n}>:</span> <span class="token number"${n}>2</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>masked</span><span class="token operator"${n}>:</span> <span class="token boolean"${n}>false</span> <span class="token comment"${n}>/* doesn&#39;t work with directive */</span>
<span class="token punctuation"${n}>}</span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token literal-property property"},"moneyFormatForDirective"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token literal-property property"},"decimal"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'.'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"thousands"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"','"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"prefix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'$ '"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"suffix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"' #'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"precision"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"masked"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token boolean"},"false"),a(),t("span",{class:"token comment"},"/* doesn't work with directive */"),a(`
`),t("span",{class:"token punctuation"},"}")])]),t(m)]}),_:1},c,e)),s(`<p${e}>Or you can use money component:</p>`),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>q-field</span>
  <span class="token attr-name"${n}>filled</span>
  <span class="token attr-name"${n}>v-model</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>price<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>label</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Price with v-money component<span class="token punctuation"${n}>&quot;</span></span>
  <span class="token attr-name"${n}>hint</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>Mask: $ #,###.00 #<span class="token punctuation"${n}>&quot;</span></span>
<span class="token punctuation"${n}>&gt;</span></span>
  <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>template</span> <span class="token attr-name"${n}><span class="token namespace"${n}>v-slot:</span>control</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>{ id, floatingLabel, modelValue, emitValue }<span class="token punctuation"${n}>&quot;</span></span><span class="token punctuation"${n}>&gt;</span></span>
    <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>money</span> <span class="token attr-name"${n}>:id</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>id<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>class</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>q-field__input text-right<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>:model-value</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>modelValue<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}><span class="token namespace"${n}>@update:</span>model-value</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>emitValue<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>v-bind</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>moneyFormatForComponent<span class="token punctuation"${n}>&quot;</span></span> <span class="token attr-name"${n}>v-show</span><span class="token attr-value"${n}><span class="token punctuation attr-equals"${n}>=</span><span class="token punctuation"${n}>&quot;</span>floatingLabel<span class="token punctuation"${n}>&quot;</span></span> <span class="token punctuation"${n}>/&gt;</span></span>
  <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>template</span><span class="token punctuation"${n}>&gt;</span></span>
<span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>q-field</span><span class="token punctuation"${n}>&gt;</span></span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-field")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with v-money component"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: $ #,###.00 #"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("template")]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"v-slot:"),a("control")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("{ id, floatingLabel, modelValue, emitValue }"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("money")]),a(),t("span",{class:"token attr-name"},":id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("id"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("q-field__input text-right"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},":model-value"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("modelValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"@update:"),a("model-value")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("emitValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-bind"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("moneyFormatForComponent"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-show"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("floatingLabel"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token punctuation"},"/>")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("template")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("q-field")]),t("span",{class:"token punctuation"},">")])])]),t(m)]}),_:1},c,e)),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token literal-property property"${n}>moneyFormatForComponent</span><span class="token operator"${n}>:</span> <span class="token punctuation"${n}>{</span>
  <span class="token literal-property property"${n}>decimal</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;.&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>thousands</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;,&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>prefix</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39;$ &#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>suffix</span><span class="token operator"${n}>:</span> <span class="token string"${n}>&#39; #&#39;</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>precision</span><span class="token operator"${n}>:</span> <span class="token number"${n}>2</span><span class="token punctuation"${n}>,</span>
  <span class="token literal-property property"${n}>masked</span><span class="token operator"${n}>:</span> <span class="token boolean"${n}>true</span>
<span class="token punctuation"${n}>}</span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token literal-property property"},"moneyFormatForComponent"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token literal-property property"},"decimal"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'.'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"thousands"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"','"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"prefix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'$ '"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"suffix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"' #'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"precision"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"masked"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token boolean"},"true"),a(`
`),t("span",{class:"token punctuation"},"}")])]),t(m)]}),_:1},c,e)),s(`<h2 id="validation" class="doc-heading doc-h2"${e}>Validation</h2><h3 id="internal-validation" class="doc-heading doc-h3"${e}>Internal validation</h3><p${e}>You can validate QInput components with <code class="doc-token"${e}>:rules</code> prop. Specify array of embedded rules or your own validators. Your custom validator will be a function which returns <code class="doc-token"${e}>true</code> if validator succeeds or <code class="doc-token"${e}>String</code> with error message if it doesn’t succeed.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>By default, for perf reasons, a change in the rules does not trigger a new validation until the model changes. In order to trigger the validation when rules change too, then use <code class="doc-token"${e}>reactive-rules</code> Boolean prop. The downside is a performance penalty (so use it when you really need this only!) and it can be slightly mitigated by using a computed prop as value for the rules (and not specify them inline in the vue template).</p></div><p${e}>This is so you can write convenient rules of shape like:</p>`),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token parameter"${n}>value</span> <span class="token operator"${n}>=&gt;</span> condition <span class="token operator"${n}>||</span> errorMessage</code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token parameter"},"value"),a(),t("span",{class:"token operator"},"=>"),a(" condition "),t("span",{class:"token operator"},"||"),a(" errorMessage")])]),t(m)]}),_:1},c,e)),s(`<p${e}>For example:</p>`),s(l(r(f),null,{default:p((u,i,k,n)=>{if(i)i(`<pre class="doc-code"${n}><code${n}><span class="token parameter"${n}>value</span> <span class="token operator"${n}>=&gt;</span> value<span class="token punctuation"${n}>.</span><span class="token function"${n}>includes</span><span class="token punctuation"${n}>(</span><span class="token string"${n}>&#39;Hello&#39;</span><span class="token punctuation"${n}>)</span> <span class="token operator"${n}>||</span> <span class="token string"${n}>&#39;Field must contain word Hello&#39;</span></code></pre>`),i(l(m,null,null,k,n));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token parameter"},"value"),a(),t("span",{class:"token operator"},"=>"),a(" value"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"includes"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'Hello'"),t("span",{class:"token punctuation"},")"),a(),t("span",{class:"token operator"},"||"),a(),t("span",{class:"token string"},"'Field must contain word Hello'")])]),t(m)]}),_:1},c,e)),s(`<p${e}>You can reset the validation by calling <code class="doc-token"${e}>resetValidation()</code> method on the QInput.</p><p${e}>There are <strong${e}>helpers</strong> for QInput <code class="doc-token"${e}>rules</code> prop: `),s(l(h,{to:"https://github.com/quasarframework/quasar/blob/dev/ui/src/utils/patterns.js"},{default:p((u,i,k,n)=>{if(i)i("full list");else return[a("full list")]}),_:1},c,e)),s(". You can use these for convenience (examples: “date”, “time”, “hexColor”, “rgbOrRgbaColor”, “anyColor”) or write the string specifying your custom needs.</p>"),s(l(o,{title:"Basic",file:"ValidationRequired"},null,c,e)),s(l(o,{title:"Maximum length",file:"ValidationMaxLength"},null,c,e)),s(`<p${e}>If you set <code class="doc-token"${e}>lazy-rules</code>, validation starts after first blur. If <code class="doc-token"${e}>lazy-rules</code> is set to <code class="doc-token"${e}>ondemand</code> String, then validation will be triggered only when component’s validate() method is manually called or when the wrapper QForm submits itself.</p>`),s(l(o,{title:"Lazy rules",file:"ValidationLazy"},null,c,e)),s(l(o,{title:"Form validation",file:"ValidationForm"},null,c,e)),s(`<h4 id="async-rules" class="doc-heading doc-h4"${e}>Async rules</h4><p${e}>Rules can be async too, by using async/await or by directly returning a Promise.</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Consider coupling async rules with <code class="doc-token"${e}>debounce</code> prop to avoid calling the async rules immediately on each keystroke, which might be detrimental to performance.</p></div>`),s(l(o,{title:"Async rules",file:"ValidationAsync"},null,c,e)),s(`<h3 id="external-validation" class="doc-heading doc-h3"${e}>External validation</h3><p${e}>You can also use external validation and only pass <code class="doc-token"${e}>error</code> and <code class="doc-token"${e}>error-message</code> (enable <code class="doc-token"${e}>bottom-slots</code> to display this error message).</p><div class="doc-note doc-note--tip"${e}><p class="doc-note__title"${e}>TIP</p><p${e}>Depending on your needs, you might connect `),s(l(h,{to:"https://vuelidate.netlify.com/"},{default:p((u,i,k,n)=>{if(i)i("Vuelidate");else return[a("Vuelidate")]}),_:1},c,e)),s(" (our recommended approach) or some other validation library to QInput.</p></div>"),s(l(o,{title:"External",file:"ValidationExternal"},null,c,e)),s(`<p${e}>You can also customize the slot for error message:</p>`),s(l(o,{title:"Slot for error message",file:"ValidationSlots"},null,c,e)),s(`<h2 id="native-form-submit" class="doc-heading doc-h2"${e}>Native form submit</h2><p${e}>When dealing with a native form which has an <code class="doc-token"${e}>action</code> and a <code class="doc-token"${e}>method</code> (eg. when using Quasar with ASP.NET controllers), you need to specify the <code class="doc-token"${e}>name</code> property on QInput, otherwise formData will not contain it (if it should):</p>`),s(l(o,{title:"Native form",file:"NativeForm"},null,c,e));else return[t("p",null,[a("The QInput component is used to capture text input from the user. It uses "),t("code",{class:"doc-token"},"v-model"),a(", similar to a regular input. It has support for errors and validation, and comes in a variety of styles, colors, and types.")]),t(w,{file:"QInput"}),t("h2",{id:"design",class:"doc-heading doc-h2",onClick:u=>r(d)("design")},"Design",8,["onClick"]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[a("For your QInput you can use only one of the main designs ("),t("code",{class:"doc-token"},"filled"),a(", "),t("code",{class:"doc-token"},"outlined"),a(", "),t("code",{class:"doc-token"},"standout"),a(", "),t("code",{class:"doc-token"},"borderless"),a("). You cannot use multiple as they are self-exclusive.")])]),t(o,{title:"Design Overview",file:"DesignOverview"}),t("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:u=>r(d)("coloring")},"Coloring",8,["onClick"]),t(o,{title:"Coloring",file:"Coloring"}),t("h3",{id:"standard",class:"doc-heading doc-h3",onClick:u=>r(d)("standard")},"Standard",8,["onClick"]),t(o,{title:"Standard",file:"DesignStandard"}),t("h3",{id:"filled",class:"doc-heading doc-h3",onClick:u=>r(d)("filled")},"Filled",8,["onClick"]),t(o,{title:"Filled",file:"DesignFilled"}),t("h3",{id:"outlined",class:"doc-heading doc-h3",onClick:u=>r(d)("outlined")},"Outlined",8,["onClick"]),t(o,{title:"Outlined",file:"DesignOutlined"}),t("h3",{id:"standout",class:"doc-heading doc-h3",onClick:u=>r(d)("standout")},"Standout",8,["onClick"]),t(o,{title:"Standout",file:"DesignStandout"}),t("p",null,"One of the most appropriate use cases for Standout design is in a QToolbar:"),t(o,{title:"Standout in QToolbar",file:"StandoutToolbar"}),t("h3",{id:"borderless",class:"doc-heading doc-h3",onClick:u=>r(d)("borderless")},"Borderless",8,["onClick"]),t("p",null,[a("The "),t("code",{class:"doc-token"},"borderless"),a(" design allows you to seamlessly integrate your QInput into other components without QInput drawing a border around itself or changing its background color:")]),t(o,{title:"Borderless",file:"Borderless"}),t("h3",{id:"rounded-design",class:"doc-heading doc-h3",onClick:u=>r(d)("rounded-design")},"Rounded design",8,["onClick"]),t("p",null,[a("The "),t("code",{class:"doc-token"},"rounded"),a(" prop only works along with Filled, Outlined and Standout designs, as showcased in the example below:")]),t(o,{title:"Rounded",file:"Rounded"}),t("h3",{id:"square-borders",class:"doc-heading doc-h3",onClick:u=>r(d)("square-borders")},"Square borders",8,["onClick"]),t("p",null,[a("The "),t("code",{class:"doc-token"},"square"),a(" prop only makes sense along with Filled, Outlined and Standout designs, as showcased in the example below:")]),t(o,{title:"Square borders",file:"SquareBorders"}),t("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:u=>r(d)("force-dark-mode")},"Force dark mode",8,["onClick"]),t(o,{title:"Force dark mode",file:"Dark"}),t("h2",{id:"basic-features",class:"doc-heading doc-h2",onClick:u=>r(d)("basic-features")},"Basic features",8,["onClick"]),t("h3",{id:"native-attributes",class:"doc-heading doc-h3",onClick:u=>r(d)("native-attributes")},"Native attributes",8,["onClick"]),t("p",null,[a("All the attributes set on "),t("code",{class:"doc-token"},"QInput"),a(" that are not in the list of "),t("code",{class:"doc-token"},"props"),a(" in the "),t("strong",null,"API"),a(" will be passed to the native field ("),t("code",{class:"doc-token"},"input"),a(" or "),t("code",{class:"doc-token"},"textarea"),a("). Some examples: autocomplete, placeholder.")]),t("p",null,"Please check these resources for more information about native attributes (for input check also the specific attributes for each type):"),t("ul",null,[t("li",null,[t(h,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input"},{default:p(()=>[a("input")]),_:1})]),t("li",null,[t(h,{to:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea"},{default:p(()=>[a("textarea")]),_:1})])]),t("h3",{id:"clearable",class:"doc-heading doc-h3",onClick:u=>r(d)("clearable")},"Clearable",8,["onClick"]),t("p",null,[a("As a helper, you can use "),t("code",{class:"doc-token"},"clearable"),a(" prop so user can reset model to "),t("code",{class:"doc-token"},"null"),a(" through an appended icon. The second QInput in the example below is the equivalent of using "),t("code",{class:"doc-token"},"clearable"),a(".")]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[a("Won’t work with "),t("code",{class:"doc-token"},"v-model"),a(" managed input modifiers such as "),t("code",{class:"doc-token"},".trim"),a(" because in that case Vue doesn’t handle "),t("code",{class:"doc-token"},"null"),a(" values.")])]),t(o,{title:"Clearable",file:"Clearable"}),t("h3",{id:"input-types",class:"doc-heading doc-h3",onClick:u=>r(d)("input-types")},"Input types",8,["onClick"]),t("p",null,[a("The following QInputs make use of the "),t("code",{class:"doc-token"},"type"),a(" prop in order to render native equivalent "),t("code",{class:"doc-token"},'<input type="...">'),a(" inside of them.")]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,"Support and behavior is the subject entirely of the browser rendering the page and not Quasar’s core code.")]),t(o,{title:"Input types",file:"InputTypes"}),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[a("Some input types (like "),t("code",{class:"doc-token"},"date"),a(" or "),t("code",{class:"doc-token"},"time"),a(") always render some controls, so you if you’re using a "),t("code",{class:"doc-token"},"label"),a(" then you might want to set it along with "),t("code",{class:"doc-token"},"stack-label"),a(", otherwise the label will overlap native browser controls.")])]),t("h4",{id:"input-of-number-type",class:"doc-heading doc-h4",onClick:u=>r(d)("input-of-number-type")},"Input of number type",8,["onClick"]),t("p",null,[a("You’ll be using "),t("code",{class:"doc-token"},"v-model.number"),a(" (notice the "),t("code",{class:"doc-token"},"number"),a(" modifier) along with "),t("code",{class:"doc-token"},'type="number"'),a(" prop:")]),t(o,{title:"Input of number type",file:"InputTypeNumber"}),t("h4",{id:"input-of-file-type",class:"doc-heading doc-h4",onClick:u=>r(d)("input-of-file-type")},"Input of file type",8,["onClick"]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"ALTERNATIVES"),t("p",null,[t("strong",null,[a("Instead of using a QInput with "),t("code",{class:"doc-token"},'type="file"'),a(", you might want to use "),t(h,{to:"/vue-components/file"},{default:p(()=>[a("QFile")]),_:1}),a(" picker instead or even "),t(h,{to:"/vue-components/uploader"},{default:p(()=>[a("QUploader")]),_:1})]),a(". However, should you wish to use QInput, please read the warning below.")])]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[a("Do NOT use a "),t("code",{class:"doc-token"},"v-model"),a(" when QInput is of "),t("code",{class:"doc-token"},'type="file"'),a(". Browser security policy does not allow a value to be set to such an input. As a result, you can only read it (attach an "),t("code",{class:"doc-token"},"@update:model-value"),a(" event), but not write it.")])]),t(o,{title:"Input of file type",file:"InputTypeFile"}),t("h3",{id:"textarea",class:"doc-heading doc-h3",onClick:u=>r(d)("textarea")},"Textarea",8,["onClick"]),t(o,{title:"Textarea",file:"Textarea"}),t("p",null,[a("When you need QInput to grow along with its content, then use the "),t("code",{class:"doc-token"},"autogrow"),a(" prop like in the example below:")]),t(o,{title:"Autogrow",file:"Autogrow"}),t("h3",{id:"prefix-and-suffix",class:"doc-heading doc-h3",onClick:u=>r(d)("prefix-and-suffix")},"Prefix and suffix",8,["onClick"]),t(o,{title:"Prefix and suffix",file:"PrefixSuffix"}),t("h3",{id:"custom-label",class:"doc-heading doc-h3",onClick:u=>r(d)("custom-label")},"Custom Label",8,["onClick"]),t("p",null,[a("Using the "),t("code",{class:"doc-token"},"label"),a(" slot you can customize the aspect of the label or add special features as "),t("code",{class:"doc-token"},"QTooltip"),a(".")]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[a("Do not forget to set the "),t("code",{class:"doc-token"},"label-slot"),a(" property.")]),t("p",null,[a("If you want to interact with the content of the label (QTooltip) add the "),t("code",{class:"doc-token"},"all-pointer-events"),a(" class on the element in the slot.")])]),t(o,{title:"Custom label",file:"CustomLabel"}),t("h3",{id:"shadow-text",class:"doc-heading doc-h3",onClick:u=>r(d)("shadow-text")},"Shadow text",8,["onClick"]),t(o,{title:"Shadow text",file:"ShadowText"}),t("h3",{id:"slots-with-qbtn-type-submit",class:"doc-heading doc-h3",onClick:u=>r(d)("slots-with-qbtn-type-submit")},"Slots with QBtn type “submit”",8,["onClick"]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[a("When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a "),t("code",{class:"doc-token"},"@click"),a(" listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.")])]),t("h3",{id:"debouncing-model",class:"doc-heading doc-h3",onClick:u=>r(d)("debouncing-model")},"Debouncing model",8,["onClick"]),t("p",null,"The role of debouncing is for times when you watch the model and do expensive operations on it. So you want to first let user type out before triggering the model update, rather than updating the model on each keystroke."),t(o,{title:"Debounce model",file:"Debouncing"}),t("h3",{id:"loading-state",class:"doc-heading doc-h3",onClick:u=>r(d)("loading-state")},"Loading state",8,["onClick"]),t(o,{title:"Loading state",file:"LoadingState"}),t("h2",{id:"mask",class:"doc-heading doc-h2",onClick:u=>r(d)("mask")},"Mask",8,["onClick"]),t("p",null,[a("You can force/help the user to input a specific format with help from "),t("code",{class:"doc-token"},"mask"),a(" prop.")]),t("div",{class:"doc-note doc-note--warning"},[t("p",{class:"doc-note__title"},"WARNING"),t("p",null,[a("Mask is only available if the "),t("code",{class:"doc-token"},"type"),a(" is one of ‘text’ (default), ‘search’, ‘url’, ‘tel’, or ‘password’.")])]),t("p",null,"Below are mask tokens:"),t(b,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:p(()=>[t("thead",null,[t("tr",null,[t("th",{class:"text-left"},"Token"),t("th",{class:"text-left"},"Description")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"#")]),t("td",null,"Numeric")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"S")]),t("td",null,"Letter, a to z, case insensitive")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"N")]),t("td",null,"Alphanumeric, case insensitive for letters")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"A")]),t("td",null,"Letter, transformed to uppercase")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"a")]),t("td",null,"Letter, transformed to lowercase")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"X")]),t("td",null,"Alphanumeric, transformed to uppercase for letters")]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"x")]),t("td",null,"Alphanumeric, transformed to lowercase for letters")])])]),_:1}),t("p",null,[a("There are "),t("strong",null,"helpers"),a(" for QInput "),t("code",{class:"doc-token"},"mask"),a(" prop: "),t(h,{to:"https://github.com/quasarframework/quasar/blob/dev/ui/src/components/input/use-mask.js#L6"},{default:p(()=>[a("full list")]),_:1}),a(". You can use these for convenience (examples: “phone”, “card”) or write the string specifying your custom needs.")]),t(o,{title:"Basic",file:"MaskBasic"}),t(o,{title:"Filling the mask",file:"MaskFill"}),t("p",null,[a("The "),t("code",{class:"doc-token"},"unmasked-value"),a(" is useful if for example you want to force the user type a certain format, but you want the model to contain the raw value:")]),t(o,{title:"Unmasked model",file:"MaskUnmaskedModel"}),t("p",null,[a("The "),t("code",{class:"doc-token"},"reverse-fill-mask"),a(" is useful if you want to force the user to fill the mask from the end and allow non-fixed length of input:")]),t(o,{title:"Filling the mask in reverse",file:"MaskFillReverse"}),t("h3",{id:"using-third-party-mask-processors",class:"doc-heading doc-h3",onClick:u=>r(d)("using-third-party-mask-processors")},"Using third party mask processors",8,["onClick"]),t("p",null,"You can easily use any third party mask processor by doing a few small adjustments to your QInput."),t("p",null,"Starting from a QInput like this:"),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-input")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with 2 decimals"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"mask"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("#.##"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"fill-mask"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("#"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"reverse-fill-mask"),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: #.00"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"input-class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("text-right"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},"/>")])])]),t(m)]),_:1}),t("p",null,"You can use v-money directive:"),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-field")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with v-money directive"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: $ #,###.00 #"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("template")]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"v-slot:"),a("control")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("{ id, floatingLabel, modelValue, emitValue }"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("input")]),a(),t("span",{class:"token attr-name"},":id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("id"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("q-field__input text-right"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},":value"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("modelValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"@change"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("e => emitValue(e.target.value)"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-money"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("moneyFormatForDirective"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-show"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("floatingLabel"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("template")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("q-field")]),t("span",{class:"token punctuation"},">")])])]),t(m)]),_:1}),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token literal-property property"},"moneyFormatForDirective"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token literal-property property"},"decimal"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'.'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"thousands"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"','"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"prefix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'$ '"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"suffix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"' #'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"precision"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"masked"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token boolean"},"false"),a(),t("span",{class:"token comment"},"/* doesn't work with directive */"),a(`
`),t("span",{class:"token punctuation"},"}")])]),t(m)]),_:1}),t("p",null,"Or you can use money component:"),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("q-field")]),a(`
  `),t("span",{class:"token attr-name"},"filled"),a(`
  `),t("span",{class:"token attr-name"},"v-model"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("price"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"label"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Price with v-money component"),t("span",{class:"token punctuation"},'"')]),a(`
  `),t("span",{class:"token attr-name"},"hint"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("Mask: $ #,###.00 #"),t("span",{class:"token punctuation"},'"')]),a(`
`),t("span",{class:"token punctuation"},">")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("template")]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"v-slot:"),a("control")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("{ id, floatingLabel, modelValue, emitValue }"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),a(`
    `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),a("money")]),a(),t("span",{class:"token attr-name"},":id"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("id"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"class"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("q-field__input text-right"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},":model-value"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("modelValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},[t("span",{class:"token namespace"},"@update:"),a("model-value")]),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("emitValue"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-bind"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("moneyFormatForComponent"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token attr-name"},"v-show"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),a("floatingLabel"),t("span",{class:"token punctuation"},'"')]),a(),t("span",{class:"token punctuation"},"/>")]),a(`
  `),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("template")]),t("span",{class:"token punctuation"},">")]),a(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),a("q-field")]),t("span",{class:"token punctuation"},">")])])]),t(m)]),_:1}),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token literal-property property"},"moneyFormatForComponent"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token punctuation"},"{"),a(`
  `),t("span",{class:"token literal-property property"},"decimal"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'.'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"thousands"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"','"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"prefix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"'$ '"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"suffix"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token string"},"' #'"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"precision"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token number"},"2"),t("span",{class:"token punctuation"},","),a(`
  `),t("span",{class:"token literal-property property"},"masked"),t("span",{class:"token operator"},":"),a(),t("span",{class:"token boolean"},"true"),a(`
`),t("span",{class:"token punctuation"},"}")])]),t(m)]),_:1}),t("h2",{id:"validation",class:"doc-heading doc-h2",onClick:u=>r(d)("validation")},"Validation",8,["onClick"]),t("h3",{id:"internal-validation",class:"doc-heading doc-h3",onClick:u=>r(d)("internal-validation")},"Internal validation",8,["onClick"]),t("p",null,[a("You can validate QInput components with "),t("code",{class:"doc-token"},":rules"),a(" prop. Specify array of embedded rules or your own validators. Your custom validator will be a function which returns "),t("code",{class:"doc-token"},"true"),a(" if validator succeeds or "),t("code",{class:"doc-token"},"String"),a(" with error message if it doesn’t succeed.")]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[a("By default, for perf reasons, a change in the rules does not trigger a new validation until the model changes. In order to trigger the validation when rules change too, then use "),t("code",{class:"doc-token"},"reactive-rules"),a(" Boolean prop. The downside is a performance penalty (so use it when you really need this only!) and it can be slightly mitigated by using a computed prop as value for the rules (and not specify them inline in the vue template).")])]),t("p",null,"This is so you can write convenient rules of shape like:"),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token parameter"},"value"),a(),t("span",{class:"token operator"},"=>"),a(" condition "),t("span",{class:"token operator"},"||"),a(" errorMessage")])]),t(m)]),_:1}),t("p",null,"For example:"),t(r(f),null,{default:p(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token parameter"},"value"),a(),t("span",{class:"token operator"},"=>"),a(" value"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"includes"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'Hello'"),t("span",{class:"token punctuation"},")"),a(),t("span",{class:"token operator"},"||"),a(),t("span",{class:"token string"},"'Field must contain word Hello'")])]),t(m)]),_:1}),t("p",null,[a("You can reset the validation by calling "),t("code",{class:"doc-token"},"resetValidation()"),a(" method on the QInput.")]),t("p",null,[a("There are "),t("strong",null,"helpers"),a(" for QInput "),t("code",{class:"doc-token"},"rules"),a(" prop: "),t(h,{to:"https://github.com/quasarframework/quasar/blob/dev/ui/src/utils/patterns.js"},{default:p(()=>[a("full list")]),_:1}),a(". You can use these for convenience (examples: “date”, “time”, “hexColor”, “rgbOrRgbaColor”, “anyColor”) or write the string specifying your custom needs.")]),t(o,{title:"Basic",file:"ValidationRequired"}),t(o,{title:"Maximum length",file:"ValidationMaxLength"}),t("p",null,[a("If you set "),t("code",{class:"doc-token"},"lazy-rules"),a(", validation starts after first blur. If "),t("code",{class:"doc-token"},"lazy-rules"),a(" is set to "),t("code",{class:"doc-token"},"ondemand"),a(" String, then validation will be triggered only when component’s validate() method is manually called or when the wrapper QForm submits itself.")]),t(o,{title:"Lazy rules",file:"ValidationLazy"}),t(o,{title:"Form validation",file:"ValidationForm"}),t("h4",{id:"async-rules",class:"doc-heading doc-h4",onClick:u=>r(d)("async-rules")},"Async rules",8,["onClick"]),t("p",null,"Rules can be async too, by using async/await or by directly returning a Promise."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[a("Consider coupling async rules with "),t("code",{class:"doc-token"},"debounce"),a(" prop to avoid calling the async rules immediately on each keystroke, which might be detrimental to performance.")])]),t(o,{title:"Async rules",file:"ValidationAsync"}),t("h3",{id:"external-validation",class:"doc-heading doc-h3",onClick:u=>r(d)("external-validation")},"External validation",8,["onClick"]),t("p",null,[a("You can also use external validation and only pass "),t("code",{class:"doc-token"},"error"),a(" and "),t("code",{class:"doc-token"},"error-message"),a(" (enable "),t("code",{class:"doc-token"},"bottom-slots"),a(" to display this error message).")]),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[a("Depending on your needs, you might connect "),t(h,{to:"https://vuelidate.netlify.com/"},{default:p(()=>[a("Vuelidate")]),_:1}),a(" (our recommended approach) or some other validation library to QInput.")])]),t(o,{title:"External",file:"ValidationExternal"}),t("p",null,"You can also customize the slot for error message:"),t(o,{title:"Slot for error message",file:"ValidationSlots"}),t("h2",{id:"native-form-submit",class:"doc-heading doc-h2",onClick:u=>r(d)("native-form-submit")},"Native form submit",8,["onClick"]),t("p",null,[a("When dealing with a native form which has an "),t("code",{class:"doc-token"},"action"),a(" and a "),t("code",{class:"doc-token"},"method"),a(" (eg. when using Quasar with ASP.NET controllers), you need to specify the "),t("code",{class:"doc-token"},"name"),a(" property on QInput, otherwise formData will not contain it (if it should):")]),t(o,{title:"Native form",file:"NativeForm"})]}),_:1},C))}}},q=v.setup;v.setup=(y,$)=>{const g=V();return(g.modules||(g.modules=new Set)).add("src/pages/vue-components/input.md"),q?q(y,$):void 0};const at=D(v,[["__file","input.md"]]);export{at as default};
