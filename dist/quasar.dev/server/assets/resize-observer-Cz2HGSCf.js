import{provide as g,mergeProps as f,withCtx as z,createVNode as s,createTextVNode as l,unref as b,useSSRContext as O}from"vue";import{ssrRenderComponent as o}from"vue/server-renderer";import{c as R}from"./page-utils-C-QWsEHe.js";import{D as w}from"./DocPage-DKr-0pQn.js";import{D as m}from"./DocExample-BcaABDtE.js";import{D as d}from"./DocApi-Df9ryd6x.js";import{_ as Q}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./CopyButton-l3ndfN49.js";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const n={__name:"resize-observer",__ssrInlineRender:!0,setup(a){g("_q_ex",{name:"QResizeObserver"});const i=[{name:"Scroll Observer",category:"Observers",path:"/vue-components/scroll-observer"}],r=[{id:"qresizeobserver-api",title:"2. QResizeObserver API",deep:!0},{id:"usage",title:"3. Usage"}];return(D,v,h,u)=>{v(o(w,f({title:"Resize Observer (for Element)",desc:"The QResizeObserver Vue component emits a 'resize' event whenever the wrapping DOM element changes its width or height.",heading:"","edit-link":"vue-components/resize-observer",toc:r,related:i},u),{default:z((x,e,c,t)=>{if(e)e(`<p${t}>QResizeObserver is a Quasar component that emits a <code class="doc-token"${t}>resize</code> event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too.</p>`),e(o(d,{file:"QResizeObserver"},null,c,t)),e(`<h2 id="usage" class="doc-heading doc-h2"${t}>Usage</h2>`),e(o(m,{title:"Basic",file:"Basic"},null,c,t)),e(`<p${t}>Please note that QResizeObserver will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.</p>`);else return[s("p",null,[l("QResizeObserver is a Quasar component that emits a "),s("code",{class:"doc-token"},"resize"),l(" event whenever the wrapping DOM element / component (defined as direct parent of QResizeObserver) changes its size (width and/or height). Note that no polling is involved, but overusing it is costly too.")]),s(d,{file:"QResizeObserver"}),s("h2",{id:"usage",class:"doc-heading doc-h2",onClick:_=>b(R)("usage")},"Usage",8,["onClick"]),s(m,{title:"Basic",file:"Basic"}),s("p",null,"Please note that QResizeObserver will issue an event as soon as it gets rendered and attached to DOM, so you can have the initial size of the container.")]}),_:1},h))}}},p=n.setup;n.setup=(a,i)=>{const r=O();return(r.modules||(r.modules=new Set)).add("src/pages/vue-components/resize-observer.md"),p?p(a,i):void 0};const K=Q(n,[["__file","resize-observer.md"]]);export{K as default};
