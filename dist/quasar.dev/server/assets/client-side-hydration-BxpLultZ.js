import{mergeProps as M,withCtx as c,unref as o,createVNode as e,createTextVNode as t,useSSRContext as D}from"vue";import{ssrRenderComponent as d}from"vue/server-renderer";import{c as m}from"./page-utils-C-QWsEHe.js";import{D as H}from"./DocPage-DKr-0pQn.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as u}from"./CopyButton-l3ndfN49.js";import{_ as O}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const h={__name:"client-side-hydration",__ssrInlineRender:!0,setup(p){const r=[{id:"hydration-caveats",title:"2. Hydration Caveats"},{id:"handling-hydration-errors",title:"3. Handling Hydration Errors"}];return(i,v,w,b)=>{v(d(H,M({title:"Client Side Hydration",desc:"(@quasar/app-webpack) What hydration is and its caveats in a Quasar server-side rendered app.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/developing-ssr/client-side-hydration",toc:r},b),{default:c((C,s,f,a)=>{if(s)s(`<p${a}>Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes.</p><p${a}>Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive.</p><div class="doc-note doc-note--warning"${a}><p class="doc-note__title"${a}>WARNING</p><p${a}>In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. <strong${a}>In production mode, this assertion is disabled for maximum performance.</strong></p></div><h2 id="hydration-caveats" class="doc-heading doc-h2"${a}>Hydration Caveats</h2><p${a}>One thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template:</p>`),s(d(o(g),null,{default:c((k,l,$,n)=>{if(l)l(`<pre class="doc-code"${n}><code${n}><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>table</span><span class="token punctuation"${n}>&gt;</span></span>
  <span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>tr</span><span class="token punctuation"${n}>&gt;</span></span><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;</span>td</span><span class="token punctuation"${n}>&gt;</span></span>hi<span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>td</span><span class="token punctuation"${n}>&gt;</span></span><span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>tr</span><span class="token punctuation"${n}>&gt;</span></span>
<span class="token tag"${n}><span class="token tag"${n}><span class="token punctuation"${n}>&lt;/</span>table</span><span class="token punctuation"${n}>&gt;</span></span></code></pre>`),l(d(u,null,null,$,n));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("table")]),e("span",{class:"token punctuation"},">")]),t(`
  `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("tr")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("td")]),e("span",{class:"token punctuation"},">")]),t("hi"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("td")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("tr")]),e("span",{class:"token punctuation"},">")]),t(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("table")]),e("span",{class:"token punctuation"},">")])])]),e(u)]}),_:1},f,a)),s(`<p${a}>The browser will automatically inject <code class="doc-token"${a}>&lt;tbody&gt;</code> inside <code class="doc-token"${a}>&lt;table&gt;</code>, however, the virtual DOM generated by Vue does not contain <code class="doc-token"${a}>&lt;tbody&gt;</code>, so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates.</p><h2 id="handling-hydration-errors" class="doc-heading doc-h2"${a}>Handling Hydration Errors</h2><p${a}>If you do receive hydration errors (as seen in console: “Vuejs Error - The client-side rendered virtual DOM tree is not matching server-rendered content”), you can try following these steps:</p><ol${a}><li${a}>Show DevTools in Chrome (F12)</li><li${a}>Load the page that causes “the client-side rendered virtual DOM tree…” warning.</li><li${a}>Scroll to the warning in DevTools console.</li><li${a}>Click at the source location hyperlink of the warning in vue.runtime.esm.js.</li><li${a}>Set a breakpoint there (left-clicking at line number in the source code browser).</li><li${a}>Make the same warning appear again. Usually by reloading the page. If there are many warnings, you can check the message by moving a mouse over <code class="doc-token"${a}>msg</code> variable.</li><li${a}>When you have found your message and stopped on a breakpoint, look at the <em${a}>call stack</em>. Click one frame down to call to “patch” to open its source. Hover mouse over hydrate function call 4 lines above the execution line in patch. Hyperlink to the source of hydrate would open.</li><li${a}>In the hydrate function, move about 15 lines from the start and set a breakpoint where false is returned after <code class="doc-token"${a}>assertNodeMatch</code> returned <code class="doc-token"${a}>false</code>. Set the breakpoint there and remove all other breakpoints.</li><li${a}>Make the same warning happen again. Now, when breakpoint is hit, execution should stop in the hydrate function. Switch to DevTools console and evaluate <code class="doc-token"${a}>elm</code> and then <code class="doc-token"${a}>vnode</code>. Here <code class="doc-token"${a}>elm</code> seems to be a <em${a}>server-rendered DOM element</em> while <code class="doc-token"${a}>vnode</code> is a <em${a}>virtual DOM node</em>. <code class="doc-token"${a}>Elm</code> is printed as HTML so you can figure out where the error happened.</li></ol>`);else return[e("p",null,"Hydration refers to the client-side process during which Vue takes over the static HTML sent by the server and turns it into dynamic DOM that can react to client-side data changes."),e("p",null,"Since the server has already rendered the markup, we obviously do not want to throw that away and re-create all the DOM elements. Instead, we want to “hydrate” the static markup and make it interactive."),e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("In development mode, Vue will assert the client-side generated virtual DOM tree matches the DOM structure rendered from the server. If there is a mismatch, it will bail hydration, discard existing DOM and render from scratch. "),e("strong",null,"In production mode, this assertion is disabled for maximum performance.")])]),e("h2",{id:"hydration-caveats",class:"doc-heading doc-h2",onClick:k=>o(m)("hydration-caveats")},"Hydration Caveats",8,["onClick"]),e("p",null,"One thing to be aware of when using SSR + client hydration is some special HTML structures that may be altered by the browser. For example, when you write this in a Vue template:"),e(o(g),null,{default:c(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("table")]),e("span",{class:"token punctuation"},">")]),t(`
  `),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("tr")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("td")]),e("span",{class:"token punctuation"},">")]),t("hi"),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("td")]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("tr")]),e("span",{class:"token punctuation"},">")]),t(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("table")]),e("span",{class:"token punctuation"},">")])])]),e(u)]),_:1}),e("p",null,[t("The browser will automatically inject "),e("code",{class:"doc-token"},"<tbody>"),t(" inside "),e("code",{class:"doc-token"},"<table>"),t(", however, the virtual DOM generated by Vue does not contain "),e("code",{class:"doc-token"},"<tbody>"),t(", so it will cause a mismatch. To ensure correct matching, make sure to write valid HTML in your templates.")]),e("h2",{id:"handling-hydration-errors",class:"doc-heading doc-h2",onClick:k=>o(m)("handling-hydration-errors")},"Handling Hydration Errors",8,["onClick"]),e("p",null,"If you do receive hydration errors (as seen in console: “Vuejs Error - The client-side rendered virtual DOM tree is not matching server-rendered content”), you can try following these steps:"),e("ol",null,[e("li",null,"Show DevTools in Chrome (F12)"),e("li",null,"Load the page that causes “the client-side rendered virtual DOM tree…” warning."),e("li",null,"Scroll to the warning in DevTools console."),e("li",null,"Click at the source location hyperlink of the warning in vue.runtime.esm.js."),e("li",null,"Set a breakpoint there (left-clicking at line number in the source code browser)."),e("li",null,[t("Make the same warning appear again. Usually by reloading the page. If there are many warnings, you can check the message by moving a mouse over "),e("code",{class:"doc-token"},"msg"),t(" variable.")]),e("li",null,[t("When you have found your message and stopped on a breakpoint, look at the "),e("em",null,"call stack"),t(". Click one frame down to call to “patch” to open its source. Hover mouse over hydrate function call 4 lines above the execution line in patch. Hyperlink to the source of hydrate would open.")]),e("li",null,[t("In the hydrate function, move about 15 lines from the start and set a breakpoint where false is returned after "),e("code",{class:"doc-token"},"assertNodeMatch"),t(" returned "),e("code",{class:"doc-token"},"false"),t(". Set the breakpoint there and remove all other breakpoints.")]),e("li",null,[t("Make the same warning happen again. Now, when breakpoint is hit, execution should stop in the hydrate function. Switch to DevTools console and evaluate "),e("code",{class:"doc-token"},"elm"),t(" and then "),e("code",{class:"doc-token"},"vnode"),t(". Here "),e("code",{class:"doc-token"},"elm"),t(" seems to be a "),e("em",null,"server-rendered DOM element"),t(" while "),e("code",{class:"doc-token"},"vnode"),t(" is a "),e("em",null,"virtual DOM node"),t(". "),e("code",{class:"doc-token"},"Elm"),t(" is printed as HTML so you can figure out where the error happened.")])])]}),_:1},w))}}},y=h.setup;h.setup=(p,r)=>{const i=D();return(i.modules||(i.modules=new Set)).add("src/pages/quasar-cli-webpack/developing-ssr/client-side-hydration.md"),y?y(p,r):void 0};const G=O(h,[["__file","client-side-hydration.md"]]);export{G as default};
