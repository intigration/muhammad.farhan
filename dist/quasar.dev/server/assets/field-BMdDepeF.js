import{provide as Q,mergeProps as S,withCtx as h,unref as s,createVNode as e,createTextVNode as t,useSSRContext as T}from"vue";import{ssrRenderComponent as a}from"vue/server-renderer";import{c}from"./page-utils-C-QWsEHe.js";import{D,a as b}from"./DocPage-DKr-0pQn.js";import{D as n}from"./DocExample-BcaABDtE.js";import{D as $}from"./DocApi-Df9ryd6x.js";import{D as g}from"./DocPrerender-DPOnWPFO.js";import{C as m}from"./CopyButton-l3ndfN49.js";import{_ as B}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"./DocCode-BVg0tuSc.js";import"prismjs";import"./DocCodepen-BPVszLIH.js";import"./utils-DKnLoYai.js";import"./DocCardTitle-BSnqQsiz.js";import"vue-router";import"@quasar/extras/fontawesome-v5";import"quasar/icon-set/svg-mdi-v6.mjs";const y={__name:"field",__ssrInlineRender:!0,setup(v){Q("_q_ex",{name:"QField"});const p=[{id:"qfield-api",title:"2. QField API",deep:!0},{id:"design",title:"3. Design"},{id:"overview",title:"3.1. Overview",sub:!0},{id:"coloring",title:"3.2. Coloring",sub:!0},{id:"standard",title:"3.3. Standard",sub:!0},{id:"filled",title:"3.4. Filled",sub:!0},{id:"outlined",title:"3.5. Outlined",sub:!0},{id:"standout",title:"3.6. Standout",sub:!0},{id:"borderless",title:"3.7. Borderless",sub:!0},{id:"rounded-design",title:"3.8. Rounded design",sub:!0},{id:"square-borders",title:"3.9. Square borders",sub:!0},{id:"force-dark-mode",title:"3.10. Force dark mode",sub:!0},{id:"basic-features",title:"4. Basic features"},{id:"clearable",title:"4.1. Clearable",sub:!0},{id:"control-types",title:"4.2. Control types",sub:!0},{id:"prefix-and-suffix",title:"4.3. Prefix and suffix",sub:!0},{id:"custom-label",title:"4.4. Custom Label",sub:!0},{id:"slots-with-qbtn-type-submit",title:"4.5. Slots with QBtn type “submit”",sub:!0},{id:"loading-state",title:"4.6. Loading state",sub:!0},{id:"validation",title:"5. Validation"},{id:"internal-validation",title:"5.1. Internal validation",sub:!0},{id:"external-validation",title:"5.2. External validation",sub:!0}];return(k,C,x,F)=>{C(a(D,S({title:"Field",desc:"The QField Vue component is used to provide common functionality and aspect to form components.",heading:"","edit-link":"vue-components/field",toc:p},F),{default:h((V,l,i,o)=>{if(l)l(`<p${o}>The QField component is used to provide common functionality and aspect to form components. It uses <code class="doc-token"${o}>:model-value</code> (or <code class="doc-token"${o}>v-model</code> if you want to use <code class="doc-token"${o}>clearable</code> property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors.</p><p${o}>QField allows you to display any form control (or almost anything as a matter of fact) inside it. Just place your desired content inside the <code class="doc-token"${o}>control</code> slot.</p><div class="doc-note doc-note--danger"${o}><p class="doc-note__title"${o}>WARNING</p><p${o}>Do NOT wrap QInput, QFile or QSelect with QField as these components already inherit QField.</p></div>`),l(a($,{file:"QField"},null,i,o)),l(`<h2 id="design" class="doc-heading doc-h2"${o}>Design</h2><div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>The examples below use dumb content (text) just to show you the design that QField can use. For checking out examples that wrap real components, see the “Basic Features” section.</p></div><div class="doc-note doc-note--danger"${o}><p class="doc-note__title"${o}>WARNING</p><p${o}>QField does not (and should not) manage your <code class="doc-token"${o}>control</code> slot, so if you use <code class="doc-token"${o}>label</code> prop, it might be a good idea to also specify <code class="doc-token"${o}>stack-label</code>, otherwise it might overlap your control when QField is not focused.</p></div><h3 id="overview" class="doc-heading doc-h3"${o}>Overview</h3><p${o}>For your QField you can use only one of the main designs (<code class="doc-token"${o}>filled</code>, <code class="doc-token"${o}>outlined</code>, <code class="doc-token"${o}>standout</code>, <code class="doc-token"${o}>borderless</code>). You cannot use multiple as they are self-exclusive.</p>`),l(a(n,{title:"Design Overview",file:"DesignOverview"},null,i,o)),l(`<h3 id="coloring" class="doc-heading doc-h3"${o}>Coloring</h3>`),l(a(n,{title:"Coloring",file:"Coloring"},null,i,o)),l(`<h3 id="standard" class="doc-heading doc-h3"${o}>Standard</h3>`),l(a(n,{title:"Standard",file:"DesignStandard"},null,i,o)),l(`<h3 id="filled" class="doc-heading doc-h3"${o}>Filled</h3>`),l(a(n,{title:"Filled",file:"DesignFilled"},null,i,o)),l(`<h3 id="outlined" class="doc-heading doc-h3"${o}>Outlined</h3>`),l(a(n,{title:"Outlined",file:"DesignOutlined"},null,i,o)),l(`<h3 id="standout" class="doc-heading doc-h3"${o}>Standout</h3>`),l(a(n,{title:"Standout",file:"DesignStandout"},null,i,o)),l(`<p${o}>One of the most appropriate use cases for Standout design is in a QToolbar:</p>`),l(a(n,{title:"Standout in QToolbar",file:"StandoutToolbar"},null,i,o)),l(`<h3 id="borderless" class="doc-heading doc-h3"${o}>Borderless</h3><p${o}>The <code class="doc-token"${o}>borderless</code> design allows you to seamlessly integrate your QField into other components without QField drawing a border around itself or changing its background color:</p>`),l(a(n,{title:"Borderless",file:"Borderless"},null,i,o)),l(`<h3 id="rounded-design" class="doc-heading doc-h3"${o}>Rounded design</h3><p${o}>The <code class="doc-token"${o}>rounded</code> prop only works along with Filled, Outlined and Standout designs, as showcased in the example below:</p>`),l(a(n,{title:"Rounded",file:"Rounded"},null,i,o)),l(`<h3 id="square-borders" class="doc-heading doc-h3"${o}>Square borders</h3><p${o}>The <code class="doc-token"${o}>square</code> prop only makes sense along with Filled, Outlined and Standout designs, as showcased in the example below:</p>`),l(a(n,{title:"Square borders",file:"SquareBorders"},null,i,o)),l(`<h3 id="force-dark-mode" class="doc-heading doc-h3"${o}>Force dark mode</h3>`),l(a(n,{title:"Force dark mode",file:"Dark"},null,i,o)),l(`<h2 id="basic-features" class="doc-heading doc-h2"${o}>Basic features</h2><h3 id="clearable" class="doc-heading doc-h3"${o}>Clearable</h3><p${o}>As a helper, you can use <code class="doc-token"${o}>clearable</code> prop so user can reset model to <code class="doc-token"${o}>null</code> through an appended icon.</p><div class="doc-note doc-note--warning"${o}><p class="doc-note__title"${o}>WARNING</p><p${o}>If using <code class="doc-token"${o}>clearable</code> you must use <code class="doc-token"${o}>v-model</code> or listen on <code class="doc-token"${o}>@update:model-value</code> and update the value.</p></div>`),l(a(n,{title:"Clearable",file:"Clearable"},null,i,o)),l(`<h3 id="control-types" class="doc-heading doc-h3"${o}>Control types</h3><p${o}>Anything you place inside the <code class="doc-token"${o}>control</code> slot will be used as content of the field. We provide a few examples of controls below.</p>`),l(a(n,{title:"Control types",file:"ControlTypes"},null,i,o)),l(`<div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>Most of the form controls always render something visible, so you if you’re using a <code class="doc-token"${o}>label</code> then you might want to set it along with <code class="doc-token"${o}>stack-label</code>, otherwise the label will overlap the enclosed control.</p></div><h3 id="prefix-and-suffix" class="doc-heading doc-h3"${o}>Prefix and suffix</h3>`),l(a(n,{title:"Prefix and suffix",file:"PrefixSuffix"},null,i,o)),l(`<h3 id="custom-label" class="doc-heading doc-h3"${o}>Custom Label</h3><p${o}>Using the <code class="doc-token"${o}>label</code> slot you can customize the aspect of the label or add special features as <code class="doc-token"${o}>QTooltip</code>.</p><div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>Do not forget to set the <code class="doc-token"${o}>label-slot</code> property.</p><p${o}>If you want to interact with the content of the label (QTooltip) add the <code class="doc-token"${o}>all-pointer-events</code> class on the element in the slot.</p></div>`),l(a(n,{title:"Custom label",file:"CustomLabel"},null,i,o)),l(`<h3 id="slots-with-qbtn-type-submit" class="doc-heading doc-h3"${o}>Slots with QBtn type “submit”</h3><div class="doc-note doc-note--warning"${o}><p class="doc-note__title"${o}>WARNING</p><p${o}>When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a <code class="doc-token"${o}>@click</code> listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.</p></div><h3 id="loading-state" class="doc-heading doc-h3"${o}>Loading state</h3>`),l(a(n,{title:"Loading state",file:"LoadingState"},null,i,o)),l(`<h2 id="validation" class="doc-heading doc-h2"${o}>Validation</h2><h3 id="internal-validation" class="doc-heading doc-h3"${o}>Internal validation</h3><p${o}>You can validate QField components with <code class="doc-token"${o}>:rules</code> prop. Specify array of embedded rules or your own validators. Your custom validator will be a function which returns <code class="doc-token"${o}>true</code> if validator succeeds or <code class="doc-token"${o}>String</code> with error message if it doesn’t succeed.</p><div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>By default, for perf reasons, a change in the rules does not trigger a new validation until the model changes. In order to trigger the validation when rules change too, then use <code class="doc-token"${o}>reactive-rules</code> Boolean prop. The downside is a performance penalty (so use it when you really need this only!) and it can be slightly mitigated by using a computed prop as value for the rules (and not specify them inline in the vue template).</p></div><p${o}>This is so you can write convenient rules of shape like:</p>`),l(a(s(g),null,{default:h((d,u,f,r)=>{if(u)u(`<pre class="doc-code"${r}><code${r}><span class="token parameter"${r}>value</span> <span class="token operator"${r}>=&gt;</span> condition <span class="token operator"${r}>||</span> errorMessage</code></pre>`),u(a(m,null,null,f,r));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token parameter"},"value"),t(),e("span",{class:"token operator"},"=>"),t(" condition "),e("span",{class:"token operator"},"||"),t(" errorMessage")])]),e(m)]}),_:1},i,o)),l(`<p${o}>For example:</p>`),l(a(s(g),null,{default:h((d,u,f,r)=>{if(u)u(`<pre class="doc-code"${r}><code${r}><span class="token parameter"${r}>value</span> <span class="token operator"${r}>=&gt;</span> value <span class="token operator"${r}>&lt;</span> <span class="token number"${r}>10</span> <span class="token operator"${r}>||</span> <span class="token string"${r}>&#39;Value should be lower&#39;</span></code></pre>`),u(a(m,null,null,f,r));else return[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token parameter"},"value"),t(),e("span",{class:"token operator"},"=>"),t(" value "),e("span",{class:"token operator"},"<"),t(),e("span",{class:"token number"},"10"),t(),e("span",{class:"token operator"},"||"),t(),e("span",{class:"token string"},"'Value should be lower'")])]),e(m)]}),_:1},i,o)),l(`<p${o}>You can reset the validation by calling <code class="doc-token"${o}>resetValidation()</code> method on the QField.</p>`),l(a(n,{title:"Basic",file:"ValidationRequired"},null,i,o)),l(a(n,{title:"Maximum value",file:"ValidationMaxValue"},null,i,o)),l(`<p${o}>If you set <code class="doc-token"${o}>lazy-rules</code>, validation starts after first blur. If <code class="doc-token"${o}>lazy-rules</code> is set to <code class="doc-token"${o}>ondemand</code> String, then validation will be triggered only when component’s validate() method is manually called or when the wrapper QForm submits itself.</p>`),l(a(n,{title:"Lazy rules",file:"ValidationLazy"},null,i,o)),l(`<h4 id="async-rules" class="doc-heading doc-h4"${o}>Async rules</h4><p${o}>Rules can be async too, by using async/await or by directly returning a Promise.</p><div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>Consider coupling async rules with <code class="doc-token"${o}>debounce</code> prop to avoid calling the async rules immediately on each keystroke, which might be detrimental to performance.</p></div>`),l(a(n,{title:"Async rules",file:"ValidationAsync"},null,i,o)),l(`<h3 id="external-validation" class="doc-heading doc-h3"${o}>External validation</h3><p${o}>You can also use external validation and only pass <code class="doc-token"${o}>error</code> and <code class="doc-token"${o}>error-message</code> (enable <code class="doc-token"${o}>bottom-slots</code> to display this error message).</p><div class="doc-note doc-note--tip"${o}><p class="doc-note__title"${o}>TIP</p><p${o}>Depending on your needs, you might connect `),l(a(b,{to:"https://vuelidate.netlify.com/"},{default:h((d,u,f,r)=>{if(u)u("Vuelidate");else return[t("Vuelidate")]}),_:1},i,o)),l(" (our recommended approach) or some other validation library to QField.</p></div>"),l(a(n,{title:"External",file:"ValidationExternal"},null,i,o)),l(`<p${o}>You can also customize the slot for error message:</p>`),l(a(n,{title:"Slot for error message",file:"ValidationSlots"},null,i,o));else return[e("p",null,[t("The QField component is used to provide common functionality and aspect to form components. It uses "),e("code",{class:"doc-token"},":model-value"),t(" (or "),e("code",{class:"doc-token"},"v-model"),t(" if you want to use "),e("code",{class:"doc-token"},"clearable"),t(" property) to have knowledge of the model of the component inside. It has support for labels, hints, errors, validation, and comes in a variety of styles and colors.")]),e("p",null,[t("QField allows you to display any form control (or almost anything as a matter of fact) inside it. Just place your desired content inside the "),e("code",{class:"doc-token"},"control"),t(" slot.")]),e("div",{class:"doc-note doc-note--danger"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,"Do NOT wrap QInput, QFile or QSelect with QField as these components already inherit QField.")]),e($,{file:"QField"}),e("h2",{id:"design",class:"doc-heading doc-h2",onClick:d=>s(c)("design")},"Design",8,["onClick"]),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,"The examples below use dumb content (text) just to show you the design that QField can use. For checking out examples that wrap real components, see the “Basic Features” section.")]),e("div",{class:"doc-note doc-note--danger"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("QField does not (and should not) manage your "),e("code",{class:"doc-token"},"control"),t(" slot, so if you use "),e("code",{class:"doc-token"},"label"),t(" prop, it might be a good idea to also specify "),e("code",{class:"doc-token"},"stack-label"),t(", otherwise it might overlap your control when QField is not focused.")])]),e("h3",{id:"overview",class:"doc-heading doc-h3",onClick:d=>s(c)("overview")},"Overview",8,["onClick"]),e("p",null,[t("For your QField you can use only one of the main designs ("),e("code",{class:"doc-token"},"filled"),t(", "),e("code",{class:"doc-token"},"outlined"),t(", "),e("code",{class:"doc-token"},"standout"),t(", "),e("code",{class:"doc-token"},"borderless"),t("). You cannot use multiple as they are self-exclusive.")]),e(n,{title:"Design Overview",file:"DesignOverview"}),e("h3",{id:"coloring",class:"doc-heading doc-h3",onClick:d=>s(c)("coloring")},"Coloring",8,["onClick"]),e(n,{title:"Coloring",file:"Coloring"}),e("h3",{id:"standard",class:"doc-heading doc-h3",onClick:d=>s(c)("standard")},"Standard",8,["onClick"]),e(n,{title:"Standard",file:"DesignStandard"}),e("h3",{id:"filled",class:"doc-heading doc-h3",onClick:d=>s(c)("filled")},"Filled",8,["onClick"]),e(n,{title:"Filled",file:"DesignFilled"}),e("h3",{id:"outlined",class:"doc-heading doc-h3",onClick:d=>s(c)("outlined")},"Outlined",8,["onClick"]),e(n,{title:"Outlined",file:"DesignOutlined"}),e("h3",{id:"standout",class:"doc-heading doc-h3",onClick:d=>s(c)("standout")},"Standout",8,["onClick"]),e(n,{title:"Standout",file:"DesignStandout"}),e("p",null,"One of the most appropriate use cases for Standout design is in a QToolbar:"),e(n,{title:"Standout in QToolbar",file:"StandoutToolbar"}),e("h3",{id:"borderless",class:"doc-heading doc-h3",onClick:d=>s(c)("borderless")},"Borderless",8,["onClick"]),e("p",null,[t("The "),e("code",{class:"doc-token"},"borderless"),t(" design allows you to seamlessly integrate your QField into other components without QField drawing a border around itself or changing its background color:")]),e(n,{title:"Borderless",file:"Borderless"}),e("h3",{id:"rounded-design",class:"doc-heading doc-h3",onClick:d=>s(c)("rounded-design")},"Rounded design",8,["onClick"]),e("p",null,[t("The "),e("code",{class:"doc-token"},"rounded"),t(" prop only works along with Filled, Outlined and Standout designs, as showcased in the example below:")]),e(n,{title:"Rounded",file:"Rounded"}),e("h3",{id:"square-borders",class:"doc-heading doc-h3",onClick:d=>s(c)("square-borders")},"Square borders",8,["onClick"]),e("p",null,[t("The "),e("code",{class:"doc-token"},"square"),t(" prop only makes sense along with Filled, Outlined and Standout designs, as showcased in the example below:")]),e(n,{title:"Square borders",file:"SquareBorders"}),e("h3",{id:"force-dark-mode",class:"doc-heading doc-h3",onClick:d=>s(c)("force-dark-mode")},"Force dark mode",8,["onClick"]),e(n,{title:"Force dark mode",file:"Dark"}),e("h2",{id:"basic-features",class:"doc-heading doc-h2",onClick:d=>s(c)("basic-features")},"Basic features",8,["onClick"]),e("h3",{id:"clearable",class:"doc-heading doc-h3",onClick:d=>s(c)("clearable")},"Clearable",8,["onClick"]),e("p",null,[t("As a helper, you can use "),e("code",{class:"doc-token"},"clearable"),t(" prop so user can reset model to "),e("code",{class:"doc-token"},"null"),t(" through an appended icon.")]),e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("If using "),e("code",{class:"doc-token"},"clearable"),t(" you must use "),e("code",{class:"doc-token"},"v-model"),t(" or listen on "),e("code",{class:"doc-token"},"@update:model-value"),t(" and update the value.")])]),e(n,{title:"Clearable",file:"Clearable"}),e("h3",{id:"control-types",class:"doc-heading doc-h3",onClick:d=>s(c)("control-types")},"Control types",8,["onClick"]),e("p",null,[t("Anything you place inside the "),e("code",{class:"doc-token"},"control"),t(" slot will be used as content of the field. We provide a few examples of controls below.")]),e(n,{title:"Control types",file:"ControlTypes"}),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("Most of the form controls always render something visible, so you if you’re using a "),e("code",{class:"doc-token"},"label"),t(" then you might want to set it along with "),e("code",{class:"doc-token"},"stack-label"),t(", otherwise the label will overlap the enclosed control.")])]),e("h3",{id:"prefix-and-suffix",class:"doc-heading doc-h3",onClick:d=>s(c)("prefix-and-suffix")},"Prefix and suffix",8,["onClick"]),e(n,{title:"Prefix and suffix",file:"PrefixSuffix"}),e("h3",{id:"custom-label",class:"doc-heading doc-h3",onClick:d=>s(c)("custom-label")},"Custom Label",8,["onClick"]),e("p",null,[t("Using the "),e("code",{class:"doc-token"},"label"),t(" slot you can customize the aspect of the label or add special features as "),e("code",{class:"doc-token"},"QTooltip"),t(".")]),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("Do not forget to set the "),e("code",{class:"doc-token"},"label-slot"),t(" property.")]),e("p",null,[t("If you want to interact with the content of the label (QTooltip) add the "),e("code",{class:"doc-token"},"all-pointer-events"),t(" class on the element in the slot.")])]),e(n,{title:"Custom label",file:"CustomLabel"}),e("h3",{id:"slots-with-qbtn-type-submit",class:"doc-heading doc-h3",onClick:d=>s(c)("slots-with-qbtn-type-submit")},"Slots with QBtn type “submit”",8,["onClick"]),e("div",{class:"doc-note doc-note--warning"},[e("p",{class:"doc-note__title"},"WARNING"),e("p",null,[t("When placing a QBtn with type “submit” in one of the “before”, “after”, “prepend”, or “append” slots of a QField, QInput or QSelect, you should also add a "),e("code",{class:"doc-token"},"@click"),t(" listener on the QBtn in question. This listener should call the method that submits your form. All “click” events in such slots are not propagated to their parent elements.")])]),e("h3",{id:"loading-state",class:"doc-heading doc-h3",onClick:d=>s(c)("loading-state")},"Loading state",8,["onClick"]),e(n,{title:"Loading state",file:"LoadingState"}),e("h2",{id:"validation",class:"doc-heading doc-h2",onClick:d=>s(c)("validation")},"Validation",8,["onClick"]),e("h3",{id:"internal-validation",class:"doc-heading doc-h3",onClick:d=>s(c)("internal-validation")},"Internal validation",8,["onClick"]),e("p",null,[t("You can validate QField components with "),e("code",{class:"doc-token"},":rules"),t(" prop. Specify array of embedded rules or your own validators. Your custom validator will be a function which returns "),e("code",{class:"doc-token"},"true"),t(" if validator succeeds or "),e("code",{class:"doc-token"},"String"),t(" with error message if it doesn’t succeed.")]),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("By default, for perf reasons, a change in the rules does not trigger a new validation until the model changes. In order to trigger the validation when rules change too, then use "),e("code",{class:"doc-token"},"reactive-rules"),t(" Boolean prop. The downside is a performance penalty (so use it when you really need this only!) and it can be slightly mitigated by using a computed prop as value for the rules (and not specify them inline in the vue template).")])]),e("p",null,"This is so you can write convenient rules of shape like:"),e(s(g),null,{default:h(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token parameter"},"value"),t(),e("span",{class:"token operator"},"=>"),t(" condition "),e("span",{class:"token operator"},"||"),t(" errorMessage")])]),e(m)]),_:1}),e("p",null,"For example:"),e(s(g),null,{default:h(()=>[e("pre",{class:"doc-code"},[e("code",null,[e("span",{class:"token parameter"},"value"),t(),e("span",{class:"token operator"},"=>"),t(" value "),e("span",{class:"token operator"},"<"),t(),e("span",{class:"token number"},"10"),t(),e("span",{class:"token operator"},"||"),t(),e("span",{class:"token string"},"'Value should be lower'")])]),e(m)]),_:1}),e("p",null,[t("You can reset the validation by calling "),e("code",{class:"doc-token"},"resetValidation()"),t(" method on the QField.")]),e(n,{title:"Basic",file:"ValidationRequired"}),e(n,{title:"Maximum value",file:"ValidationMaxValue"}),e("p",null,[t("If you set "),e("code",{class:"doc-token"},"lazy-rules"),t(", validation starts after first blur. If "),e("code",{class:"doc-token"},"lazy-rules"),t(" is set to "),e("code",{class:"doc-token"},"ondemand"),t(" String, then validation will be triggered only when component’s validate() method is manually called or when the wrapper QForm submits itself.")]),e(n,{title:"Lazy rules",file:"ValidationLazy"}),e("h4",{id:"async-rules",class:"doc-heading doc-h4",onClick:d=>s(c)("async-rules")},"Async rules",8,["onClick"]),e("p",null,"Rules can be async too, by using async/await or by directly returning a Promise."),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("Consider coupling async rules with "),e("code",{class:"doc-token"},"debounce"),t(" prop to avoid calling the async rules immediately on each keystroke, which might be detrimental to performance.")])]),e(n,{title:"Async rules",file:"ValidationAsync"}),e("h3",{id:"external-validation",class:"doc-heading doc-h3",onClick:d=>s(c)("external-validation")},"External validation",8,["onClick"]),e("p",null,[t("You can also use external validation and only pass "),e("code",{class:"doc-token"},"error"),t(" and "),e("code",{class:"doc-token"},"error-message"),t(" (enable "),e("code",{class:"doc-token"},"bottom-slots"),t(" to display this error message).")]),e("div",{class:"doc-note doc-note--tip"},[e("p",{class:"doc-note__title"},"TIP"),e("p",null,[t("Depending on your needs, you might connect "),e(b,{to:"https://vuelidate.netlify.com/"},{default:h(()=>[t("Vuelidate")]),_:1}),t(" (our recommended approach) or some other validation library to QField.")])]),e(n,{title:"External",file:"ValidationExternal"}),e("p",null,"You can also customize the slot for error message:"),e(n,{title:"Slot for error message",file:"ValidationSlots"})]}),_:1},x))}}},w=y.setup;y.setup=(v,p)=>{const k=T();return(k.modules||(k.modules=new Set)).add("src/pages/vue-components/field.md"),w?w(v,p):void 0};const _=B(y,[["__file","field.md"]]);export{_ as default};
