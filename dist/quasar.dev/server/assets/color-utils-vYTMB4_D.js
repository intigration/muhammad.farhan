import{resolveComponent as j,mergeProps as S,withCtx as s,createTextVNode as o,createVNode as t,unref as r,useSSRContext as y}from"vue";import{ssrRenderComponent as i}from"vue/server-renderer";import{c as g}from"./page-utils-C-QWsEHe.js";import{D as G,a as d}from"./DocPage-DKr-0pQn.js";import{D as f}from"./DocPrerender-DPOnWPFO.js";import{C as h}from"./CopyButton-l3ndfN49.js";import{_ as B}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const $={__name:"color-utils",__ssrInlineRender:!0,setup(m){const b=[{name:"Color Palette",category:"Style & Identity",path:"/style/color-palette"}],k=[{id:"color-conversion",title:"2. Color Conversion"},{id:"color-processing",title:"3. Color Processing"},{id:"lighten-color-percent-",title:"3.1. lighten (color, percent)",sub:!0},{id:"luminosity-color-",title:"3.2. luminosity (color)",sub:!0},{id:"brightness-color-",title:"3.3. brightness (color)",sub:!0},{id:"blend-fgcolor-bgcolor-",title:"3.4. blend (fgColor, bgColor)",sub:!0},{id:"changealpha-color-offset-",title:"3.5. changeAlpha (color, offset)",sub:!0},{id:"helper-getpalettecolor",title:"4. Helper - getPaletteColor"}];return(O,R,v,w)=>{const A=j("q-markup-table");R(i(G,S({title:"Color Utils",desc:"A set of Quasar methods for changing app brand colors and manipulating color strings.",heading:"","edit-link":"quasar-utils/color-utils",toc:k,related:b},w),{default:s((H,l,p,n)=>{if(l)l(`<p${n}>Quasar provides a set of useful functions to manipulate colors easily in most use cases, without the high additional cost of integrating dedicated libraries.</p><div class="doc-note doc-note--tip"${n}><p class="doc-note__title"${n}>TIP</p><p${n}>For usage with the UMD build see `),l(i(d,{to:"/start/umd#quasar-global-object"},{default:s((c,a,u,e)=>{if(a)a("here");else return[o("here")]}),_:1},p,n)),l(`.</p></div><h2 id="color-conversion" class="doc-heading doc-h2"${n}>Color Conversion</h2><p${n}>These functions take a color as string or Object and convert it to another format.</p>`),l(i(A,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:s((c,a,u,e)=>{if(a)a(`<thead${e}><tr${e}><th class="text-left"${e}>Function</th><th class="text-left"${e}>Source format</th><th class="text-left"${e}>Destination format</th><th class="text-left"${e}>Description</th></tr></thead><tbody${e}><tr${e}><td${e}><code class="doc-token"${e}>rgbToHex</code></td><td${e}>Object</td><td${e}>String</td><td${e}>Converts a RGB/A color Object (<code class="doc-token"${e}>{ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}</code>) to its HEX/A representation as a String (<code class="doc-token"${e}>#RRGGBB&lt;AA&gt;</code>). If Alpha channel is present in the original object it will be present also in the output.</td></tr><tr${e}><td${e}><code class="doc-token"${e}>rgbToHsv</code></td><td${e}>Object</td><td${e}>Object</td><td${e}>Converts a RGB/A color Object (<code class="doc-token"${e}>{ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}</code>) to its HSV/A representation as an Object (<code class="doc-token"${e}>{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}</code>). If Alpha channel is present in the original object it will be present also in the output.</td></tr><tr${e}><td${e}><code class="doc-token"${e}>hexToRgb</code></td><td${e}>String</td><td${e}>Object</td><td${e}>Converts a HEX/A color String (<code class="doc-token"${e}>#RRGGBB&lt;AA&gt;</code>) to its RGB/A representation as an Object (<code class="doc-token"${e}>{ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}</code>) . If Alpha channel is present in the original object it will be present also in the output.</td></tr><tr${e}><td${e}><code class="doc-token"${e}>textToRgb</code></td><td${e}>String</td><td${e}>Object</td><td${e}>Converts a HEX/A color String (<code class="doc-token"${e}>#RRGGBB&lt;AA&gt;</code>) or a RGB/A color String(<code class="doc-token"${e}>rgb(R, G, B&lt;, A&gt;)</code>) to its RGB/A representation as an Object (<code class="doc-token"${e}>{ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}</code>). If Alpha channel is present in the original object it will be present also in the output.</td></tr><tr${e}><td${e}><code class="doc-token"${e}>hsvToRgb</code></td><td${e}>String</td><td${e}>Object</td><td${e}>Converts a HSV/A color Object (<code class="doc-token"${e}>{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}</code>) to its RGB/A representation as an Object (<code class="doc-token"${e}>{ r: [0-255], g: [0-255], b: [0-255}&lt;, a: [0-100]&gt;}</code>). If Alpha channel is present in the original object it will be present also in the output.</td></tr></tbody>`);else return[t("thead",null,[t("tr",null,[t("th",{class:"text-left"},"Function"),t("th",{class:"text-left"},"Source format"),t("th",{class:"text-left"},"Destination format"),t("th",{class:"text-left"},"Description")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"rgbToHex")]),t("td",null,"Object"),t("td",null,"String"),t("td",null,[o("Converts a RGB/A color Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") to its HEX/A representation as a String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"rgbToHsv")]),t("td",null,"Object"),t("td",null,"Object"),t("td",null,[o("Converts a RGB/A color Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") to its HSV/A representation as an Object ("),t("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"hexToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HEX/A color String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") . If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"textToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HEX/A color String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o(") or a RGB/A color String("),t("code",{class:"doc-token"},"rgb(R, G, B<, A>)"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"hsvToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HSV/A color Object ("),t("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])])])]}),_:1},p,n)),l(`<h2 id="color-processing" class="doc-heading doc-h2"${n}>Color Processing</h2><p${n}>These functions perform changes on the color or extract specific information.</p><h3 id="lighten-color-percent-" class="doc-heading doc-h3"${n}>lighten (color, percent)</h3><p${n}>Lighten the <code class="doc-token"${n}>color</code> (if <code class="doc-token"${n}>percent</code> is positive) or darken it (if <code class="doc-token"${n}>percent</code> is negative).</p><p${n}>Accepts a HEX/A String or a RGB/A String as <code class="doc-token"${n}>color</code> and a <code class="doc-token"${n}>percent</code> (0 to 100 or -100 to 0) of lighten/darken to be applied to the <code class="doc-token"${n}>color</code>. Returns a HEX String representation of the calculated <code class="doc-token"${n}>color</code>.</p><h3 id="luminosity-color-" class="doc-heading doc-h3"${n}>luminosity (color)</h3><p${n}>Calculates the `),l(i(d,{to:"http://www.w3.org/TR/WCAG20/#relativeluminancedef"},{default:s((c,a,u,e)=>{if(a)a("relative luminance");else return[o("relative luminance")]}),_:1},p,n)),l(` of the <code class="doc-token"${n}>color</code>.</p><p${n}>Accepts a HEX/A String, a RGB/A String or a RGB/A Object as <code class="doc-token"${n}>color</code>. Returns a value between 0 and 1.</p><h3 id="brightness-color-" class="doc-heading doc-h3"${n}>brightness (color)</h3><p${n}>Calculates the `),l(i(d,{to:"https://www.w3.org/TR/AERT/#color-contrast"},{default:s((c,a,u,e)=>{if(a)a("color contrast");else return[o("color contrast")]}),_:1},p,n)),l(` of the <code class="doc-token"${n}>color</code>.</p><p${n}>Accepts a HEX/A String, a RGB/A String or a RGB/A Object as <code class="doc-token"${n}>color</code>. Returns a value between 0 and 255. A value of &lt; 128 would be considered a dark color.</p><h3 id="blend-fgcolor-bgcolor-" class="doc-heading doc-h3"${n}>blend (fgColor, bgColor)</h3><p${n}>Calculates the `),l(i(d,{to:"https://www.w3.org/TR/compositing-1/#simplealphacompositing"},{default:s((c,a,u,e)=>{if(a)a("blend");else return[o("blend")]}),_:1},p,n)),l(` of two colors.</p><p${n}>Accepts a HEX/A String or a RGB/A Object as <code class="doc-token"${n}>fgColor</code> / <code class="doc-token"${n}>bgColor</code>. If the alpha channel of the <code class="doc-token"${n}>fgColor</code> is completely opaque, then the result will be the <code class="doc-token"${n}>fgColor</code>. If the alpha channel of the <code class="doc-token"${n}>bgColor</code> is completely opaque, then the resulting blended color will also be opaque. Returns the same type as input for fgColor.</p><h3 id="changealpha-color-offset-" class="doc-heading doc-h3"${n}>changeAlpha (color, offset)</h3><p${n}>Increments or decrements the alpha of a string color.</p><p${n}>Accepts a HEX/A String as <code class="doc-token"${n}>color</code> and a number between -1 and 1 (including edges) as <code class="doc-token"${n}>offset</code>. Use a negative value to decrement and a positive number to increment (ex: <code class="doc-token"${n}>changeAlpha(&#39;#ff0000&#39;, -0.1)</code> to decrement alpha by 10%). Returns HEX/A String.</p><h2 id="helper-getpalettecolor" class="doc-heading doc-h2"${n}>Helper - getPaletteColor</h2><p${n}>You can query any brand color, palette color or custom color in JS context to get its hex string value. Note that the method below is not cheap to run, so use it with care:</p>`),l(i(r(f),null,{default:s((c,a,u,e)=>{if(a)a(`<pre class="doc-code"${e}><code${e}><span class="token keyword"${e}>import</span> <span class="token punctuation"${e}>{</span> colors <span class="token punctuation"${e}>}</span> <span class="token keyword"${e}>from</span> <span class="token string"${e}>&#39;quasar&#39;</span>

<span class="token keyword"${e}>const</span> <span class="token punctuation"${e}>{</span> getPaletteColor <span class="token punctuation"${e}>}</span> <span class="token operator"${e}>=</span> colors

console<span class="token punctuation"${e}>.</span><span class="token function"${e}>log</span><span class="token punctuation"${e}>(</span><span class="token function"${e}>getPaletteColor</span><span class="token punctuation"${e}>(</span><span class="token string"${e}>&#39;primary&#39;</span><span class="token punctuation"${e}>)</span><span class="token punctuation"${e}>)</span> <span class="token comment"${e}>// &#39;#1976d2&#39;</span>
console<span class="token punctuation"${e}>.</span><span class="token function"${e}>log</span><span class="token punctuation"${e}>(</span><span class="token function"${e}>getPaletteColor</span><span class="token punctuation"${e}>(</span><span class="token string"${e}>&#39;red-2&#39;</span><span class="token punctuation"${e}>)</span><span class="token punctuation"${e}>)</span> <span class="token comment"${e}>// &#39;#ffcdd2&#39;</span></code></pre>`),a(i(h,null,null,u,e));else return[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token keyword"},"import"),o(),t("span",{class:"token punctuation"},"{"),o(" colors "),t("span",{class:"token punctuation"},"}"),o(),t("span",{class:"token keyword"},"from"),o(),t("span",{class:"token string"},"'quasar'"),o(`

`),t("span",{class:"token keyword"},"const"),o(),t("span",{class:"token punctuation"},"{"),o(" getPaletteColor "),t("span",{class:"token punctuation"},"}"),o(),t("span",{class:"token operator"},"="),o(` colors

console`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'primary'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#1976d2'"),o(`
console`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'red-2'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#ffcdd2'")])]),t(h)]}),_:1},p,n)),l(`<p${n}>Assuming you’ve created `),l(i(d,{to:"/style/color-palette#adding-your-own-colors"},{default:s((c,a,u,e)=>{if(a)a("a custom color");else return[o("a custom color")]}),_:1},p,n)),l(" and named it “my-color”, then you can extract its value in JS:</p>"),l(i(r(f),null,{default:s((c,a,u,e)=>{if(a)a(`<pre class="doc-code"${e}><code${e}>console<span class="token punctuation"${e}>.</span><span class="token function"${e}>log</span><span class="token punctuation"${e}>(</span><span class="token function"${e}>getPaletteColor</span><span class="token punctuation"${e}>(</span><span class="token string"${e}>&#39;my-color&#39;</span><span class="token punctuation"${e}>)</span><span class="token punctuation"${e}>)</span> <span class="token comment"${e}>// &#39;#...&#39;</span></code></pre>`),a(i(h,null,null,u,e));else return[t("pre",{class:"doc-code"},[t("code",null,[o("console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'my-color'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#...'")])]),t(h)]}),_:1},p,n));else return[t("p",null,"Quasar provides a set of useful functions to manipulate colors easily in most use cases, without the high additional cost of integrating dedicated libraries."),t("div",{class:"doc-note doc-note--tip"},[t("p",{class:"doc-note__title"},"TIP"),t("p",null,[o("For usage with the UMD build see "),t(d,{to:"/start/umd#quasar-global-object"},{default:s(()=>[o("here")]),_:1}),o(".")])]),t("h2",{id:"color-conversion",class:"doc-heading doc-h2",onClick:c=>r(g)("color-conversion")},"Color Conversion",8,["onClick"]),t("p",null,"These functions take a color as string or Object and convert it to another format."),t(A,{class:"doc-page-table","wrap-cells":!0,flat:!0,bordered:!0},{default:s(()=>[t("thead",null,[t("tr",null,[t("th",{class:"text-left"},"Function"),t("th",{class:"text-left"},"Source format"),t("th",{class:"text-left"},"Destination format"),t("th",{class:"text-left"},"Description")])]),t("tbody",null,[t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"rgbToHex")]),t("td",null,"Object"),t("td",null,"String"),t("td",null,[o("Converts a RGB/A color Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") to its HEX/A representation as a String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"rgbToHsv")]),t("td",null,"Object"),t("td",null,"Object"),t("td",null,[o("Converts a RGB/A color Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") to its HSV/A representation as an Object ("),t("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"hexToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HEX/A color String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o(") . If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"textToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HEX/A color String ("),t("code",{class:"doc-token"},"#RRGGBB<AA>"),o(") or a RGB/A color String("),t("code",{class:"doc-token"},"rgb(R, G, B<, A>)"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])]),t("tr",null,[t("td",null,[t("code",{class:"doc-token"},"hsvToRgb")]),t("td",null,"String"),t("td",null,"Object"),t("td",null,[o("Converts a HSV/A color Object ("),t("code",{class:"doc-token"},"{ h: [0-360], s: [0-100], v: [0-100}, a: [0-100]}"),o(") to its RGB/A representation as an Object ("),t("code",{class:"doc-token"},"{ r: [0-255], g: [0-255], b: [0-255}<, a: [0-100]>}"),o("). If Alpha channel is present in the original object it will be present also in the output.")])])])]),_:1}),t("h2",{id:"color-processing",class:"doc-heading doc-h2",onClick:c=>r(g)("color-processing")},"Color Processing",8,["onClick"]),t("p",null,"These functions perform changes on the color or extract specific information."),t("h3",{id:"lighten-color-percent-",class:"doc-heading doc-h3",onClick:c=>r(g)("lighten-color-percent-")},"lighten (color, percent)",8,["onClick"]),t("p",null,[o("Lighten the "),t("code",{class:"doc-token"},"color"),o(" (if "),t("code",{class:"doc-token"},"percent"),o(" is positive) or darken it (if "),t("code",{class:"doc-token"},"percent"),o(" is negative).")]),t("p",null,[o("Accepts a HEX/A String or a RGB/A String as "),t("code",{class:"doc-token"},"color"),o(" and a "),t("code",{class:"doc-token"},"percent"),o(" (0 to 100 or -100 to 0) of lighten/darken to be applied to the "),t("code",{class:"doc-token"},"color"),o(". Returns a HEX String representation of the calculated "),t("code",{class:"doc-token"},"color"),o(".")]),t("h3",{id:"luminosity-color-",class:"doc-heading doc-h3",onClick:c=>r(g)("luminosity-color-")},"luminosity (color)",8,["onClick"]),t("p",null,[o("Calculates the "),t(d,{to:"http://www.w3.org/TR/WCAG20/#relativeluminancedef"},{default:s(()=>[o("relative luminance")]),_:1}),o(" of the "),t("code",{class:"doc-token"},"color"),o(".")]),t("p",null,[o("Accepts a HEX/A String, a RGB/A String or a RGB/A Object as "),t("code",{class:"doc-token"},"color"),o(". Returns a value between 0 and 1.")]),t("h3",{id:"brightness-color-",class:"doc-heading doc-h3",onClick:c=>r(g)("brightness-color-")},"brightness (color)",8,["onClick"]),t("p",null,[o("Calculates the "),t(d,{to:"https://www.w3.org/TR/AERT/#color-contrast"},{default:s(()=>[o("color contrast")]),_:1}),o(" of the "),t("code",{class:"doc-token"},"color"),o(".")]),t("p",null,[o("Accepts a HEX/A String, a RGB/A String or a RGB/A Object as "),t("code",{class:"doc-token"},"color"),o(". Returns a value between 0 and 255. A value of < 128 would be considered a dark color.")]),t("h3",{id:"blend-fgcolor-bgcolor-",class:"doc-heading doc-h3",onClick:c=>r(g)("blend-fgcolor-bgcolor-")},"blend (fgColor, bgColor)",8,["onClick"]),t("p",null,[o("Calculates the "),t(d,{to:"https://www.w3.org/TR/compositing-1/#simplealphacompositing"},{default:s(()=>[o("blend")]),_:1}),o(" of two colors.")]),t("p",null,[o("Accepts a HEX/A String or a RGB/A Object as "),t("code",{class:"doc-token"},"fgColor"),o(" / "),t("code",{class:"doc-token"},"bgColor"),o(". If the alpha channel of the "),t("code",{class:"doc-token"},"fgColor"),o(" is completely opaque, then the result will be the "),t("code",{class:"doc-token"},"fgColor"),o(". If the alpha channel of the "),t("code",{class:"doc-token"},"bgColor"),o(" is completely opaque, then the resulting blended color will also be opaque. Returns the same type as input for fgColor.")]),t("h3",{id:"changealpha-color-offset-",class:"doc-heading doc-h3",onClick:c=>r(g)("changealpha-color-offset-")},"changeAlpha (color, offset)",8,["onClick"]),t("p",null,"Increments or decrements the alpha of a string color."),t("p",null,[o("Accepts a HEX/A String as "),t("code",{class:"doc-token"},"color"),o(" and a number between -1 and 1 (including edges) as "),t("code",{class:"doc-token"},"offset"),o(". Use a negative value to decrement and a positive number to increment (ex: "),t("code",{class:"doc-token"},"changeAlpha('#ff0000', -0.1)"),o(" to decrement alpha by 10%). Returns HEX/A String.")]),t("h2",{id:"helper-getpalettecolor",class:"doc-heading doc-h2",onClick:c=>r(g)("helper-getpalettecolor")},"Helper - getPaletteColor",8,["onClick"]),t("p",null,"You can query any brand color, palette color or custom color in JS context to get its hex string value. Note that the method below is not cheap to run, so use it with care:"),t(r(f),null,{default:s(()=>[t("pre",{class:"doc-code"},[t("code",null,[t("span",{class:"token keyword"},"import"),o(),t("span",{class:"token punctuation"},"{"),o(" colors "),t("span",{class:"token punctuation"},"}"),o(),t("span",{class:"token keyword"},"from"),o(),t("span",{class:"token string"},"'quasar'"),o(`

`),t("span",{class:"token keyword"},"const"),o(),t("span",{class:"token punctuation"},"{"),o(" getPaletteColor "),t("span",{class:"token punctuation"},"}"),o(),t("span",{class:"token operator"},"="),o(` colors

console`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'primary'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#1976d2'"),o(`
console`),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'red-2'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#ffcdd2'")])]),t(h)]),_:1}),t("p",null,[o("Assuming you’ve created "),t(d,{to:"/style/color-palette#adding-your-own-colors"},{default:s(()=>[o("a custom color")]),_:1}),o(" and named it “my-color”, then you can extract its value in JS:")]),t(r(f),null,{default:s(()=>[t("pre",{class:"doc-code"},[t("code",null,[o("console"),t("span",{class:"token punctuation"},"."),t("span",{class:"token function"},"log"),t("span",{class:"token punctuation"},"("),t("span",{class:"token function"},"getPaletteColor"),t("span",{class:"token punctuation"},"("),t("span",{class:"token string"},"'my-color'"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),o(),t("span",{class:"token comment"},"// '#...'")])]),t(h)]),_:1})]}),_:1},v))}}},C=$.setup;$.setup=(m,b)=>{const k=y();return(k.modules||(k.modules=new Set)).add("src/pages/quasar-utils/color-utils.md"),C?C(m,b):void 0};const M=B($,[["__file","color-utils.md"]]);export{M as default};
