import{resolveComponent as F,mergeProps as M,withCtx as l,createTextVNode as e,unref as i,createVNode as n,useSSRContext as R}from"vue";import{ssrRenderComponent as r}from"vue/server-renderer";import{c as $}from"./page-utils-C-QWsEHe.js";import{D as B,a as g}from"./DocPage-DKr-0pQn.js";import{D as d}from"./DocPrerender-DPOnWPFO.js";import{C as s}from"./CopyButton-l3ndfN49.js";import{_ as W}from"../server-entry.js";import"quasar";import"@quasar/extras/mdi-v6";import"vue-router";import"@quasar/extras/fontawesome-v5";import"@quasar/extras/fontawesome-v6";import"@quasar/extras/mdi-v7";import"quasar/icon-set/svg-mdi-v6.mjs";const q={__name:"opening-dev-server-to-public",__ssrInlineRender:!0,setup(S){const y=[{id:"using-tunnelmole",title:"2. Using Tunnelmole"},{id:"using-localhost-run",title:"3. Using localhost.run"},{id:"using-ngrok",title:"4. Using Ngrok"},{id:"inspecting-traffic",title:"4.1. Inspecting traffic",sub:!0}];return(v,P,N,T)=>{const f=F("q-tab-panel");P(r(B,M({title:"Opening Your Dev Server to the Public",desc:"(@quasar/app-webpack) How to offer temporary access to your development server to anyone on the Internet.",overline:"Quasar CLI with Webpack - @quasar/app-webpack",heading:"","edit-link":"quasar-cli-webpack/opening-dev-server-to-public",toc:y},T),{default:l((x,c,k,a)=>{if(c)c(`<p${a}>At some point you may want to show someone else the project you’ve been working on. Fortunately, there are a couple of good tools to accomplish this, `),c(r(g,{to:"https://localhost.run/"},{default:l((m,t,u,o)=>{if(t)t("localhost.run");else return[e("localhost.run")]}),_:1},k,a)),c(" and "),c(r(g,{to:"https://ngrok.com/"},{default:l((m,t,u,o)=>{if(t)t("Ngrok");else return[e("Ngrok")]}),_:1},k,a)),c(`. Both create a tunnel to your dev server and (by default) auto-generate an internet address on their respective servers to offer to your clients or anyone special you’d like to show your work to.</p><div class="doc-note doc-note--warning"${a}><p class="doc-note__title"${a}>WARNING</p><p${a}>Opening your dev server to the public poses security risks. Be absolutely cautious when using tools like this.</p><p${a}>When you’ve finished with your demonstration or testing, make sure to stop localhost.run or ngrok. This will prevent any unwanted access of your computer through them.</p></div><h2 id="using-tunnelmole" class="doc-heading doc-h2"${a}>Using Tunnelmole</h2><p${a}>Tunnelmole will work on any machine with NodeJS 16+ installed and has no non-JavaScript dependencies.</p><p${a}>First, install <code class="doc-token"${a}>tunnelmole</code> package globally:</p>`),c(r(i(d),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l((m,t,u,o)=>{if(t)t(r(f,{class:"q-pa-none",name:"Yarn"},{default:l((w,h,b,p)=>{if(h)h(`<pre class="doc-code"${p}><code${p}>$ <span class="token function"${p}>yarn</span> global <span class="token function"${p}>add</span> tunnelmole</code></pre>`),h(r(s,{lang:"bash"},null,b,p));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"yarn"),e(" global "),n("span",{class:"token function"},"add"),e(" tunnelmole")])]),n(s,{lang:"bash"})]}),_:1},u,o)),t(r(f,{class:"q-pa-none",name:"NPM"},{default:l((w,h,b,p)=>{if(h)h(`<pre class="doc-code"${p}><code${p}>$ <span class="token function"${p}>npm</span> <span class="token function"${p}>install</span> <span class="token parameter variable"${p}>-g</span> tunnelmole</code></pre>`),h(r(s,{lang:"bash"},null,b,p));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"npm"),e(),n("span",{class:"token function"},"install"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]}),_:1},u,o)),t(r(f,{class:"q-pa-none",name:"PNPM"},{default:l((w,h,b,p)=>{if(h)h(`<pre class="doc-code"${p}><code${p}>$ <span class="token function"${p}>pnpm</span> <span class="token function"${p}>add</span> <span class="token parameter variable"${p}>-g</span> tunnelmole</code></pre>`),h(r(s,{lang:"bash"},null,b,p));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"pnpm"),e(),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]}),_:1},u,o)),t(r(f,{class:"q-pa-none",name:"Bun"},{default:l((w,h,b,p)=>{if(h)h(`<pre class="doc-code"${p}><code${p}>$ bun <span class="token function"${p}>add</span> <span class="token parameter variable"${p}>-g</span> tunnelmole</code></pre>`),h(r(s,{lang:"bash"},null,b,p));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ bun "),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]}),_:1},u,o));else return[n(f,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"yarn"),e(" global "),n("span",{class:"token function"},"add"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"npm"),e(),n("span",{class:"token function"},"install"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"pnpm"),e(),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ bun "),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1})]}),_:1},k,a)),c(`<p${a}>Then, assuming you are running quasar on port <code class="doc-token"${a}>80</code>, run the following:</p>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ tmole <span class="token number"${o}>80</span></code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80")])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<p${a}>If your port is different to <code class="doc-token"${a}>80</code>, change <code class="doc-token"${a}>80</code> to your port.</p><p${a}>Here’s the full command with output:</p>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ tmole <span class="token number"${o}>80</span>
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80</code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80"),e(`
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80`)])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<p${a}>If you are self hosting your own Tunnelmole service or you have a set an API key for the official service, you can run the following to use a custom subdomain (again, replace <code class="doc-token"${a}>80</code> with your port if it is different).</p>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ tmole <span class="token number"${o}>80</span> as mysubdomain.tunnelmole.com</code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80"),e(" as mysubdomain.tunnelmole.com")])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<p${a}>Its also possible to launch tunnelmole from code if you add it as a dependency to your project (<code class="doc-token"${a}>yarn add --dev tunnelmole</code> or <code class="doc-token"${a}>npm i --save-dev tunnelmole</code> or pnpm/bun equivalents)</p><p${a}>First import tunnelmole. Both ES and CommonJS modules are supported.</p><p${a}>Importing tunnelmole as an ES module</p>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}><span class="token comment"${o}>// import as ESM:</span>
<span class="token keyword"${o}>import</span> <span class="token punctuation"${o}>{</span> tunnelmole <span class="token punctuation"${o}>}</span> <span class="token keyword"${o}>from</span> <span class="token string"${o}>&#39;tunnelmole&#39;</span><span class="token punctuation"${o}>;</span>

<span class="token comment"${o}>// or import as CommonJS module:</span>
<span class="token keyword"${o}>const</span> tunnelmole <span class="token operator"${o}>=</span> <span class="token function"${o}>require</span><span class="token punctuation"${o}>(</span><span class="token string"${o}>&#39;tunnelmole/cjs&#39;</span><span class="token punctuation"${o}>)</span><span class="token punctuation"${o}>;</span></code></pre>`),t(r(s,null,null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// import as ESM:"),e(`
`),n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" tunnelmole "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'tunnelmole'"),n("span",{class:"token punctuation"},";"),e(`

`),n("span",{class:"token comment"},"// or import as CommonJS module:"),e(`
`),n("span",{class:"token keyword"},"const"),e(" tunnelmole "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'tunnelmole/cjs'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")])]),n(s)]}),_:1},k,a)),c(`<p${a}>Once the module is imported you can start tunnelmole with the code below, changing port <code class="doc-token"${a}>80</code> to the port your application listens on if it is different.</p>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}><span class="token keyword"${o}>const</span> url <span class="token operator"${o}>=</span> <span class="token keyword"${o}>await</span> <span class="token function"${o}>tunnelmole</span><span class="token punctuation"${o}>(</span><span class="token punctuation"${o}>{</span>
    <span class="token literal-property property"${o}>port</span><span class="token operator"${o}>:</span> <span class="token number"${o}>80</span>
    <span class="token comment"${o}>// Optionally, add &quot;domain: &#39;mysubdomain.tunnelmole.com&#39;&quot; if using a custom subdomain</span>
<span class="token punctuation"${o}>}</span><span class="token punctuation"${o}>)</span><span class="token punctuation"${o}>;</span>
<span class="token comment"${o}>// url = https://idsq6j-ip-157-211-195-169.tunnelmole.com</span></code></pre>`),t(r(s,null,null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),e(" url "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"await"),e(),n("span",{class:"token function"},"tunnelmole"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token literal-property property"},"port"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token number"},"80"),e(`
    `),n("span",{class:"token comment"},`// Optionally, add "domain: 'mysubdomain.tunnelmole.com'" if using a custom subdomain`),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token comment"},"// url = https://idsq6j-ip-157-211-195-169.tunnelmole.com")])]),n(s)]}),_:1},k,a)),c(`<h2 id="using-localhost-run" class="doc-heading doc-h2"${a}>Using localhost.run</h2><ol${a}><li${a}>Assuming you have an SSH shell, you only need issue the following command (substituting your details)</li></ol>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ <span class="token function"${o}>ssh</span> <span class="token parameter variable"${o}>-R</span> <span class="token number"${o}>80</span>:localhost:8080 ssh.localhost.run
<span class="token comment"${o}># In case your development server doesn&#39;t run on port 8080 you need to change the number to the correct port</span></code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"ssh"),e(),n("span",{class:"token parameter variable"},"-R"),e(),n("span",{class:"token number"},"80"),e(`:localhost:8080 ssh.localhost.run
`),n("span",{class:"token comment"},"# In case your development server doesn't run on port 8080 you need to change the number to the correct port")])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<ol start="2"${a}><li${a}>That’s it, and you will now have a random subdomain based on your current system username assigned to you like so:</li></ol>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ <span class="token function"${o}>ssh</span> <span class="token parameter variable"${o}>-R</span> <span class="token number"${o}>80</span>:localhost:8080 ssh.localhost.run
Connect to http://fakeusername-random4chars.localhost.run or https://fakeusername-random4chars.localhost.run
Press ctrl-c to quit.</code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"ssh"),e(),n("span",{class:"token parameter variable"},"-R"),e(),n("span",{class:"token number"},"80"),e(`:localhost:8080 ssh.localhost.run
Connect to http://fakeusername-random4chars.localhost.run or https://fakeusername-random4chars.localhost.run
Press ctrl-c to quit.`)])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<p${a}>It’s not currently possible to request your own subdomain.</p><h2 id="using-ngrok" class="doc-heading doc-h2"${a}>Using Ngrok</h2><ol${a}><li${a}><p${a}>Download and install ngrok `),c(r(g,{to:"https://ngrok.com/download"},{default:l((m,t,u,o)=>{if(t)t("here");else return[e("here")]}),_:1},k,a)),c(`. (Please note that the ngrok executable file does not need to be placed in or run from inside your cordova folder. When on a mac it’s best to place the ngrok executable file inside <code class="doc-token"${a}>/usr/local/bin</code> to be able to run it globally.)</p></li><li${a}><p${a}>Start your Dev server</p></li></ol>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ quasar dev</code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,"$ quasar dev")]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<ol start="3"${a}><li${a}>Create your ngrok connection</li></ol>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>$ ngrok http <span class="token number"${o}>8080</span>
<span class="token comment"${o}># In case your development server doesn&#39;t run on port 8080 you need to change the number to the correct port</span></code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e("$ ngrok http "),n("span",{class:"token number"},"8080"),e(`
`),n("span",{class:"token comment"},"# In case your development server doesn't run on port 8080 you need to change the number to the correct port")])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<ol start="4"${a}><li${a}>ngrok shows the url in the command line when it started.</li></ol>`),c(r(i(d),null,{default:l((m,t,u,o)=>{if(t)t(`<pre class="doc-code"${o}><code${o}>Tunnel Status                 online
Version                       <span class="token number"${o}>2.0</span>/2.0
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://92832de0.ngrok.io -<span class="token operator"${o}>&gt;</span> localhost:8080
Forwarding                    https://92832de0.ngrok.io -<span class="token operator"${o}>&gt;</span> localhost:8080

Connections                  ttl     opn     rt1     rt5     p50     p90
                              <span class="token number"${o}>0</span>       <span class="token number"${o}>0</span>       <span class="token number"${o}>0.00</span>    <span class="token number"${o}>0.00</span>    <span class="token number"${o}>0.00</span>    <span class="token number"${o}>0.00</span></code></pre>`),t(r(s,{lang:"bash"},null,u,o));else return[n("pre",{class:"doc-code"},[n("code",null,[e(`Tunnel Status                 online
Version                       `),n("span",{class:"token number"},"2.0"),e(`/2.0
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://92832de0.ngrok.io -`),n("span",{class:"token operator"},">"),e(` localhost:8080
Forwarding                    https://92832de0.ngrok.io -`),n("span",{class:"token operator"},">"),e(` localhost:8080

Connections                  ttl     opn     rt1     rt5     p50     p90
                              `),n("span",{class:"token number"},"0"),e("       "),n("span",{class:"token number"},"0"),e("       "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00")])]),n(s,{lang:"bash"})]}),_:1},k,a)),c(`<p${a}>Please be careful as the ‘Forwarding’ URL will be accessible to anyone until this connection is closed again.</p><h3 id="inspecting-traffic" class="doc-heading doc-h3"${a}>Inspecting traffic</h3><p${a}>When running ngrok, visit <code class="doc-token"${a}>http://localhost:4040</code> to inspect the traffic.</p><p${a}>This tool allows for custom domains, password protection and a lot more. If you require further assistance, please refer to the `),c(r(g,{to:"https://ngrok.com/docs"},{default:l((m,t,u,o)=>{if(t)t("ngrok docs");else return[e("ngrok docs")]}),_:1},k,a)),c(" for more information.</p>");else return[n("p",null,[e("At some point you may want to show someone else the project you’ve been working on. Fortunately, there are a couple of good tools to accomplish this, "),n(g,{to:"https://localhost.run/"},{default:l(()=>[e("localhost.run")]),_:1}),e(" and "),n(g,{to:"https://ngrok.com/"},{default:l(()=>[e("Ngrok")]),_:1}),e(". Both create a tunnel to your dev server and (by default) auto-generate an internet address on their respective servers to offer to your clients or anyone special you’d like to show your work to.")]),n("div",{class:"doc-note doc-note--warning"},[n("p",{class:"doc-note__title"},"WARNING"),n("p",null,"Opening your dev server to the public poses security risks. Be absolutely cautious when using tools like this."),n("p",null,"When you’ve finished with your demonstration or testing, make sure to stop localhost.run or ngrok. This will prevent any unwanted access of your computer through them.")]),n("h2",{id:"using-tunnelmole",class:"doc-heading doc-h2",onClick:m=>i($)("using-tunnelmole")},"Using Tunnelmole",8,["onClick"]),n("p",null,"Tunnelmole will work on any machine with NodeJS 16+ installed and has no non-JavaScript dependencies."),n("p",null,[e("First, install "),n("code",{class:"doc-token"},"tunnelmole"),e(" package globally:")]),n(i(d),{tabs:["Yarn","NPM","PNPM","Bun"]},{default:l(()=>[n(f,{class:"q-pa-none",name:"Yarn"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"yarn"),e(" global "),n("span",{class:"token function"},"add"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"NPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"npm"),e(),n("span",{class:"token function"},"install"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"PNPM"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"pnpm"),e(),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1}),n(f,{class:"q-pa-none",name:"Bun"},{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ bun "),n("span",{class:"token function"},"add"),e(),n("span",{class:"token parameter variable"},"-g"),e(" tunnelmole")])]),n(s,{lang:"bash"})]),_:1})]),_:1}),n("p",null,[e("Then, assuming you are running quasar on port "),n("code",{class:"doc-token"},"80"),e(", run the following:")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80")])]),n(s,{lang:"bash"})]),_:1}),n("p",null,[e("If your port is different to "),n("code",{class:"doc-token"},"80"),e(", change "),n("code",{class:"doc-token"},"80"),e(" to your port.")]),n("p",null,"Here’s the full command with output:"),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80"),e(`
http://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80
https://b8ootd-ip-157-211-195-182.tunnelmole.com is forwarding to localhost:80`)])]),n(s,{lang:"bash"})]),_:1}),n("p",null,[e("If you are self hosting your own Tunnelmole service or you have a set an API key for the official service, you can run the following to use a custom subdomain (again, replace "),n("code",{class:"doc-token"},"80"),e(" with your port if it is different).")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ tmole "),n("span",{class:"token number"},"80"),e(" as mysubdomain.tunnelmole.com")])]),n(s,{lang:"bash"})]),_:1}),n("p",null,[e("Its also possible to launch tunnelmole from code if you add it as a dependency to your project ("),n("code",{class:"doc-token"},"yarn add --dev tunnelmole"),e(" or "),n("code",{class:"doc-token"},"npm i --save-dev tunnelmole"),e(" or pnpm/bun equivalents)")]),n("p",null,"First import tunnelmole. Both ES and CommonJS modules are supported."),n("p",null,"Importing tunnelmole as an ES module"),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token comment"},"// import as ESM:"),e(`
`),n("span",{class:"token keyword"},"import"),e(),n("span",{class:"token punctuation"},"{"),e(" tunnelmole "),n("span",{class:"token punctuation"},"}"),e(),n("span",{class:"token keyword"},"from"),e(),n("span",{class:"token string"},"'tunnelmole'"),n("span",{class:"token punctuation"},";"),e(`

`),n("span",{class:"token comment"},"// or import as CommonJS module:"),e(`
`),n("span",{class:"token keyword"},"const"),e(" tunnelmole "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token function"},"require"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'tunnelmole/cjs'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")])]),n(s)]),_:1}),n("p",null,[e("Once the module is imported you can start tunnelmole with the code below, changing port "),n("code",{class:"doc-token"},"80"),e(" to the port your application listens on if it is different.")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[n("span",{class:"token keyword"},"const"),e(" url "),n("span",{class:"token operator"},"="),e(),n("span",{class:"token keyword"},"await"),e(),n("span",{class:"token function"},"tunnelmole"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"{"),e(`
    `),n("span",{class:"token literal-property property"},"port"),n("span",{class:"token operator"},":"),e(),n("span",{class:"token number"},"80"),e(`
    `),n("span",{class:"token comment"},`// Optionally, add "domain: 'mysubdomain.tunnelmole.com'" if using a custom subdomain`),e(`
`),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),e(`
`),n("span",{class:"token comment"},"// url = https://idsq6j-ip-157-211-195-169.tunnelmole.com")])]),n(s)]),_:1}),n("h2",{id:"using-localhost-run",class:"doc-heading doc-h2",onClick:m=>i($)("using-localhost-run")},"Using localhost.run",8,["onClick"]),n("ol",null,[n("li",null,"Assuming you have an SSH shell, you only need issue the following command (substituting your details)")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"ssh"),e(),n("span",{class:"token parameter variable"},"-R"),e(),n("span",{class:"token number"},"80"),e(`:localhost:8080 ssh.localhost.run
`),n("span",{class:"token comment"},"# In case your development server doesn't run on port 8080 you need to change the number to the correct port")])]),n(s,{lang:"bash"})]),_:1}),n("ol",{start:"2"},[n("li",null,"That’s it, and you will now have a random subdomain based on your current system username assigned to you like so:")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ "),n("span",{class:"token function"},"ssh"),e(),n("span",{class:"token parameter variable"},"-R"),e(),n("span",{class:"token number"},"80"),e(`:localhost:8080 ssh.localhost.run
Connect to http://fakeusername-random4chars.localhost.run or https://fakeusername-random4chars.localhost.run
Press ctrl-c to quit.`)])]),n(s,{lang:"bash"})]),_:1}),n("p",null,"It’s not currently possible to request your own subdomain."),n("h2",{id:"using-ngrok",class:"doc-heading doc-h2",onClick:m=>i($)("using-ngrok")},"Using Ngrok",8,["onClick"]),n("ol",null,[n("li",null,[n("p",null,[e("Download and install ngrok "),n(g,{to:"https://ngrok.com/download"},{default:l(()=>[e("here")]),_:1}),e(". (Please note that the ngrok executable file does not need to be placed in or run from inside your cordova folder. When on a mac it’s best to place the ngrok executable file inside "),n("code",{class:"doc-token"},"/usr/local/bin"),e(" to be able to run it globally.)")])]),n("li",null,[n("p",null,"Start your Dev server")])]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,"$ quasar dev")]),n(s,{lang:"bash"})]),_:1}),n("ol",{start:"3"},[n("li",null,"Create your ngrok connection")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e("$ ngrok http "),n("span",{class:"token number"},"8080"),e(`
`),n("span",{class:"token comment"},"# In case your development server doesn't run on port 8080 you need to change the number to the correct port")])]),n(s,{lang:"bash"})]),_:1}),n("ol",{start:"4"},[n("li",null,"ngrok shows the url in the command line when it started.")]),n(i(d),null,{default:l(()=>[n("pre",{class:"doc-code"},[n("code",null,[e(`Tunnel Status                 online
Version                       `),n("span",{class:"token number"},"2.0"),e(`/2.0
Web Interface                 http://127.0.0.1:4040
Forwarding                    http://92832de0.ngrok.io -`),n("span",{class:"token operator"},">"),e(` localhost:8080
Forwarding                    https://92832de0.ngrok.io -`),n("span",{class:"token operator"},">"),e(` localhost:8080

Connections                  ttl     opn     rt1     rt5     p50     p90
                              `),n("span",{class:"token number"},"0"),e("       "),n("span",{class:"token number"},"0"),e("       "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00"),e("    "),n("span",{class:"token number"},"0.00")])]),n(s,{lang:"bash"})]),_:1}),n("p",null,"Please be careful as the ‘Forwarding’ URL will be accessible to anyone until this connection is closed again."),n("h3",{id:"inspecting-traffic",class:"doc-heading doc-h3",onClick:m=>i($)("inspecting-traffic")},"Inspecting traffic",8,["onClick"]),n("p",null,[e("When running ngrok, visit "),n("code",{class:"doc-token"},"http://localhost:4040"),e(" to inspect the traffic.")]),n("p",null,[e("This tool allows for custom domains, password protection and a lot more. If you require further assistance, please refer to the "),n(g,{to:"https://ngrok.com/docs"},{default:l(()=>[e("ngrok docs")]),_:1}),e(" for more information.")])]}),_:1},N))}}},C=q.setup;q.setup=(S,y)=>{const v=R();return(v.modules||(v.modules=new Set)).add("src/pages/quasar-cli-webpack/opening-dev-server-to-public.md"),C?C(S,y):void 0};const K=W(q,[["__file","opening-dev-server-to-public.md"]]);export{K as default};
